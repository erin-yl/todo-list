(()=>{"use strict";var t={56:(t,e,n)=>{t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},72:t=>{var e=[];function n(t){for(var n=-1,o=0;o<e.length;o++)if(e[o].identifier===t){n=o;break}return n}function o(t,o){for(var a={},i=[],d=0;d<t.length;d++){var s=t[d],c=o.base?s[0]+o.base:s[0],u=a[c]||0,l="".concat(c," ").concat(u);a[c]=u+1;var f=n(l),A={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==f)e[f].references++,e[f].updater(A);else{var m=r(A,o);o.byIndex=d,e.splice(d,0,{identifier:l,updater:m,references:1})}i.push(l)}return i}function r(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;n.update(t=e)}else n.remove()}}t.exports=function(t,r){var a=o(t=t||[],r=r||{});return function(t){t=t||[];for(var i=0;i<a.length;i++){var d=n(a[i]);e[d].references--}for(var s=o(t,r),c=0;c<a.length;c++){var u=n(a[c]);0===e[u].references&&(e[u].updater(),e.splice(u,1))}a=s}}},113:t=>{t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}},208:(t,e,n)=>{n.d(e,{A:()=>d});var o=n(354),r=n.n(o),a=n(314),i=n.n(a)()(r());i.push([t.id,'*, *::before, *::after {\n  box-sizing: border-box;\n}\n\n* {\n  margin: 0;\n}\n\nbody {\n  font-family: "Poppins", serif;\n  color: #212428;\n  margin: 4vw auto;\n  max-width: 1280px;\n}\n\n.container {\n  width: 92vw;\n  max-width: 1200px;\n  margin: 20px auto;\n  background: #fafafa;\n  padding: 20px;\n}\n\nh1 {\n  font-weight: 600;\n  font-size: 1.5em;\n  letter-spacing: .4px;\n}\n\n.app-layout {\n  display: flex;\n  gap: 24px;\n}\n\n.projects-sidebar {\n  flex-basis: 250px;\n  padding: 16px;\n  background-color: #e9ecef;\n  border-radius: 4px;\n}\n\n\n.projects-sidebar h2 {\n  margin-top: 0;\n  border-bottom: 1px solid #ccc;\n  padding-bottom: 10px;\n}\n\n#projects-list {\n  list-style-type: none;\n  padding: 0;\n}\n\n#projects-list li {\n  padding: 8px;\n  margin-bottom: 5px;\n  background-color: #f8f9fa;\n  border: 1px solid #dee2e6;\n  border-radius: 3px;\n  cursor: pointer;\n  transition: background-color 0.3s;\n}\n\n#projects-list li.active,\n#projects-list li:hover {\n  background-color: #007bff;\n  color: white;\n}\n\n#add-project-btn, #add-todo-btn {\n  display: block;\n  width: 100%;\n  padding: 10px;\n  background-color: #28a745;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  margin-top: 15px;\n  text-align: center;\n}\n\n#add-project-btn:hover, #add-todo-btn:hover {\n  background-color: #218838;\n}\n\n.todos-view {\n  flex-grow: 1; /* Takes remaining space */\n  padding: 15px;\n}\n\n.todos-view h2 {\n  margin-top: 0;\n  border-bottom: 1px solid #ccc;\n  padding-bottom: 10px;\n}\n\n.todos-controls {\n  margin-bottom: 15px;\n}\n\n#todos-list {\n  list-style-type: none;\n  padding: 0;\n}\n\n#todos-list li {\n  background: #fdfdfd;\n  border: 1px solid #eee;\n  padding: 10px 15px;\n  margin-bottom: 8px;\n  border-radius: 4px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n#todos-list li .todo-info {\n  display: flex;\n  align-items: center;\n  gap: 10px;\n}\n\n#todos-list li .todo-title {\n  font-weight: bold;\n}\n\n#todos-list li .todo-due-date {\n  font-size: 0.9em;\n  color: #666;\n}\n\n#todos-list li .todo-actions button {\n  margin-left: 8px;\n  padding: 5px 8px;\n  cursor: pointer;\n  border: 1px solid #ccc;\n  border-radius: 3px;\n}\n\n#todos-list li .todo-actions .edit-todo-btn {\n  background-color: #ffc107;\n}\n#todos-list li .todo-actions .delete-todo-btn {\n  background-color: #dc3545;\n  color: white;\n}\n\n/* Priority colors (add to todo list items later via JS) */\n.priority-low { border-left: 5px solid green; }\n.priority-medium { border-left: 5px solid orange; }\n.priority-high { border-left: 5px solid red; }\n\n.todo-completed .todo-title {\n  text-decoration: line-through;\n  color: #888;\n}\n\n\n/* Modal Styles */\n.modal {\n  display: none; /* Hidden by default */\n  position: fixed;\n  z-index: 1000;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  overflow: auto;\n  background-color: rgba(0,0,0,0.5); /* Dim background */\n}\n\n.modal-content {\n  background-color: #fefefe;\n  margin: 10% auto;\n  padding: 25px;\n  border: 1px solid #888;\n  width: 80%;\n  max-width: 500px;\n  border-radius: 8px;\n  position: relative;\n}\n\n.modal-content h3 {\n  margin-top: 0;\n  color: #333;\n}\n\n.modal-content label {\n  display: block;\n  margin-bottom: 5px;\n  font-weight: bold;\n}\n\n.modal-content input[type="text"],\n.modal-content input[type="date"],\n.modal-content textarea,\n.modal-content select {\n  width: calc(100% - 22px); /* Account for padding/border */\n  padding: 10px;\n  margin-bottom: 15px;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  box-sizing: border-box;\n}\n\n.modal-content textarea {\n  min-height: 80px;\n  resize: vertical;\n}\n\n.modal-content button[type="submit"] {\n  background-color: #007bff;\n  color: white;\n  padding: 10px 15px;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n}\n\n.modal-content button[type="submit"]:hover {\n  background-color: #0056b3;\n}\n\n.close-btn {\n  color: #aaa;\n  float: right;\n  font-size: 28px;\n  font-weight: bold;\n  position: absolute;\n  top: 10px;\n  right: 20px;\n}\n\n.close-btn:hover,\n.close-btn:focus {\n  color: black;\n  text-decoration: none;\n  cursor: pointer;\n}\n\n.todo-tags-display {\n  margin-top: 5px;\n  display: flex;\n  flex-wrap: wrap;\n  gap: 5px;\n}\n\n.tag-label {\n  background-color: #6c757d;\n  color: white;\n  padding: 2px 6px;\n  font-size: 0.75em;\n  border-radius: 3px;\n}',"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;EACE,sBAAsB;AACxB;;AAEA;EACE,SAAS;AACX;;AAEA;EACE,6BAA6B;EAC7B,cAAc;EACd,gBAAgB;EAChB,iBAAiB;AACnB;;AAEA;EACE,WAAW;EACX,iBAAiB;EACjB,iBAAiB;EACjB,mBAAmB;EACnB,aAAa;AACf;;AAEA;EACE,gBAAgB;EAChB,gBAAgB;EAChB,oBAAoB;AACtB;;AAEA;EACE,aAAa;EACb,SAAS;AACX;;AAEA;EACE,iBAAiB;EACjB,aAAa;EACb,yBAAyB;EACzB,kBAAkB;AACpB;;;AAGA;EACE,aAAa;EACb,6BAA6B;EAC7B,oBAAoB;AACtB;;AAEA;EACE,qBAAqB;EACrB,UAAU;AACZ;;AAEA;EACE,YAAY;EACZ,kBAAkB;EAClB,yBAAyB;EACzB,yBAAyB;EACzB,kBAAkB;EAClB,eAAe;EACf,iCAAiC;AACnC;;AAEA;;EAEE,yBAAyB;EACzB,YAAY;AACd;;AAEA;EACE,cAAc;EACd,WAAW;EACX,aAAa;EACb,yBAAyB;EACzB,YAAY;EACZ,YAAY;EACZ,kBAAkB;EAClB,eAAe;EACf,gBAAgB;EAChB,kBAAkB;AACpB;;AAEA;EACE,yBAAyB;AAC3B;;AAEA;EACE,YAAY,EAAE,0BAA0B;EACxC,aAAa;AACf;;AAEA;EACE,aAAa;EACb,6BAA6B;EAC7B,oBAAoB;AACtB;;AAEA;EACE,mBAAmB;AACrB;;AAEA;EACE,qBAAqB;EACrB,UAAU;AACZ;;AAEA;EACE,mBAAmB;EACnB,sBAAsB;EACtB,kBAAkB;EAClB,kBAAkB;EAClB,kBAAkB;EAClB,aAAa;EACb,8BAA8B;EAC9B,mBAAmB;AACrB;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,SAAS;AACX;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,gBAAgB;EAChB,WAAW;AACb;;AAEA;EACE,gBAAgB;EAChB,gBAAgB;EAChB,eAAe;EACf,sBAAsB;EACtB,kBAAkB;AACpB;;AAEA;EACE,yBAAyB;AAC3B;AACA;EACE,yBAAyB;EACzB,YAAY;AACd;;AAEA,0DAA0D;AAC1D,gBAAgB,4BAA4B,EAAE;AAC9C,mBAAmB,6BAA6B,EAAE;AAClD,iBAAiB,0BAA0B,EAAE;;AAE7C;EACE,6BAA6B;EAC7B,WAAW;AACb;;;AAGA,iBAAiB;AACjB;EACE,aAAa,EAAE,sBAAsB;EACrC,eAAe;EACf,aAAa;EACb,OAAO;EACP,MAAM;EACN,WAAW;EACX,YAAY;EACZ,cAAc;EACd,iCAAiC,EAAE,mBAAmB;AACxD;;AAEA;EACE,yBAAyB;EACzB,gBAAgB;EAChB,aAAa;EACb,sBAAsB;EACtB,UAAU;EACV,gBAAgB;EAChB,kBAAkB;EAClB,kBAAkB;AACpB;;AAEA;EACE,aAAa;EACb,WAAW;AACb;;AAEA;EACE,cAAc;EACd,kBAAkB;EAClB,iBAAiB;AACnB;;AAEA;;;;EAIE,wBAAwB,EAAE,+BAA+B;EACzD,aAAa;EACb,mBAAmB;EACnB,sBAAsB;EACtB,kBAAkB;EAClB,sBAAsB;AACxB;;AAEA;EACE,gBAAgB;EAChB,gBAAgB;AAClB;;AAEA;EACE,yBAAyB;EACzB,YAAY;EACZ,kBAAkB;EAClB,YAAY;EACZ,kBAAkB;EAClB,eAAe;AACjB;;AAEA;EACE,yBAAyB;AAC3B;;AAEA;EACE,WAAW;EACX,YAAY;EACZ,eAAe;EACf,iBAAiB;EACjB,kBAAkB;EAClB,SAAS;EACT,WAAW;AACb;;AAEA;;EAEE,YAAY;EACZ,qBAAqB;EACrB,eAAe;AACjB;;AAEA;EACE,eAAe;EACf,aAAa;EACb,eAAe;EACf,QAAQ;AACV;;AAEA;EACE,yBAAyB;EACzB,YAAY;EACZ,gBAAgB;EAChB,iBAAiB;EACjB,kBAAkB;AACpB",sourcesContent:['*, *::before, *::after {\n  box-sizing: border-box;\n}\n\n* {\n  margin: 0;\n}\n\nbody {\n  font-family: "Poppins", serif;\n  color: #212428;\n  margin: 4vw auto;\n  max-width: 1280px;\n}\n\n.container {\n  width: 92vw;\n  max-width: 1200px;\n  margin: 20px auto;\n  background: #fafafa;\n  padding: 20px;\n}\n\nh1 {\n  font-weight: 600;\n  font-size: 1.5em;\n  letter-spacing: .4px;\n}\n\n.app-layout {\n  display: flex;\n  gap: 24px;\n}\n\n.projects-sidebar {\n  flex-basis: 250px;\n  padding: 16px;\n  background-color: #e9ecef;\n  border-radius: 4px;\n}\n\n\n.projects-sidebar h2 {\n  margin-top: 0;\n  border-bottom: 1px solid #ccc;\n  padding-bottom: 10px;\n}\n\n#projects-list {\n  list-style-type: none;\n  padding: 0;\n}\n\n#projects-list li {\n  padding: 8px;\n  margin-bottom: 5px;\n  background-color: #f8f9fa;\n  border: 1px solid #dee2e6;\n  border-radius: 3px;\n  cursor: pointer;\n  transition: background-color 0.3s;\n}\n\n#projects-list li.active,\n#projects-list li:hover {\n  background-color: #007bff;\n  color: white;\n}\n\n#add-project-btn, #add-todo-btn {\n  display: block;\n  width: 100%;\n  padding: 10px;\n  background-color: #28a745;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  margin-top: 15px;\n  text-align: center;\n}\n\n#add-project-btn:hover, #add-todo-btn:hover {\n  background-color: #218838;\n}\n\n.todos-view {\n  flex-grow: 1; /* Takes remaining space */\n  padding: 15px;\n}\n\n.todos-view h2 {\n  margin-top: 0;\n  border-bottom: 1px solid #ccc;\n  padding-bottom: 10px;\n}\n\n.todos-controls {\n  margin-bottom: 15px;\n}\n\n#todos-list {\n  list-style-type: none;\n  padding: 0;\n}\n\n#todos-list li {\n  background: #fdfdfd;\n  border: 1px solid #eee;\n  padding: 10px 15px;\n  margin-bottom: 8px;\n  border-radius: 4px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n#todos-list li .todo-info {\n  display: flex;\n  align-items: center;\n  gap: 10px;\n}\n\n#todos-list li .todo-title {\n  font-weight: bold;\n}\n\n#todos-list li .todo-due-date {\n  font-size: 0.9em;\n  color: #666;\n}\n\n#todos-list li .todo-actions button {\n  margin-left: 8px;\n  padding: 5px 8px;\n  cursor: pointer;\n  border: 1px solid #ccc;\n  border-radius: 3px;\n}\n\n#todos-list li .todo-actions .edit-todo-btn {\n  background-color: #ffc107;\n}\n#todos-list li .todo-actions .delete-todo-btn {\n  background-color: #dc3545;\n  color: white;\n}\n\n/* Priority colors (add to todo list items later via JS) */\n.priority-low { border-left: 5px solid green; }\n.priority-medium { border-left: 5px solid orange; }\n.priority-high { border-left: 5px solid red; }\n\n.todo-completed .todo-title {\n  text-decoration: line-through;\n  color: #888;\n}\n\n\n/* Modal Styles */\n.modal {\n  display: none; /* Hidden by default */\n  position: fixed;\n  z-index: 1000;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  overflow: auto;\n  background-color: rgba(0,0,0,0.5); /* Dim background */\n}\n\n.modal-content {\n  background-color: #fefefe;\n  margin: 10% auto;\n  padding: 25px;\n  border: 1px solid #888;\n  width: 80%;\n  max-width: 500px;\n  border-radius: 8px;\n  position: relative;\n}\n\n.modal-content h3 {\n  margin-top: 0;\n  color: #333;\n}\n\n.modal-content label {\n  display: block;\n  margin-bottom: 5px;\n  font-weight: bold;\n}\n\n.modal-content input[type="text"],\n.modal-content input[type="date"],\n.modal-content textarea,\n.modal-content select {\n  width: calc(100% - 22px); /* Account for padding/border */\n  padding: 10px;\n  margin-bottom: 15px;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  box-sizing: border-box;\n}\n\n.modal-content textarea {\n  min-height: 80px;\n  resize: vertical;\n}\n\n.modal-content button[type="submit"] {\n  background-color: #007bff;\n  color: white;\n  padding: 10px 15px;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n}\n\n.modal-content button[type="submit"]:hover {\n  background-color: #0056b3;\n}\n\n.close-btn {\n  color: #aaa;\n  float: right;\n  font-size: 28px;\n  font-weight: bold;\n  position: absolute;\n  top: 10px;\n  right: 20px;\n}\n\n.close-btn:hover,\n.close-btn:focus {\n  color: black;\n  text-decoration: none;\n  cursor: pointer;\n}\n\n.todo-tags-display {\n  margin-top: 5px;\n  display: flex;\n  flex-wrap: wrap;\n  gap: 5px;\n}\n\n.tag-label {\n  background-color: #6c757d;\n  color: white;\n  padding: 2px 6px;\n  font-size: 0.75em;\n  border-radius: 3px;\n}'],sourceRoot:""}]);const d=i},314:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n="",o=void 0!==e[5];return e[4]&&(n+="@supports (".concat(e[4],") {")),e[2]&&(n+="@media ".concat(e[2]," {")),o&&(n+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),n+=t(e),o&&(n+="}"),e[2]&&(n+="}"),e[4]&&(n+="}"),n})).join("")},e.i=function(t,n,o,r,a){"string"==typeof t&&(t=[[null,t,void 0]]);var i={};if(o)for(var d=0;d<this.length;d++){var s=this[d][0];null!=s&&(i[s]=!0)}for(var c=0;c<t.length;c++){var u=[].concat(t[c]);o&&i[u[0]]||(void 0!==a&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=a),n&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=n):u[2]=n),r&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=r):u[4]="".concat(r)),e.push(u))}},e}},354:t=>{t.exports=function(t){var e=t[1],n=t[3];if(!n)return e;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),a="/*# ".concat(r," */");return[e].concat([a]).join("\n")}return[e].join("\n")}},540:t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},659:t=>{var e={};t.exports=function(t,n){var o=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(n)}},825:t=>{t.exports=function(t){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var o="";n.supports&&(o+="@supports (".concat(n.supports,") {")),n.media&&(o+="@media ".concat(n.media," {"));var r=void 0!==n.layer;r&&(o+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),o+=n.css,r&&(o+="}"),n.media&&(o+="}"),n.supports&&(o+="}");var a=n.sourceMap;a&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(o,t,e.options)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}}},e={};function n(o){var r=e[o];if(void 0!==r)return r.exports;var a=e[o]={id:o,exports:{}};return t[o](a,a.exports,n),a.exports}function o(t){return o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},o(t)}function r(t,e){for(var n=0;n<e.length;n++){var o=e[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,a(o.key),o)}}function a(t){var e=function(t){if("object"!=o(t)||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var n=e.call(t,"string");if("object"!=o(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(t);return"symbol"==o(e)?e:e+""}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var o in e)n.o(e,o)&&!n.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:e[o]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.nc=void 0;const i=function(){return t=function t(e,n,o,r){var a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:[],i=arguments.length>5&&void 0!==arguments[5]&&arguments[5];!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.id="todo-".concat(Date.now(),"-").concat(Math.random().toString(36).slice(2,11)),this.title=e,this.description=n,this.dueDate=o instanceof Date?o:new Date(o),this.priority=r,this.tags=Array.isArray(a)?a:[],this.completed=i},(e=[{key:"toggleComplete",value:function(){this.completed=!this.completed}},{key:"updatePriority",value:function(t){["low","medium","high"].includes(t)?this.priority=t:console.warn("Invalid priority value:",t)}},{key:"updateDetails",value:function(t){t.title&&(this.title=t.title),t.description&&(this.description=t.description),t.dueDate&&(this.dueDate=new Date(t.dueDate)),t.priority&&this.updatePriority(t.priority),t.tags&&Array.isArray(t.tags)&&(this.tags=t.tags.map((function(t){return t.trim()})).filter((function(t){return t.length>0})))}},{key:"addTag",value:function(t){var e=t.trim();e&&!this.tags.includes(e)&&this.tags.push(e)}},{key:"removeTag",value:function(t){var e=t.trim();this.tags=this.tags.filter((function(t){return t!==e}))}},{key:"getTagsString",value:function(){return this.tags.join(", ")}},{key:"setTagsFromString",value:function(t){"string"==typeof t&&(this.tags=t.split(",").map((function(t){return t.trim()})).filter((function(t){return t.length>0})))}}])&&r(t.prototype,e),Object.defineProperty(t,"prototype",{writable:!1}),t;var t,e}();function d(t){return d="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},d(t)}function s(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,o=Array(e);n<e;n++)o[n]=t[n];return o}function c(t,e){for(var n=0;n<e.length;n++){var o=e[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,u(o.key),o)}}function u(t){var e=function(t){if("object"!=d(t)||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var n=e.call(t,"string");if("object"!=d(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(t);return"symbol"==d(e)?e:e+""}const l=function(){return t=function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.id="project-".concat(Date.now(),"-").concat(Math.random().toString(36).slice(2,11)),this.name=e,this.todos=[]},e=[{key:"addTodo",value:function(t){t instanceof i?this.todos.find((function(e){return e.id===t.id}))?console.warn("Task with ID ".concat(t.id," already exists in project ").concat(this.name,".")):this.todos.push(t):console.error("Invalid item added to project. Expected a Todo object.",t)}},{key:"removeTodo",value:function(t){this.todos=this.todos.filter((function(e){return e.id!==t}))}},{key:"getTodoById",value:function(t){return this.todos.find((function(e){return e.id===t}))}},{key:"getAllTodos",value:function(){return function(t){return function(t){if(Array.isArray(t))return s(t)}(t)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||function(t,e){if(t){if("string"==typeof t)return s(t,e);var n={}.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?s(t,e):void 0}}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}(this.todos)}},{key:"getTodosByPriority",value:function(t){return this.todos.filter((function(e){return e.priority===t}))}},{key:"getTodosByCompletion",value:function(t){return this.todos.filter((function(e){return e.completed===t}))}},{key:"getTodosByTag",value:function(t){var e=t.trim().toLowerCase();return e?this.todos.filter((function(t){return t.tags.some((function(t){return t.toLowerCase()===e}))})):this.getAllTodos()}},{key:"getUniqueTags",value:function(){var t=new Set;return this.todos.forEach((function(e){e.tags.forEach((function(e){return t.add(e.trim())}))})),Array.from(t).sort()}}],e&&c(t.prototype,e),Object.defineProperty(t,"prototype",{writable:!1}),t;var t,e}();var f="todoAppProjects";const A=function(t){try{var e=JSON.stringify(t);localStorage.setItem(f,e)}catch(t){console.error("Error saving data to localStorage:",t)}},m=function(){try{var t=localStorage.getItem(f);if(null===t)return;return JSON.parse(t)}catch(t){return void console.error("Error loading data from localStorage:",t)}};var p=["tagsString"];function g(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,o=Array(e);n<e;n++)o[n]=t[n];return o}const h=function(){var t=[],e=null;function n(){A(t)}function o(e){return t.find((function(t){return t.id===e}))}function r(){return t.reduce((function(t,e){return t.concat(e.getAllTodos())}),[])}return function(){var o=m();if(o&&o.length>0)t=o.map((function(t){var e=new l(t.name);return e.id=t.id,e.todos=t.todos.map((function(t){var e=new i(t.title,t.description,new Date(t.dueDate),t.priority||"medium",t.tags||[],t.completed);return e.id=t.id,e})),e})),e=t[0]||null;else{var r=new l("Default");t=[r],e=r,n()}}(),{addProject:function(e){if(e&&!t.find((function(t){return t.name.toLowerCase()===e.toLowerCase()}))){var o=new l(e);return t.push(o),n(),o}return console.warn("Project name already exists:",e),null},removeProject:function(o){var r=t.findIndex((function(t){return t.id===o}));if(r>-1){var a=t.splice(r,1)[0];return e&&e.id===o&&(e=t[0]||null),n(),a}return null},findProjectById:o,getAllProjects:function(){return function(t){if(Array.isArray(t))return g(t)}(e=t)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(e)||function(t,e){if(t){if("string"==typeof t)return g(t,e);var n={}.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?g(t,e):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}();var e},setCurrentProject:function(t){var n=o(t);return!!n&&(e=n,!0)},getCurrentProject:function(){return e},addTodoToProject:function(t,e){var r=o(t);if(r){var a=e.title,d=e.description,s=e.dueDate,c=e.priority,u=e.tagsString,l=new i(a,d,s,c);return u&&l.setTagsFromString(u),r.addTodo(l),n(),l}return console.warn("Project not found for adding task:",t),null},removeTodoFromProject:function(t,e){var r=o(t);return!!r&&(r.removeTodo(e),n(),!0)},updateTodoInProject:function(t,e,r){var a=o(t);if(a){var i=a.getTodoById(e);if(i){if(void 0!==r.tagsString){i.setTagsFromString(r.tagsString),r.tagsString;var d=function(t,e){if(null==t)return{};var n,o,r=function(t,e){if(null==t)return{};var n={};for(var o in t)if({}.hasOwnProperty.call(t,o)){if(-1!==e.indexOf(o))continue;n[o]=t[o]}return n}(t,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);for(o=0;o<a.length;o++)n=a[o],-1===e.indexOf(n)&&{}.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}(r,p);i.updateDetails(d)}else i.updateDetails(r);return n(),i}}return null},toggleTodoComplete:function(t,e){var r=o(t);if(r){var a=r.getTodoById(e);if(a)return a.toggleComplete(),n(),a}return null},getAllTodosAcrossProjects:r,filterTodosByTagAcrossProjects:function(t){var e=r(),n=t.trim().toLowerCase();return n?e.filter((function(t){return t.tags.some((function(t){return t.toLowerCase()===n}))})):e},filterTodosByPriorityAcrossProjects:function(t){return r().filter((function(e){return e.priority===t}))},getAllUniqueTagsAcrossProjects:function(){var e=new Set;return t.forEach((function(t){t.getUniqueTags().forEach((function(t){return e.add(t)}))})),Array.from(e).sort()}}}(),b=(Math.pow(10,8),6048e5),y=36e5,v=Symbol.for("constructDateFrom");function E(t,e){return"function"==typeof t?t(e):t&&"object"==typeof t&&v in t?t[v](e):t instanceof Date?new t.constructor(e):new Date(e)}function w(t,e){return E(e||t,t)}const B={dateTimeDelimiter:/[T ]/,timeZoneDelimiter:/[Z ]/i,timezone:/([Z+-].*)$/},C=/^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/,x=/^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/,k=/^([+-])(\d{2})(?::?(\d{2}))?$/;function j(t){return t?parseInt(t):1}function P(t){return t&&parseFloat(t.replace(",","."))||0}const T=[31,null,31,30,31,30,31,31,30,31,30,31];function M(t){return t%400==0||t%4==0&&t%100!=0}const S={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function D(t){return(e={})=>{const n=e.width?String(e.width):t.defaultWidth;return t.formats[n]||t.formats[t.defaultWidth]}}const I={date:D({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:D({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:D({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},L={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function W(t){return(e,n)=>{let o;if("formatting"===(n?.context?String(n.context):"standalone")&&t.formattingValues){const e=t.defaultFormattingWidth||t.defaultWidth,r=n?.width?String(n.width):e;o=t.formattingValues[r]||t.formattingValues[e]}else{const e=t.defaultWidth,r=n?.width?String(n.width):t.defaultWidth;o=t.values[r]||t.values[e]}return o[t.argumentCallback?t.argumentCallback(e):e]}}const Y={ordinalNumber:(t,e)=>{const n=Number(t),o=n%100;if(o>20||o<10)switch(o%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:W({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:W({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:t=>t-1}),month:W({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:W({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:W({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function N(t){return(e,n={})=>{const o=n.width,r=o&&t.matchPatterns[o]||t.matchPatterns[t.defaultMatchWidth],a=e.match(r);if(!a)return null;const i=a[0],d=o&&t.parsePatterns[o]||t.parsePatterns[t.defaultParseWidth],s=Array.isArray(d)?function(t){for(let e=0;e<t.length;e++)if(t[e].test(i))return e}(d):function(t){for(const e in t)if(Object.prototype.hasOwnProperty.call(t,e)&&t[e].test(i))return e}(d);let c;return c=t.valueCallback?t.valueCallback(s):s,c=n.valueCallback?n.valueCallback(c):c,{value:c,rest:e.slice(i.length)}}}const O={ordinalNumber:(z={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:t=>parseInt(t,10)},(t,e={})=>{const n=t.match(z.matchPattern);if(!n)return null;const o=n[0],r=t.match(z.parsePattern);if(!r)return null;let a=z.valueCallback?z.valueCallback(r[0]):r[0];return a=e.valueCallback?e.valueCallback(a):a,{value:a,rest:t.slice(o.length)}}),era:N({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:N({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:t=>t+1}),month:N({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:N({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:N({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};var z;const F={code:"en-US",formatDistance:(t,e,n)=>{let o;const r=S[t];return o="string"==typeof r?r:1===e?r.one:r.other.replace("{{count}}",e.toString()),n?.addSuffix?n.comparison&&n.comparison>0?"in "+o:o+" ago":o},formatLong:I,formatRelative:(t,e,n,o)=>L[t],localize:Y,match:O,options:{weekStartsOn:0,firstWeekContainsDate:1}};let q={};function U(){return q}function H(t){const e=w(t),n=new Date(Date.UTC(e.getFullYear(),e.getMonth(),e.getDate(),e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()));return n.setUTCFullYear(e.getFullYear()),+t-+n}function X(t,e){const n=w(t,e?.in);return n.setHours(0,0,0,0),n}function Q(t,e){const n=w(t,e?.in);return function(t,e,n){const[o,r]=function(t,...e){const n=E.bind(null,t||e.find((t=>"object"==typeof t)));return e.map(n)}(n?.in,t,e),a=X(o),i=X(r),d=+a-H(a),s=+i-H(i);return Math.round((d-s)/864e5)}(n,function(t,e){const n=w(t,e?.in);return n.setFullYear(n.getFullYear(),0,1),n.setHours(0,0,0,0),n}(n))+1}function Z(t,e){const n=U(),o=e?.weekStartsOn??e?.locale?.options?.weekStartsOn??n.weekStartsOn??n.locale?.options?.weekStartsOn??0,r=w(t,e?.in),a=r.getDay(),i=(a<o?7:0)+a-o;return r.setDate(r.getDate()-i),r.setHours(0,0,0,0),r}function G(t,e){return Z(t,{...e,weekStartsOn:1})}function $(t,e){const n=w(t,e?.in),o=n.getFullYear(),r=E(n,0);r.setFullYear(o+1,0,4),r.setHours(0,0,0,0);const a=G(r),i=E(n,0);i.setFullYear(o,0,4),i.setHours(0,0,0,0);const d=G(i);return n.getTime()>=a.getTime()?o+1:n.getTime()>=d.getTime()?o:o-1}function J(t,e){const n=w(t,e?.in),o=+G(n)-+function(t,e){const n=$(t,e),o=E(e?.in||t,0);return o.setFullYear(n,0,4),o.setHours(0,0,0,0),G(o)}(n);return Math.round(o/b)+1}function R(t,e){const n=w(t,e?.in),o=n.getFullYear(),r=U(),a=e?.firstWeekContainsDate??e?.locale?.options?.firstWeekContainsDate??r.firstWeekContainsDate??r.locale?.options?.firstWeekContainsDate??1,i=E(e?.in||t,0);i.setFullYear(o+1,0,a),i.setHours(0,0,0,0);const d=Z(i,e),s=E(e?.in||t,0);s.setFullYear(o,0,a),s.setHours(0,0,0,0);const c=Z(s,e);return+n>=+d?o+1:+n>=+c?o:o-1}function V(t,e){const n=w(t,e?.in),o=+Z(n,e)-+function(t,e){const n=U(),o=e?.firstWeekContainsDate??e?.locale?.options?.firstWeekContainsDate??n.firstWeekContainsDate??n.locale?.options?.firstWeekContainsDate??1,r=R(t,e),a=E(e?.in||t,0);return a.setFullYear(r,0,o),a.setHours(0,0,0,0),Z(a,e)}(n,e);return Math.round(o/b)+1}function K(t,e){return(t<0?"-":"")+Math.abs(t).toString().padStart(e,"0")}const _={y(t,e){const n=t.getFullYear(),o=n>0?n:1-n;return K("yy"===e?o%100:o,e.length)},M(t,e){const n=t.getMonth();return"M"===e?String(n+1):K(n+1,2)},d:(t,e)=>K(t.getDate(),e.length),a(t,e){const n=t.getHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return n.toUpperCase();case"aaa":return n;case"aaaaa":return n[0];default:return"am"===n?"a.m.":"p.m."}},h:(t,e)=>K(t.getHours()%12||12,e.length),H:(t,e)=>K(t.getHours(),e.length),m:(t,e)=>K(t.getMinutes(),e.length),s:(t,e)=>K(t.getSeconds(),e.length),S(t,e){const n=e.length,o=t.getMilliseconds();return K(Math.trunc(o*Math.pow(10,n-3)),e.length)}},tt={G:function(t,e,n){const o=t.getFullYear()>0?1:0;switch(e){case"G":case"GG":case"GGG":return n.era(o,{width:"abbreviated"});case"GGGGG":return n.era(o,{width:"narrow"});default:return n.era(o,{width:"wide"})}},y:function(t,e,n){if("yo"===e){const e=t.getFullYear(),o=e>0?e:1-e;return n.ordinalNumber(o,{unit:"year"})}return _.y(t,e)},Y:function(t,e,n,o){const r=R(t,o),a=r>0?r:1-r;return"YY"===e?K(a%100,2):"Yo"===e?n.ordinalNumber(a,{unit:"year"}):K(a,e.length)},R:function(t,e){return K($(t),e.length)},u:function(t,e){return K(t.getFullYear(),e.length)},Q:function(t,e,n){const o=Math.ceil((t.getMonth()+1)/3);switch(e){case"Q":return String(o);case"QQ":return K(o,2);case"Qo":return n.ordinalNumber(o,{unit:"quarter"});case"QQQ":return n.quarter(o,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(o,{width:"narrow",context:"formatting"});default:return n.quarter(o,{width:"wide",context:"formatting"})}},q:function(t,e,n){const o=Math.ceil((t.getMonth()+1)/3);switch(e){case"q":return String(o);case"qq":return K(o,2);case"qo":return n.ordinalNumber(o,{unit:"quarter"});case"qqq":return n.quarter(o,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(o,{width:"narrow",context:"standalone"});default:return n.quarter(o,{width:"wide",context:"standalone"})}},M:function(t,e,n){const o=t.getMonth();switch(e){case"M":case"MM":return _.M(t,e);case"Mo":return n.ordinalNumber(o+1,{unit:"month"});case"MMM":return n.month(o,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(o,{width:"narrow",context:"formatting"});default:return n.month(o,{width:"wide",context:"formatting"})}},L:function(t,e,n){const o=t.getMonth();switch(e){case"L":return String(o+1);case"LL":return K(o+1,2);case"Lo":return n.ordinalNumber(o+1,{unit:"month"});case"LLL":return n.month(o,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(o,{width:"narrow",context:"standalone"});default:return n.month(o,{width:"wide",context:"standalone"})}},w:function(t,e,n,o){const r=V(t,o);return"wo"===e?n.ordinalNumber(r,{unit:"week"}):K(r,e.length)},I:function(t,e,n){const o=J(t);return"Io"===e?n.ordinalNumber(o,{unit:"week"}):K(o,e.length)},d:function(t,e,n){return"do"===e?n.ordinalNumber(t.getDate(),{unit:"date"}):_.d(t,e)},D:function(t,e,n){const o=Q(t);return"Do"===e?n.ordinalNumber(o,{unit:"dayOfYear"}):K(o,e.length)},E:function(t,e,n){const o=t.getDay();switch(e){case"E":case"EE":case"EEE":return n.day(o,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(o,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(o,{width:"short",context:"formatting"});default:return n.day(o,{width:"wide",context:"formatting"})}},e:function(t,e,n,o){const r=t.getDay(),a=(r-o.weekStartsOn+8)%7||7;switch(e){case"e":return String(a);case"ee":return K(a,2);case"eo":return n.ordinalNumber(a,{unit:"day"});case"eee":return n.day(r,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(r,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},c:function(t,e,n,o){const r=t.getDay(),a=(r-o.weekStartsOn+8)%7||7;switch(e){case"c":return String(a);case"cc":return K(a,e.length);case"co":return n.ordinalNumber(a,{unit:"day"});case"ccc":return n.day(r,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(r,{width:"narrow",context:"standalone"});case"cccccc":return n.day(r,{width:"short",context:"standalone"});default:return n.day(r,{width:"wide",context:"standalone"})}},i:function(t,e,n){const o=t.getDay(),r=0===o?7:o;switch(e){case"i":return String(r);case"ii":return K(r,e.length);case"io":return n.ordinalNumber(r,{unit:"day"});case"iii":return n.day(o,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(o,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(o,{width:"short",context:"formatting"});default:return n.day(o,{width:"wide",context:"formatting"})}},a:function(t,e,n){const o=t.getHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return n.dayPeriod(o,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(o,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(o,{width:"narrow",context:"formatting"});default:return n.dayPeriod(o,{width:"wide",context:"formatting"})}},b:function(t,e,n){const o=t.getHours();let r;switch(r=12===o?"noon":0===o?"midnight":o/12>=1?"pm":"am",e){case"b":case"bb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(t,e,n){const o=t.getHours();let r;switch(r=o>=17?"evening":o>=12?"afternoon":o>=4?"morning":"night",e){case"B":case"BB":case"BBB":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(t,e,n){if("ho"===e){let e=t.getHours()%12;return 0===e&&(e=12),n.ordinalNumber(e,{unit:"hour"})}return _.h(t,e)},H:function(t,e,n){return"Ho"===e?n.ordinalNumber(t.getHours(),{unit:"hour"}):_.H(t,e)},K:function(t,e,n){const o=t.getHours()%12;return"Ko"===e?n.ordinalNumber(o,{unit:"hour"}):K(o,e.length)},k:function(t,e,n){let o=t.getHours();return 0===o&&(o=24),"ko"===e?n.ordinalNumber(o,{unit:"hour"}):K(o,e.length)},m:function(t,e,n){return"mo"===e?n.ordinalNumber(t.getMinutes(),{unit:"minute"}):_.m(t,e)},s:function(t,e,n){return"so"===e?n.ordinalNumber(t.getSeconds(),{unit:"second"}):_.s(t,e)},S:function(t,e){return _.S(t,e)},X:function(t,e,n){const o=t.getTimezoneOffset();if(0===o)return"Z";switch(e){case"X":return nt(o);case"XXXX":case"XX":return ot(o);default:return ot(o,":")}},x:function(t,e,n){const o=t.getTimezoneOffset();switch(e){case"x":return nt(o);case"xxxx":case"xx":return ot(o);default:return ot(o,":")}},O:function(t,e,n){const o=t.getTimezoneOffset();switch(e){case"O":case"OO":case"OOO":return"GMT"+et(o,":");default:return"GMT"+ot(o,":")}},z:function(t,e,n){const o=t.getTimezoneOffset();switch(e){case"z":case"zz":case"zzz":return"GMT"+et(o,":");default:return"GMT"+ot(o,":")}},t:function(t,e,n){return K(Math.trunc(+t/1e3),e.length)},T:function(t,e,n){return K(+t,e.length)}};function et(t,e=""){const n=t>0?"-":"+",o=Math.abs(t),r=Math.trunc(o/60),a=o%60;return 0===a?n+String(r):n+String(r)+e+K(a,2)}function nt(t,e){return t%60==0?(t>0?"-":"+")+K(Math.abs(t)/60,2):ot(t,e)}function ot(t,e=""){const n=t>0?"-":"+",o=Math.abs(t);return n+K(Math.trunc(o/60),2)+e+K(o%60,2)}const rt=(t,e)=>{switch(t){case"P":return e.date({width:"short"});case"PP":return e.date({width:"medium"});case"PPP":return e.date({width:"long"});default:return e.date({width:"full"})}},at=(t,e)=>{switch(t){case"p":return e.time({width:"short"});case"pp":return e.time({width:"medium"});case"ppp":return e.time({width:"long"});default:return e.time({width:"full"})}},it={p:at,P:(t,e)=>{const n=t.match(/(P+)(p+)?/)||[],o=n[1],r=n[2];if(!r)return rt(t,e);let a;switch(o){case"P":a=e.dateTime({width:"short"});break;case"PP":a=e.dateTime({width:"medium"});break;case"PPP":a=e.dateTime({width:"long"});break;default:a=e.dateTime({width:"full"})}return a.replace("{{date}}",rt(o,e)).replace("{{time}}",at(r,e))}},dt=/^D+$/,st=/^Y+$/,ct=["D","DD","YY","YYYY"];function ut(t){return!(!((e=t)instanceof Date||"object"==typeof e&&"[object Date]"===Object.prototype.toString.call(e))&&"number"!=typeof t||isNaN(+w(t)));var e}const lt=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,ft=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,At=/^'([^]*?)'?$/,mt=/''/g,pt=/[a-zA-Z]/;function gt(t,e,n){const o=U(),r=n?.locale??o.locale??F,a=n?.firstWeekContainsDate??n?.locale?.options?.firstWeekContainsDate??o.firstWeekContainsDate??o.locale?.options?.firstWeekContainsDate??1,i=n?.weekStartsOn??n?.locale?.options?.weekStartsOn??o.weekStartsOn??o.locale?.options?.weekStartsOn??0,d=w(t,n?.in);if(!ut(d))throw new RangeError("Invalid time value");let s=e.match(ft).map((t=>{const e=t[0];return"p"===e||"P"===e?(0,it[e])(t,r.formatLong):t})).join("").match(lt).map((t=>{if("''"===t)return{isToken:!1,value:"'"};const e=t[0];if("'"===e)return{isToken:!1,value:ht(t)};if(tt[e])return{isToken:!0,value:t};if(e.match(pt))throw new RangeError("Format string contains an unescaped latin alphabet character `"+e+"`");return{isToken:!1,value:t}}));r.localize.preprocessor&&(s=r.localize.preprocessor(d,s));const c={firstWeekContainsDate:a,weekStartsOn:i,locale:r};return s.map((o=>{if(!o.isToken)return o.value;const a=o.value;return(!n?.useAdditionalWeekYearTokens&&function(t){return st.test(t)}(a)||!n?.useAdditionalDayOfYearTokens&&function(t){return dt.test(t)}(a))&&function(t,e,n){const o=function(t,e,n){const o="Y"===t[0]?"years":"days of the month";return`Use \`${t.toLowerCase()}\` instead of \`${t}\` (in \`${e}\`) for formatting ${o} to the input \`${n}\`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md`}(t,e,n);if(console.warn(o),ct.includes(t))throw new RangeError(o)}(a,e,String(t)),(0,tt[a[0]])(d,a,r.localize,c)})).join("")}function ht(t){const e=t.match(At);return e?e[1].replace(mt,"'"):t}const bt=function(){var t=document.getElementById("projects-list"),e=document.getElementById("add-project-btn"),n=document.getElementById("current-project-title"),o=document.getElementById("add-todo-btn"),r=document.getElementById("todos-list"),a=document.getElementById("project-modal"),i=document.getElementById("project-form"),d=document.getElementById("project-name-input"),s=document.getElementById("close-project-modal"),c=document.getElementById("todo-modal"),u=document.getElementById("todo-form"),l=document.getElementById("todo-modal-title"),f=document.getElementById("todo-id"),A=document.getElementById("todo-title-input"),m=document.getElementById("todo-description-input"),p=document.getElementById("todo-dueDate-input"),g=document.getElementById("todo-priority-input"),h=document.getElementById("todo-tags-input"),b=document.getElementById("save-todo-btn"),v=document.getElementById("close-todo-modal");function S(t){for(;t.firstChild;)t.removeChild(t.firstChild)}function D(t){n.textContent=t||"No project selected"}return{renderProjects:function(e,n){if(S(t),!e||0===e.length){var o=document.createElement("li");return o.textContent="No projects yet.",o.classList.add("no-items"),void t.appendChild(o)}e.forEach((function(e){var o=document.createElement("li");o.textContent=e.name,o.dataset.projectId=e.id,e.id===n&&o.classList.add("active"),t.appendChild(o)}))},renderTodos:function(t){if(S(r),!t||!t.todos||0===t.todos.length){n.textContent=t?t.name:"Select a Project";var e=document.createElement("li");return e.textContent="No tasks in this project yet. Add one!",e.classList.add("no-items"),r.appendChild(e),void(o.style.display=t?"block":"none")}D(t.name),o.style.display="block",t.todos.forEach((function(t){var e=document.createElement("li");e.dataset.todoId=t.id,e.classList.add("priority-".concat(t.priority)),t.completed&&e.classList.add("todo-completed");var n=document.createElement("input");n.type="checkbox",n.checked=t.completed,n.classList.add("todo-checkbox"),n.dataset.todoId=t.id;var o=document.createElement("div");o.classList.add("todo-info");var a=document.createElement("span");a.classList.add("todo-title"),a.textContent=t.title;var i=document.createElement("span");if(i.classList.add("todo-due-date"),i.textContent="Due: ".concat(function(t){if(!t)return"No date";try{return gt(t instanceof Date?t:function(t,e){const n=()=>E(e?.in,NaN),o=e?.additionalDigits??2,r=function(t){const e={},n=t.split(B.dateTimeDelimiter);let o;if(n.length>2)return e;if(/:/.test(n[0])?o=n[0]:(e.date=n[0],o=n[1],B.timeZoneDelimiter.test(e.date)&&(e.date=t.split(B.timeZoneDelimiter)[0],o=t.substr(e.date.length,t.length))),o){const t=B.timezone.exec(o);t?(e.time=o.replace(t[1],""),e.timezone=t[1]):e.time=o}return e}(t);let a;if(r.date){const t=function(t,e){const n=new RegExp("^(?:(\\d{4}|[+-]\\d{"+(4+e)+"})|(\\d{2}|[+-]\\d{"+(2+e)+"})$)"),o=t.match(n);if(!o)return{year:NaN,restDateString:""};const r=o[1]?parseInt(o[1]):null,a=o[2]?parseInt(o[2]):null;return{year:null===a?r:100*a,restDateString:t.slice((o[1]||o[2]).length)}}(r.date,o);a=function(t,e){if(null===e)return new Date(NaN);const n=t.match(C);if(!n)return new Date(NaN);const o=!!n[4],r=j(n[1]),a=j(n[2])-1,i=j(n[3]),d=j(n[4]),s=j(n[5])-1;if(o)return function(t,e,n){return e>=1&&e<=53&&n>=0&&n<=6}(0,d,s)?function(t,e,n){const o=new Date(0);o.setUTCFullYear(t,0,4);const r=7*(e-1)+n+1-(o.getUTCDay()||7);return o.setUTCDate(o.getUTCDate()+r),o}(e,d,s):new Date(NaN);{const t=new Date(0);return function(t,e,n){return e>=0&&e<=11&&n>=1&&n<=(T[e]||(M(t)?29:28))}(e,a,i)&&function(t,e){return e>=1&&e<=(M(t)?366:365)}(e,r)?(t.setUTCFullYear(e,a,Math.max(r,i)),t):new Date(NaN)}}(t.restDateString,t.year)}if(!a||isNaN(+a))return n();const i=+a;let d,s=0;if(r.time&&(s=function(t){const e=t.match(x);if(!e)return NaN;const n=P(e[1]),o=P(e[2]),r=P(e[3]);return function(t,e,n){return 24===t?0===e&&0===n:n>=0&&n<60&&e>=0&&e<60&&t>=0&&t<25}(n,o,r)?n*y+6e4*o+1e3*r:NaN}(r.time),isNaN(s)))return n();if(!r.timezone){const t=new Date(i+s),n=w(0,e?.in);return n.setFullYear(t.getUTCFullYear(),t.getUTCMonth(),t.getUTCDate()),n.setHours(t.getUTCHours(),t.getUTCMinutes(),t.getUTCSeconds(),t.getUTCMilliseconds()),n}return d=function(t){if("Z"===t)return 0;const e=t.match(k);if(!e)return 0;const n="+"===e[1]?-1:1,o=parseInt(e[2]),r=e[3]&&parseInt(e[3])||0;return function(t,e){return e>=0&&e<=59}(0,r)?n*(o*y+6e4*r):NaN}(r.timezone),isNaN(d)?n():w(i+s+d,e?.in)}(String(t)),"MMM dd, yyyy")}catch(e){return console.warn("Error formatting date:",t,e),"Invalid date"}}(t.dueDate)),o.appendChild(n),o.appendChild(a),o.appendChild(i),t.tags&&t.tags.length>0){var d=document.createElement("div");d.classList.add("todo-tags-display"),t.tags.forEach((function(t){var e=document.createElement("span");e.classList.add("tag-label"),e.textContent=t,d.appendChild(e)})),o.appendChild(d)}var s=document.createElement("div");s.classList.add("todo-actions");var c=document.createElement("button");c.textContent="Edit task",c.classList.add("edit-todo-btn"),c.dataset.todoId=t.id;var u=document.createElement("button");u.textContent="Delete task",u.classList.add("delete-todo-btn"),u.dataset.todoId=t.id,s.appendChild(c),s.appendChild(u),e.appendChild(o),e.appendChild(s),r.appendChild(e)}))},updateProjectTitle:D,openProjectModal:function(){i.reset(),a.style.display="block",d.focus()},closeProjectModal:function(){a.style.display="none"},openTodoModal:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,e=arguments.length>1?arguments[1]:void 0;u.reset(),f.value="",t?(l.textContent="Edit task",b.textContent="Save changes",f.value=t.id,A.value=t.title,m.value=t.description,p.value=t.dueDate?gt(new Date(t.dueDate),"yyyy-MM-dd"):"",g.value=t.priority,h.value=t.tags?t.getTagsString():""):(l.textContent="Add task",b.textContent="Save task"),u.dataset.currentProjectId=e,c.style.display="block",A.focus()},closeTodoModal:function(){c.style.display="none"},getProjectFormData:function(){var t=d.value.trim();return t?{name:t}:(alert("Project name is required."),null)},getTodoFormData:function(){var t=A.value.trim(),e=m.value.trim(),n=p.value,o=g.value,r=h.value.trim(),a=f.value,i=u.dataset.currentProjectId;return t?{id:a,title:t,description:e,dueDate:n,priority:o,tagsString:r,currentProjectId:i}:(alert("Task name is required."),null)},clearElement:S,initializeUI:function(){D("Loading projects..."),S(r);var t=document.createElement("li");t.textContent="Select or create a project to see your tasks.",r.appendChild(t),o.style.display="none"},elements:{projectModal:a,todoModal:c,projectsListUL:t,todosListUL:r,addProjectBtn:e,addTodoBtn:o,projectForm:i,todoForm:u,closeProjectModalBtn:s,closeTodoModalBtn:v}}}();var yt=n(72),vt=n.n(yt),Et=n(825),wt=n.n(Et),Bt=n(659),Ct=n.n(Bt),xt=n(56),kt=n.n(xt),jt=n(540),Pt=n.n(jt),Tt=n(113),Mt=n.n(Tt),St=n(208),Dt={};Dt.styleTagTransform=Mt(),Dt.setAttributes=kt(),Dt.insert=Ct().bind(null,"head"),Dt.domAPI=wt(),Dt.insertStyleElement=Pt(),vt()(St.A,Dt),St.A&&St.A.locals&&St.A.locals,document.addEventListener("DOMContentLoaded",(function(){bt.initializeUI(),e();var t=h.getCurrentProject();function e(){var t=h.getAllProjects(),e=h.getCurrentProject();bt.renderProjects(t,e?e.id:null)}function n(){var t=h.getCurrentProject();if(t){var e=h.findProjectById(t.id);bt.renderTodos(e)}else bt.renderTodos(null),bt.updateProjectTitle("Select project")}if(t?bt.renderTodos(t):(bt.updateProjectTitle("No projects found. Please create one."),bt.renderTodos(null)),bt.elements.addProjectBtn.addEventListener("click",(function(){bt.openProjectModal()})),bt.elements.closeProjectModalBtn.addEventListener("click",(function(){bt.closeProjectModal()})),bt.elements.projectForm.addEventListener("submit",(function(t){t.preventDefault();var o=bt.getProjectFormData();if(o){var r=h.addProject(o.name);r?(h.setCurrentProject(r.id),e(),n(),bt.closeProjectModal()):alert("Unable to create project. The name might already exist or is invalid.")}})),bt.elements.projectsListUL.addEventListener("click",(function(t){if("LI"===t.target.tagName&&t.target.dataset.projectId){var o=t.target.dataset.projectId;h.setCurrentProject(o),e(),n()}})),bt.elements.addTodoBtn.addEventListener("click",(function(){var t=h.getCurrentProject();t?bt.openTodoModal(null,t.id):alert("Please select a project before adding a task.")})),bt.elements.closeTodoModalBtn.addEventListener("click",(function(){bt.closeTodoModal()})),bt.elements.todoForm.addEventListener("submit",(function(t){t.preventDefault();var e=bt.getTodoFormData();e&&(e.id?h.updateTodoInProject(e.currentProjectId,e.id,e):h.addTodoToProject(e.currentProjectId,e),n(),bt.closeTodoModal())})),bt.elements.todosListUL.addEventListener("click",(function(t){var e,o=t.target,r=null===(e=o.closest("li"))||void 0===e?void 0:e.dataset.todoId,a=h.getCurrentProject();if(r&&a){var i=a.id;if(o.classList.contains("delete-todo-btn"))confirm("You will permanently delete this task.")&&(h.removeTodoFromProject(i,r),n());else if(o.classList.contains("edit-todo-btn")){var d,s=null===(d=h.findProjectById(i))||void 0===d?void 0:d.getTodoById(r);s&&bt.openTodoModal(s,i)}else o.classList.contains("todo-checkbox")&&(h.toggleTodoComplete(i,r),n())}})),window.addEventListener("click",(function(t){t.target===bt.elements.projectModal&&bt.closeProjectModal(),t.target===bt.elements.todoModal&&bt.closeTodoModal()})),h.getCurrentProject())n();else if(h.getAllProjects().length>0){var o=h.getAllProjects()[0];h.setCurrentProject(o.id),e(),n()}else bt.updateProjectTitle("Add project"),bt.renderTodos(null)}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,