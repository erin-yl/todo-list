(()=>{"use strict";var t={56:(t,n,e)=>{t.exports=function(t){var n=e.nc;n&&t.setAttribute("nonce",n)}},72:t=>{var n=[];function e(t){for(var e=-1,o=0;o<n.length;o++)if(n[o].identifier===t){e=o;break}return e}function o(t,o){for(var a={},i=[],d=0;d<t.length;d++){var s=t[d],c=o.base?s[0]+o.base:s[0],l=a[c]||0,u="".concat(c," ").concat(l);a[c]=l+1;var A=e(u),f={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==A)n[A].references++,n[A].updater(f);else{var m=r(f,o);o.byIndex=d,n.splice(d,0,{identifier:u,updater:m,references:1})}i.push(u)}return i}function r(t,n){var e=n.domAPI(n);return e.update(t),function(n){if(n){if(n.css===t.css&&n.media===t.media&&n.sourceMap===t.sourceMap&&n.supports===t.supports&&n.layer===t.layer)return;e.update(t=n)}else e.remove()}}t.exports=function(t,r){var a=o(t=t||[],r=r||{});return function(t){t=t||[];for(var i=0;i<a.length;i++){var d=e(a[i]);n[d].references--}for(var s=o(t,r),c=0;c<a.length;c++){var l=e(a[c]);0===n[l].references&&(n[l].updater(),n.splice(l,1))}a=s}}},113:t=>{t.exports=function(t,n){if(n.styleSheet)n.styleSheet.cssText=t;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(t))}}},208:(t,n,e)=>{e.d(n,{A:()=>d});var o=e(354),r=e.n(o),a=e(314),i=e.n(a)()(r());i.push([t.id,'*,\n*::before,\n*::after {\n  box-sizing: border-box;\n}\n\n* {\n  margin: 0;\n}\n\nbody {\n  font-family: "Poppins", serif;\n  color: #212428;\n  margin: 4vw auto;\n  max-width: 1280px;\n}\n\n.container {\n  width: 92vw;\n  max-width: 1200px;\n  margin: 20px auto;\n  background: #fafafa;\n  padding: 20px;\n}\n\nh1 {\n  font-weight: 600;\n  font-size: 1.5em;\n  letter-spacing: 0.4px;\n}\n\n.app-layout {\n  display: flex;\n  gap: 24px;\n}\n\n.projects-sidebar {\n  flex-basis: 250px;\n  padding: 16px;\n  background-color: #e9ecef;\n  border-radius: 4px;\n}\n\n.projects-sidebar h2 {\n  margin-top: 0;\n  border-bottom: 1px solid #ccc;\n  padding-bottom: 10px;\n}\n\n.form-input.is-invalid,\n.form-select.is-invalid {\n  border-color: #dc3545; /* Red for error */\n}\n.form-input:focus, .form-select:focus{\n  border-color: #007bff;\n  box-shadow: 0 0 0 0.2rem rgba(0,123,255,.25);\n}\n\n.error-message {\n  display: block;\n  color: #dc3545;\n  font-size: 0.8em;\n  margin-top: 4px;\n}\n\n#projects-list {\n  list-style-type: none;\n  padding: 0;\n}\n\n#projects-list li {\n  padding: 8px;\n  margin-bottom: 5px;\n  background-color: #f8f9fa;\n  border: 1px solid #dee2e6;\n  border-radius: 3px;\n  cursor: pointer;\n  transition: background-color 0.3s;\n}\n\n#projects-list li.active,\n#projects-list li:hover {\n  background-color: #007bff;\n  color: white;\n}\n\n#add-project-btn,\n#add-todo-btn {\n  display: block;\n  width: 100%;\n  padding: 10px;\n  background-color: #28a745;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  margin-top: 15px;\n  text-align: center;\n}\n\n#add-project-btn:hover,\n#add-todo-btn:hover {\n  background-color: #218838;\n}\n\n.todos-view {\n  flex-grow: 1; /* Takes remaining space */\n  padding: 15px;\n}\n\n.todos-view h2 {\n  margin-top: 0;\n  border-bottom: 1px solid #ccc;\n  padding-bottom: 10px;\n}\n\n.todos-controls {\n  margin-bottom: 15px;\n}\n\n#todos-list {\n  list-style-type: none;\n  padding: 0;\n}\n\n#todos-list li {\n  background: #fdfdfd;\n  border: 1px solid #eee;\n  padding: 10px 15px;\n  margin-bottom: 8px;\n  border-radius: 4px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n#todos-list li .todo-info {\n  display: flex;\n  align-items: center;\n  gap: 10px;\n}\n\n#todos-list li .todo-title {\n  font-weight: bold;\n}\n\n#todos-list li .todo-due-date {\n  font-size: 0.9em;\n  color: #666;\n}\n\n#todos-list li .todo-actions button {\n  margin-left: 8px;\n  padding: 5px 8px;\n  cursor: pointer;\n  border: 1px solid #ccc;\n  border-radius: 3px;\n}\n\n#todos-list li .todo-actions .edit-todo-btn {\n  background-color: #ffc107;\n}\n#todos-list li .todo-actions .delete-todo-btn {\n  background-color: #dc3545;\n  color: white;\n}\n\n/* Priority colors (add to todo list items later via JS) */\n.priority-low {\n  border-left: 5px solid green;\n}\n.priority-medium {\n  border-left: 5px solid orange;\n}\n.priority-high {\n  border-left: 5px solid red;\n}\n\n.todo-completed .todo-title {\n  text-decoration: line-through;\n  color: #888;\n}\n\n/* Modal Styles */\n.modal {\n  display: none; /* Hidden by default */\n  position: fixed;\n  z-index: 1000;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  overflow: auto;\n  background-color: rgba(0, 0, 0, 0.5); /* Dim background */\n}\n\n.modal-content {\n  background-color: #fefefe;\n  margin: 10% auto;\n  padding: 25px;\n  border: 1px solid #888;\n  width: 80%;\n  max-width: 500px;\n  border-radius: 8px;\n  position: relative;\n}\n\n.modal-content h3 {\n  margin-top: 0;\n  color: #333;\n}\n\n.modal-content label {\n  display: block;\n  margin-bottom: 5px;\n  font-weight: bold;\n}\n\n.modal-content input[type="text"],\n.modal-content input[type="date"],\n.modal-content textarea,\n.modal-content select {\n  width: calc(100% - 22px); /* Account for padding/border */\n  padding: 10px;\n  margin-bottom: 15px;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  box-sizing: border-box;\n}\n\n.modal-content textarea {\n  min-height: 80px;\n  resize: vertical;\n}\n\n.modal-content button[type="submit"] {\n  background-color: #007bff;\n  color: white;\n  padding: 10px 15px;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n}\n\n.modal-content button[type="submit"]:hover {\n  background-color: #0056b3;\n}\n\n.close-btn {\n  color: #aaa;\n  float: right;\n  font-size: 28px;\n  font-weight: bold;\n  position: absolute;\n  top: 10px;\n  right: 20px;\n}\n\n.close-btn:hover,\n.close-btn:focus {\n  color: black;\n  text-decoration: none;\n  cursor: pointer;\n}\n\n.todo-tags-display {\n  margin-top: 5px;\n  display: flex;\n  flex-wrap: wrap;\n  gap: 5px;\n}\n\n.tag-label {\n  background-color: #6c757d;\n  color: white;\n  padding: 2px 6px;\n  font-size: 0.75em;\n  border-radius: 3px;\n}\n\n.notification-area {\n  position: fixed;\n  top: 20px;\n  right: 20px;\n  z-index: 2000; /* Above modals */\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n}\n\n.notification {\n  padding: 15px 20px;\n  border-radius: 5px;\n  color: #fff;\n  font-size: 0.9em;\n  box-shadow: 0 2px 10px rgba(0,0,0,0.2);\n  opacity: 0;\n  transform: translateX(100%);\n  animation: slideInNotification 0.5s forwards, fadeOutNotification 0.5s 4.5s forwards; /* Auto hide after 5s total */\n}\n\n.notification.info { background-color: #17a2b8; }\n.notification.success { background-color: #28a745; }\n.notification.error { background-color: #dc3545; }\n.notification.warning { background-color: #ffc107; color: #333 }\n\n@keyframes slideInNotification {\n  to {\n      opacity: 1;\n      transform: translateX(0);\n  }\n}\n\n@keyframes fadeOutNotification {\n  from {\n      opacity: 1;\n      transform: translateX(0);\n  }\n  to {\n      opacity: 0;\n      transform: translateX(100%);\n  }\n}\n',"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"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",sourcesContent:['*,\n*::before,\n*::after {\n  box-sizing: border-box;\n}\n\n* {\n  margin: 0;\n}\n\nbody {\n  font-family: "Poppins", serif;\n  color: #212428;\n  margin: 4vw auto;\n  max-width: 1280px;\n}\n\n.container {\n  width: 92vw;\n  max-width: 1200px;\n  margin: 20px auto;\n  background: #fafafa;\n  padding: 20px;\n}\n\nh1 {\n  font-weight: 600;\n  font-size: 1.5em;\n  letter-spacing: 0.4px;\n}\n\n.app-layout {\n  display: flex;\n  gap: 24px;\n}\n\n.projects-sidebar {\n  flex-basis: 250px;\n  padding: 16px;\n  background-color: #e9ecef;\n  border-radius: 4px;\n}\n\n.projects-sidebar h2 {\n  margin-top: 0;\n  border-bottom: 1px solid #ccc;\n  padding-bottom: 10px;\n}\n\n.form-input.is-invalid,\n.form-select.is-invalid {\n  border-color: #dc3545; /* Red for error */\n}\n.form-input:focus, .form-select:focus{\n  border-color: #007bff;\n  box-shadow: 0 0 0 0.2rem rgba(0,123,255,.25);\n}\n\n.error-message {\n  display: block;\n  color: #dc3545;\n  font-size: 0.8em;\n  margin-top: 4px;\n}\n\n#projects-list {\n  list-style-type: none;\n  padding: 0;\n}\n\n#projects-list li {\n  padding: 8px;\n  margin-bottom: 5px;\n  background-color: #f8f9fa;\n  border: 1px solid #dee2e6;\n  border-radius: 3px;\n  cursor: pointer;\n  transition: background-color 0.3s;\n}\n\n#projects-list li.active,\n#projects-list li:hover {\n  background-color: #007bff;\n  color: white;\n}\n\n#add-project-btn,\n#add-todo-btn {\n  display: block;\n  width: 100%;\n  padding: 10px;\n  background-color: #28a745;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  margin-top: 15px;\n  text-align: center;\n}\n\n#add-project-btn:hover,\n#add-todo-btn:hover {\n  background-color: #218838;\n}\n\n.todos-view {\n  flex-grow: 1; /* Takes remaining space */\n  padding: 15px;\n}\n\n.todos-view h2 {\n  margin-top: 0;\n  border-bottom: 1px solid #ccc;\n  padding-bottom: 10px;\n}\n\n.todos-controls {\n  margin-bottom: 15px;\n}\n\n#todos-list {\n  list-style-type: none;\n  padding: 0;\n}\n\n#todos-list li {\n  background: #fdfdfd;\n  border: 1px solid #eee;\n  padding: 10px 15px;\n  margin-bottom: 8px;\n  border-radius: 4px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n#todos-list li .todo-info {\n  display: flex;\n  align-items: center;\n  gap: 10px;\n}\n\n#todos-list li .todo-title {\n  font-weight: bold;\n}\n\n#todos-list li .todo-due-date {\n  font-size: 0.9em;\n  color: #666;\n}\n\n#todos-list li .todo-actions button {\n  margin-left: 8px;\n  padding: 5px 8px;\n  cursor: pointer;\n  border: 1px solid #ccc;\n  border-radius: 3px;\n}\n\n#todos-list li .todo-actions .edit-todo-btn {\n  background-color: #ffc107;\n}\n#todos-list li .todo-actions .delete-todo-btn {\n  background-color: #dc3545;\n  color: white;\n}\n\n/* Priority colors (add to todo list items later via JS) */\n.priority-low {\n  border-left: 5px solid green;\n}\n.priority-medium {\n  border-left: 5px solid orange;\n}\n.priority-high {\n  border-left: 5px solid red;\n}\n\n.todo-completed .todo-title {\n  text-decoration: line-through;\n  color: #888;\n}\n\n/* Modal Styles */\n.modal {\n  display: none; /* Hidden by default */\n  position: fixed;\n  z-index: 1000;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  overflow: auto;\n  background-color: rgba(0, 0, 0, 0.5); /* Dim background */\n}\n\n.modal-content {\n  background-color: #fefefe;\n  margin: 10% auto;\n  padding: 25px;\n  border: 1px solid #888;\n  width: 80%;\n  max-width: 500px;\n  border-radius: 8px;\n  position: relative;\n}\n\n.modal-content h3 {\n  margin-top: 0;\n  color: #333;\n}\n\n.modal-content label {\n  display: block;\n  margin-bottom: 5px;\n  font-weight: bold;\n}\n\n.modal-content input[type="text"],\n.modal-content input[type="date"],\n.modal-content textarea,\n.modal-content select {\n  width: calc(100% - 22px); /* Account for padding/border */\n  padding: 10px;\n  margin-bottom: 15px;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  box-sizing: border-box;\n}\n\n.modal-content textarea {\n  min-height: 80px;\n  resize: vertical;\n}\n\n.modal-content button[type="submit"] {\n  background-color: #007bff;\n  color: white;\n  padding: 10px 15px;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n}\n\n.modal-content button[type="submit"]:hover {\n  background-color: #0056b3;\n}\n\n.close-btn {\n  color: #aaa;\n  float: right;\n  font-size: 28px;\n  font-weight: bold;\n  position: absolute;\n  top: 10px;\n  right: 20px;\n}\n\n.close-btn:hover,\n.close-btn:focus {\n  color: black;\n  text-decoration: none;\n  cursor: pointer;\n}\n\n.todo-tags-display {\n  margin-top: 5px;\n  display: flex;\n  flex-wrap: wrap;\n  gap: 5px;\n}\n\n.tag-label {\n  background-color: #6c757d;\n  color: white;\n  padding: 2px 6px;\n  font-size: 0.75em;\n  border-radius: 3px;\n}\n\n.notification-area {\n  position: fixed;\n  top: 20px;\n  right: 20px;\n  z-index: 2000; /* Above modals */\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n}\n\n.notification {\n  padding: 15px 20px;\n  border-radius: 5px;\n  color: #fff;\n  font-size: 0.9em;\n  box-shadow: 0 2px 10px rgba(0,0,0,0.2);\n  opacity: 0;\n  transform: translateX(100%);\n  animation: slideInNotification 0.5s forwards, fadeOutNotification 0.5s 4.5s forwards; /* Auto hide after 5s total */\n}\n\n.notification.info { background-color: #17a2b8; }\n.notification.success { background-color: #28a745; }\n.notification.error { background-color: #dc3545; }\n.notification.warning { background-color: #ffc107; color: #333 }\n\n@keyframes slideInNotification {\n  to {\n      opacity: 1;\n      transform: translateX(0);\n  }\n}\n\n@keyframes fadeOutNotification {\n  from {\n      opacity: 1;\n      transform: translateX(0);\n  }\n  to {\n      opacity: 0;\n      transform: translateX(100%);\n  }\n}\n'],sourceRoot:""}]);const d=i},314:t=>{t.exports=function(t){var n=[];return n.toString=function(){return this.map((function(n){var e="",o=void 0!==n[5];return n[4]&&(e+="@supports (".concat(n[4],") {")),n[2]&&(e+="@media ".concat(n[2]," {")),o&&(e+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),e+=t(n),o&&(e+="}"),n[2]&&(e+="}"),n[4]&&(e+="}"),e})).join("")},n.i=function(t,e,o,r,a){"string"==typeof t&&(t=[[null,t,void 0]]);var i={};if(o)for(var d=0;d<this.length;d++){var s=this[d][0];null!=s&&(i[s]=!0)}for(var c=0;c<t.length;c++){var l=[].concat(t[c]);o&&i[l[0]]||(void 0!==a&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=a),e&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=e):l[2]=e),r&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=r):l[4]="".concat(r)),n.push(l))}},n}},354:t=>{t.exports=function(t){var n=t[1],e=t[3];if(!e)return n;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(e)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),a="/*# ".concat(r," */");return[n].concat([a]).join("\n")}return[n].join("\n")}},540:t=>{t.exports=function(t){var n=document.createElement("style");return t.setAttributes(n,t.attributes),t.insert(n,t.options),n}},659:t=>{var n={};t.exports=function(t,e){var o=function(t){if(void 0===n[t]){var e=document.querySelector(t);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(t){e=null}n[t]=e}return n[t]}(t);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(e)}},825:t=>{t.exports=function(t){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var n=t.insertStyleElement(t);return{update:function(e){!function(t,n,e){var o="";e.supports&&(o+="@supports (".concat(e.supports,") {")),e.media&&(o+="@media ".concat(e.media," {"));var r=void 0!==e.layer;r&&(o+="@layer".concat(e.layer.length>0?" ".concat(e.layer):""," {")),o+=e.css,r&&(o+="}"),e.media&&(o+="}"),e.supports&&(o+="}");var a=e.sourceMap;a&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),n.styleTagTransform(o,t,n.options)}(n,t,e)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(n)}}}}},n={};function e(o){var r=n[o];if(void 0!==r)return r.exports;var a=n[o]={id:o,exports:{}};return t[o](a,a.exports,e),a.exports}function o(t){return o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},o(t)}function r(t,n){for(var e=0;e<n.length;e++){var o=n[e];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,a(o.key),o)}}function a(t){var n=function(t){if("object"!=o(t)||!t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var e=n.call(t,"string");if("object"!=o(e))return e;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(t);return"symbol"==o(n)?n:n+""}e.n=t=>{var n=t&&t.__esModule?()=>t.default:()=>t;return e.d(n,{a:n}),n},e.d=(t,n)=>{for(var o in n)e.o(n,o)&&!e.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:n[o]})},e.o=(t,n)=>Object.prototype.hasOwnProperty.call(t,n),e.nc=void 0;const i=function(){return t=function t(n,e,o,r){var a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:[],i=arguments.length>5&&void 0!==arguments[5]&&arguments[5];if(function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,t),this.id="todo-".concat(Date.now(),"-").concat(Math.random().toString(36).slice(2,11)),this.title=n,this.description=e,o&&""!==String(o).trim()){var d=new Date(o);this.dueDate=isNaN(d.valueOf())?null:d}else this.dueDate=null;this.priority=r,this.tags=Array.isArray(a)?a:[],this.completed=i},(n=[{key:"toggleComplete",value:function(){this.completed=!this.completed}},{key:"updatePriority",value:function(t){["low","medium","high"].includes(t)?this.priority=t:console.warn("Invalid priority value:",t)}},{key:"updateDetails",value:function(t){if(t.title&&(this.title=t.title),t.description&&(this.description=t.description),t.dueDate&&""!==String(t.dueDate).trim()){var n=new Date(t.dueDate);this.dueDate=isNaN(n.valueOf())?null:n}else this.dueDate=null;t.priority&&this.updatePriority(t.priority),t.tags&&Array.isArray(t.tags)&&(this.tags=t.tags.map((function(t){return t.trim()})).filter((function(t){return t.length>0})))}},{key:"addTag",value:function(t){var n=t.trim();n&&!this.tags.includes(n)&&this.tags.push(n)}},{key:"removeTag",value:function(t){var n=t.trim();this.tags=this.tags.filter((function(t){return t!==n}))}},{key:"getTagsString",value:function(){return this.tags.join(", ")}},{key:"setTagsFromString",value:function(t){"string"==typeof t&&(this.tags=t.split(",").map((function(t){return t.trim()})).filter((function(t){return t.length>0})))}}])&&r(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),t;var t,n}();function d(t){return d="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},d(t)}function s(t,n){(null==n||n>t.length)&&(n=t.length);for(var e=0,o=Array(n);e<n;e++)o[e]=t[e];return o}function c(t,n){for(var e=0;e<n.length;e++){var o=n[e];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,l(o.key),o)}}function l(t){var n=function(t){if("object"!=d(t)||!t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var e=n.call(t,"string");if("object"!=d(e))return e;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(t);return"symbol"==d(n)?n:n+""}const u=function(){return t=function t(n){!function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,t),this.id="project-".concat(Date.now(),"-").concat(Math.random().toString(36).slice(2,11)),this.name=n,this.todos=[]},n=[{key:"addTodo",value:function(t){t instanceof i?this.todos.find((function(n){return n.id===t.id}))?console.warn("Task with ID ".concat(t.id," already exists in project ").concat(this.name,".")):this.todos.push(t):console.error("Invalid item added to project. Expected a Todo object.",t)}},{key:"removeTodo",value:function(t){this.todos=this.todos.filter((function(n){return n.id!==t}))}},{key:"getTodoById",value:function(t){return this.todos.find((function(n){return n.id===t}))}},{key:"getAllTodos",value:function(){return function(t){return function(t){if(Array.isArray(t))return s(t)}(t)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||function(t,n){if(t){if("string"==typeof t)return s(t,n);var e={}.toString.call(t).slice(8,-1);return"Object"===e&&t.constructor&&(e=t.constructor.name),"Map"===e||"Set"===e?Array.from(t):"Arguments"===e||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e)?s(t,n):void 0}}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}(this.todos)}},{key:"getTodosByPriority",value:function(t){return this.todos.filter((function(n){return n.priority===t}))}},{key:"getTodosByCompletion",value:function(t){return this.todos.filter((function(n){return n.completed===t}))}},{key:"getTodosByTag",value:function(t){var n=t.trim().toLowerCase();return n?this.todos.filter((function(t){return t.tags.some((function(t){return t.toLowerCase()===n}))})):this.getAllTodos()}},{key:"getUniqueTags",value:function(){var t=new Set;return this.todos.forEach((function(n){n.tags.forEach((function(n){return t.add(n.trim())}))})),Array.from(t).sort()}}],n&&c(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),t;var t,n}();var A="todoAppProjects";const f=function(t){try{var n=JSON.stringify(t);localStorage.setItem(A,n)}catch(t){console.error("Error saving data to localStorage:",t)}},m=function(){try{var t=localStorage.getItem(A);if(null===t)return;return JSON.parse(t)}catch(t){return void console.error("Error loading data from localStorage:",t)}};var p=["tagsString"];function g(t,n){(null==n||n>t.length)&&(n=t.length);for(var e=0,o=Array(n);e<n;e++)o[e]=t[e];return o}const h=function(){var t,n=[],e=null;function o(){f(n)}function r(t){return n.find((function(n){return n.id===t}))}function a(){return n.reduce((function(t,n){return t.concat(n.getAllTodos())}),[])}return(t=m())&&t.length>0?(n=t.map((function(t){var n=new u(t.name);return n.id=t.id,n.todos=t.todos.map((function(t){var n=new i(t.title,t.description,t.dueDate,t.priority,t.tags||[],t.completed);return n.id=t.id,n})),n})),e=n[0]||null):function(){console.log("Creating sample data...");var t=new u("Work");t.addTodo(new i("Finish Q2 report","Compile required data and finalize the conclusion.",new Date(2025,4,26),"high",["report"],!1)),t.addTodo(new i("Team meeting prep","Prepare agenda and slides for Monday's team meeting.",new Date(2025,5,6),"medium",["meeting"],!1)),t.addTodo(new i("Client follow-up","Call John Doe regarding project Alpha.","","medium",["client"],!0));var r=new u("Personal");r.addTodo(new i("Grocery shopping","Milk, eggs, chicken, fruits.",new Date(2025,4,20),"low",["home","shopping"],!1)),r.addTodo(new i("Book doctor appointment","Annual check-up.",new Date(2025,5,10),"high",["health"],!1));var a=new u("Learning");a.addTodo(new i("Webpack Deep Dive","Understand loaders and plugins.",new Date(2025,4,30),"medium",["dev"],!0)),a.addTodo(new i("Read The Pragmatic Programmer","Chapter 3-5","","low",["reading","dev"],!1)),n=[t,r,a],e=t,o()}(),{addProject:function(t){if(t&&!n.find((function(n){return n.name.toLowerCase()===t.toLowerCase()}))){var e=new u(t);return n.push(e),o(),e}return console.warn("Project name already exists:",t),null},removeProject:function(t){var r=n.findIndex((function(n){return n.id===t}));if(r>-1){var a=n.splice(r,1)[0];return e&&e.id===t&&(e=n[0]||null),o(),a}return null},findProjectById:r,getAllProjects:function(){return function(t){if(Array.isArray(t))return g(t)}(t=n)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||function(t,n){if(t){if("string"==typeof t)return g(t,n);var e={}.toString.call(t).slice(8,-1);return"Object"===e&&t.constructor&&(e=t.constructor.name),"Map"===e||"Set"===e?Array.from(t):"Arguments"===e||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e)?g(t,n):void 0}}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}();var t},setCurrentProject:function(t){var n=r(t);return!!n&&(e=n,!0)},getCurrentProject:function(){return e},addTodoToProject:function(t,n){var e=r(t);if(e){var a=n.title,d=n.description,s=n.dueDate,c=n.priority,l=n.tagsString,u=new i(a,d,s,c);return l&&u.setTagsFromString(l),e.addTodo(u),o(),u}return console.warn("Project not found for adding task:",t),null},removeTodoFromProject:function(t,n){var e=r(t);return!!e&&(e.removeTodo(n),o(),!0)},updateTodoInProject:function(t,n,e){var a=r(t);if(a){var i=a.getTodoById(n);if(i){if(void 0!==e.tagsString){i.setTagsFromString(e.tagsString),e.tagsString;var d=function(t,n){if(null==t)return{};var e,o,r=function(t,n){if(null==t)return{};var e={};for(var o in t)if({}.hasOwnProperty.call(t,o)){if(-1!==n.indexOf(o))continue;e[o]=t[o]}return e}(t,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);for(o=0;o<a.length;o++)e=a[o],-1===n.indexOf(e)&&{}.propertyIsEnumerable.call(t,e)&&(r[e]=t[e])}return r}(e,p);i.updateDetails(d)}else i.updateDetails(e);return o(),i}}return null},toggleTodoComplete:function(t,n){var e=r(t);if(e){var a=e.getTodoById(n);if(a)return a.toggleComplete(),o(),a}return null},getAllTodosAcrossProjects:a,filterTodosByTagAcrossProjects:function(t){var n=a(),e=t.trim().toLowerCase();return e?n.filter((function(t){return t.tags.some((function(t){return t.toLowerCase()===e}))})):n},filterTodosByPriorityAcrossProjects:function(t){return a().filter((function(n){return n.priority===t}))},getAllUniqueTagsAcrossProjects:function(){var t=new Set;return n.forEach((function(n){n.getUniqueTags().forEach((function(n){return t.add(n)}))})),Array.from(t).sort()}}}(),b=(Math.pow(10,8),6048e5),y=36e5,E=Symbol.for("constructDateFrom");function v(t,n){return"function"==typeof t?t(n):t&&"object"==typeof t&&E in t?t[E](n):t instanceof Date?new t.constructor(n):new Date(n)}function C(t,n){return v(n||t,t)}const B={dateTimeDelimiter:/[T ]/,timeZoneDelimiter:/[Z ]/i,timezone:/([Z+-].*)$/},w=/^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/,x=/^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/,k=/^([+-])(\d{2})(?::?(\d{2}))?$/;function j(t){return t?parseInt(t):1}function T(t){return t&&parseFloat(t.replace(",","."))||0}const P=[31,null,31,30,31,30,31,31,30,31,30,31];function M(t){return t%400==0||t%4==0&&t%100!=0}const S={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function D(t){return(n={})=>{const e=n.width?String(n.width):t.defaultWidth;return t.formats[e]||t.formats[t.defaultWidth]}}const N={date:D({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:D({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:D({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},I={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function W(t){return(n,e)=>{let o;if("formatting"===(e?.context?String(e.context):"standalone")&&t.formattingValues){const n=t.defaultFormattingWidth||t.defaultWidth,r=e?.width?String(e.width):n;o=t.formattingValues[r]||t.formattingValues[n]}else{const n=t.defaultWidth,r=e?.width?String(e.width):t.defaultWidth;o=t.values[r]||t.values[n]}return o[t.argumentCallback?t.argumentCallback(n):n]}}const L={ordinalNumber:(t,n)=>{const e=Number(t),o=e%100;if(o>20||o<10)switch(o%10){case 1:return e+"st";case 2:return e+"nd";case 3:return e+"rd"}return e+"th"},era:W({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:W({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:t=>t-1}),month:W({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:W({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:W({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function Y(t){return(n,e={})=>{const o=e.width,r=o&&t.matchPatterns[o]||t.matchPatterns[t.defaultMatchWidth],a=n.match(r);if(!a)return null;const i=a[0],d=o&&t.parsePatterns[o]||t.parsePatterns[t.defaultParseWidth],s=Array.isArray(d)?function(t){for(let n=0;n<t.length;n++)if(t[n].test(i))return n}(d):function(t){for(const n in t)if(Object.prototype.hasOwnProperty.call(t,n)&&t[n].test(i))return n}(d);let c;return c=t.valueCallback?t.valueCallback(s):s,c=e.valueCallback?e.valueCallback(c):c,{value:c,rest:n.slice(i.length)}}}const O={ordinalNumber:(z={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:t=>parseInt(t,10)},(t,n={})=>{const e=t.match(z.matchPattern);if(!e)return null;const o=e[0],r=t.match(z.parsePattern);if(!r)return null;let a=z.valueCallback?z.valueCallback(r[0]):r[0];return a=n.valueCallback?n.valueCallback(a):a,{value:a,rest:t.slice(o.length)}}),era:Y({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:Y({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:t=>t+1}),month:Y({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:Y({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:Y({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};var z;const q={code:"en-US",formatDistance:(t,n,e)=>{let o;const r=S[t];return o="string"==typeof r?r:1===n?r.one:r.other.replace("{{count}}",n.toString()),e?.addSuffix?e.comparison&&e.comparison>0?"in "+o:o+" ago":o},formatLong:N,formatRelative:(t,n,e,o)=>I[t],localize:L,match:O,options:{weekStartsOn:0,firstWeekContainsDate:1}};let F={};function U(){return F}function H(t){const n=C(t),e=new Date(Date.UTC(n.getFullYear(),n.getMonth(),n.getDate(),n.getHours(),n.getMinutes(),n.getSeconds(),n.getMilliseconds()));return e.setUTCFullYear(n.getFullYear()),+t-+e}function X(t,n){const e=C(t,n?.in);return e.setHours(0,0,0,0),e}function Q(t,n){const e=C(t,n?.in);return function(t,n,e){const[o,r]=function(t,...n){const e=v.bind(null,t||n.find((t=>"object"==typeof t)));return n.map(e)}(e?.in,t,n),a=X(o),i=X(r),d=+a-H(a),s=+i-H(i);return Math.round((d-s)/864e5)}(e,function(t,n){const e=C(t,n?.in);return e.setFullYear(e.getFullYear(),0,1),e.setHours(0,0,0,0),e}(e))+1}function Z(t,n){const e=U(),o=n?.weekStartsOn??n?.locale?.options?.weekStartsOn??e.weekStartsOn??e.locale?.options?.weekStartsOn??0,r=C(t,n?.in),a=r.getDay(),i=(a<o?7:0)+a-o;return r.setDate(r.getDate()-i),r.setHours(0,0,0,0),r}function G(t,n){return Z(t,{...n,weekStartsOn:1})}function $(t,n){const e=C(t,n?.in),o=e.getFullYear(),r=v(e,0);r.setFullYear(o+1,0,4),r.setHours(0,0,0,0);const a=G(r),i=v(e,0);i.setFullYear(o,0,4),i.setHours(0,0,0,0);const d=G(i);return e.getTime()>=a.getTime()?o+1:e.getTime()>=d.getTime()?o:o-1}function J(t,n){const e=C(t,n?.in),o=+G(e)-+function(t,n){const e=$(t,n),o=v(n?.in||t,0);return o.setFullYear(e,0,4),o.setHours(0,0,0,0),G(o)}(e);return Math.round(o/b)+1}function R(t,n){const e=C(t,n?.in),o=e.getFullYear(),r=U(),a=n?.firstWeekContainsDate??n?.locale?.options?.firstWeekContainsDate??r.firstWeekContainsDate??r.locale?.options?.firstWeekContainsDate??1,i=v(n?.in||t,0);i.setFullYear(o+1,0,a),i.setHours(0,0,0,0);const d=Z(i,n),s=v(n?.in||t,0);s.setFullYear(o,0,a),s.setHours(0,0,0,0);const c=Z(s,n);return+e>=+d?o+1:+e>=+c?o:o-1}function V(t,n){const e=C(t,n?.in),o=+Z(e,n)-+function(t,n){const e=U(),o=n?.firstWeekContainsDate??n?.locale?.options?.firstWeekContainsDate??e.firstWeekContainsDate??e.locale?.options?.firstWeekContainsDate??1,r=R(t,n),a=v(n?.in||t,0);return a.setFullYear(r,0,o),a.setHours(0,0,0,0),Z(a,n)}(e,n);return Math.round(o/b)+1}function K(t,n){return(t<0?"-":"")+Math.abs(t).toString().padStart(n,"0")}const _={y(t,n){const e=t.getFullYear(),o=e>0?e:1-e;return K("yy"===n?o%100:o,n.length)},M(t,n){const e=t.getMonth();return"M"===n?String(e+1):K(e+1,2)},d:(t,n)=>K(t.getDate(),n.length),a(t,n){const e=t.getHours()/12>=1?"pm":"am";switch(n){case"a":case"aa":return e.toUpperCase();case"aaa":return e;case"aaaaa":return e[0];default:return"am"===e?"a.m.":"p.m."}},h:(t,n)=>K(t.getHours()%12||12,n.length),H:(t,n)=>K(t.getHours(),n.length),m:(t,n)=>K(t.getMinutes(),n.length),s:(t,n)=>K(t.getSeconds(),n.length),S(t,n){const e=n.length,o=t.getMilliseconds();return K(Math.trunc(o*Math.pow(10,e-3)),n.length)}},tt={G:function(t,n,e){const o=t.getFullYear()>0?1:0;switch(n){case"G":case"GG":case"GGG":return e.era(o,{width:"abbreviated"});case"GGGGG":return e.era(o,{width:"narrow"});default:return e.era(o,{width:"wide"})}},y:function(t,n,e){if("yo"===n){const n=t.getFullYear(),o=n>0?n:1-n;return e.ordinalNumber(o,{unit:"year"})}return _.y(t,n)},Y:function(t,n,e,o){const r=R(t,o),a=r>0?r:1-r;return"YY"===n?K(a%100,2):"Yo"===n?e.ordinalNumber(a,{unit:"year"}):K(a,n.length)},R:function(t,n){return K($(t),n.length)},u:function(t,n){return K(t.getFullYear(),n.length)},Q:function(t,n,e){const o=Math.ceil((t.getMonth()+1)/3);switch(n){case"Q":return String(o);case"QQ":return K(o,2);case"Qo":return e.ordinalNumber(o,{unit:"quarter"});case"QQQ":return e.quarter(o,{width:"abbreviated",context:"formatting"});case"QQQQQ":return e.quarter(o,{width:"narrow",context:"formatting"});default:return e.quarter(o,{width:"wide",context:"formatting"})}},q:function(t,n,e){const o=Math.ceil((t.getMonth()+1)/3);switch(n){case"q":return String(o);case"qq":return K(o,2);case"qo":return e.ordinalNumber(o,{unit:"quarter"});case"qqq":return e.quarter(o,{width:"abbreviated",context:"standalone"});case"qqqqq":return e.quarter(o,{width:"narrow",context:"standalone"});default:return e.quarter(o,{width:"wide",context:"standalone"})}},M:function(t,n,e){const o=t.getMonth();switch(n){case"M":case"MM":return _.M(t,n);case"Mo":return e.ordinalNumber(o+1,{unit:"month"});case"MMM":return e.month(o,{width:"abbreviated",context:"formatting"});case"MMMMM":return e.month(o,{width:"narrow",context:"formatting"});default:return e.month(o,{width:"wide",context:"formatting"})}},L:function(t,n,e){const o=t.getMonth();switch(n){case"L":return String(o+1);case"LL":return K(o+1,2);case"Lo":return e.ordinalNumber(o+1,{unit:"month"});case"LLL":return e.month(o,{width:"abbreviated",context:"standalone"});case"LLLLL":return e.month(o,{width:"narrow",context:"standalone"});default:return e.month(o,{width:"wide",context:"standalone"})}},w:function(t,n,e,o){const r=V(t,o);return"wo"===n?e.ordinalNumber(r,{unit:"week"}):K(r,n.length)},I:function(t,n,e){const o=J(t);return"Io"===n?e.ordinalNumber(o,{unit:"week"}):K(o,n.length)},d:function(t,n,e){return"do"===n?e.ordinalNumber(t.getDate(),{unit:"date"}):_.d(t,n)},D:function(t,n,e){const o=Q(t);return"Do"===n?e.ordinalNumber(o,{unit:"dayOfYear"}):K(o,n.length)},E:function(t,n,e){const o=t.getDay();switch(n){case"E":case"EE":case"EEE":return e.day(o,{width:"abbreviated",context:"formatting"});case"EEEEE":return e.day(o,{width:"narrow",context:"formatting"});case"EEEEEE":return e.day(o,{width:"short",context:"formatting"});default:return e.day(o,{width:"wide",context:"formatting"})}},e:function(t,n,e,o){const r=t.getDay(),a=(r-o.weekStartsOn+8)%7||7;switch(n){case"e":return String(a);case"ee":return K(a,2);case"eo":return e.ordinalNumber(a,{unit:"day"});case"eee":return e.day(r,{width:"abbreviated",context:"formatting"});case"eeeee":return e.day(r,{width:"narrow",context:"formatting"});case"eeeeee":return e.day(r,{width:"short",context:"formatting"});default:return e.day(r,{width:"wide",context:"formatting"})}},c:function(t,n,e,o){const r=t.getDay(),a=(r-o.weekStartsOn+8)%7||7;switch(n){case"c":return String(a);case"cc":return K(a,n.length);case"co":return e.ordinalNumber(a,{unit:"day"});case"ccc":return e.day(r,{width:"abbreviated",context:"standalone"});case"ccccc":return e.day(r,{width:"narrow",context:"standalone"});case"cccccc":return e.day(r,{width:"short",context:"standalone"});default:return e.day(r,{width:"wide",context:"standalone"})}},i:function(t,n,e){const o=t.getDay(),r=0===o?7:o;switch(n){case"i":return String(r);case"ii":return K(r,n.length);case"io":return e.ordinalNumber(r,{unit:"day"});case"iii":return e.day(o,{width:"abbreviated",context:"formatting"});case"iiiii":return e.day(o,{width:"narrow",context:"formatting"});case"iiiiii":return e.day(o,{width:"short",context:"formatting"});default:return e.day(o,{width:"wide",context:"formatting"})}},a:function(t,n,e){const o=t.getHours()/12>=1?"pm":"am";switch(n){case"a":case"aa":return e.dayPeriod(o,{width:"abbreviated",context:"formatting"});case"aaa":return e.dayPeriod(o,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return e.dayPeriod(o,{width:"narrow",context:"formatting"});default:return e.dayPeriod(o,{width:"wide",context:"formatting"})}},b:function(t,n,e){const o=t.getHours();let r;switch(r=12===o?"noon":0===o?"midnight":o/12>=1?"pm":"am",n){case"b":case"bb":return e.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return e.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return e.dayPeriod(r,{width:"narrow",context:"formatting"});default:return e.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(t,n,e){const o=t.getHours();let r;switch(r=o>=17?"evening":o>=12?"afternoon":o>=4?"morning":"night",n){case"B":case"BB":case"BBB":return e.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return e.dayPeriod(r,{width:"narrow",context:"formatting"});default:return e.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(t,n,e){if("ho"===n){let n=t.getHours()%12;return 0===n&&(n=12),e.ordinalNumber(n,{unit:"hour"})}return _.h(t,n)},H:function(t,n,e){return"Ho"===n?e.ordinalNumber(t.getHours(),{unit:"hour"}):_.H(t,n)},K:function(t,n,e){const o=t.getHours()%12;return"Ko"===n?e.ordinalNumber(o,{unit:"hour"}):K(o,n.length)},k:function(t,n,e){let o=t.getHours();return 0===o&&(o=24),"ko"===n?e.ordinalNumber(o,{unit:"hour"}):K(o,n.length)},m:function(t,n,e){return"mo"===n?e.ordinalNumber(t.getMinutes(),{unit:"minute"}):_.m(t,n)},s:function(t,n,e){return"so"===n?e.ordinalNumber(t.getSeconds(),{unit:"second"}):_.s(t,n)},S:function(t,n){return _.S(t,n)},X:function(t,n,e){const o=t.getTimezoneOffset();if(0===o)return"Z";switch(n){case"X":return et(o);case"XXXX":case"XX":return ot(o);default:return ot(o,":")}},x:function(t,n,e){const o=t.getTimezoneOffset();switch(n){case"x":return et(o);case"xxxx":case"xx":return ot(o);default:return ot(o,":")}},O:function(t,n,e){const o=t.getTimezoneOffset();switch(n){case"O":case"OO":case"OOO":return"GMT"+nt(o,":");default:return"GMT"+ot(o,":")}},z:function(t,n,e){const o=t.getTimezoneOffset();switch(n){case"z":case"zz":case"zzz":return"GMT"+nt(o,":");default:return"GMT"+ot(o,":")}},t:function(t,n,e){return K(Math.trunc(+t/1e3),n.length)},T:function(t,n,e){return K(+t,n.length)}};function nt(t,n=""){const e=t>0?"-":"+",o=Math.abs(t),r=Math.trunc(o/60),a=o%60;return 0===a?e+String(r):e+String(r)+n+K(a,2)}function et(t,n){return t%60==0?(t>0?"-":"+")+K(Math.abs(t)/60,2):ot(t,n)}function ot(t,n=""){const e=t>0?"-":"+",o=Math.abs(t);return e+K(Math.trunc(o/60),2)+n+K(o%60,2)}const rt=(t,n)=>{switch(t){case"P":return n.date({width:"short"});case"PP":return n.date({width:"medium"});case"PPP":return n.date({width:"long"});default:return n.date({width:"full"})}},at=(t,n)=>{switch(t){case"p":return n.time({width:"short"});case"pp":return n.time({width:"medium"});case"ppp":return n.time({width:"long"});default:return n.time({width:"full"})}},it={p:at,P:(t,n)=>{const e=t.match(/(P+)(p+)?/)||[],o=e[1],r=e[2];if(!r)return rt(t,n);let a;switch(o){case"P":a=n.dateTime({width:"short"});break;case"PP":a=n.dateTime({width:"medium"});break;case"PPP":a=n.dateTime({width:"long"});break;default:a=n.dateTime({width:"full"})}return a.replace("{{date}}",rt(o,n)).replace("{{time}}",at(r,n))}},dt=/^D+$/,st=/^Y+$/,ct=["D","DD","YY","YYYY"];function lt(t){return!(!((n=t)instanceof Date||"object"==typeof n&&"[object Date]"===Object.prototype.toString.call(n))&&"number"!=typeof t||isNaN(+C(t)));var n}const ut=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,At=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,ft=/^'([^]*?)'?$/,mt=/''/g,pt=/[a-zA-Z]/;function gt(t,n,e){const o=U(),r=e?.locale??o.locale??q,a=e?.firstWeekContainsDate??e?.locale?.options?.firstWeekContainsDate??o.firstWeekContainsDate??o.locale?.options?.firstWeekContainsDate??1,i=e?.weekStartsOn??e?.locale?.options?.weekStartsOn??o.weekStartsOn??o.locale?.options?.weekStartsOn??0,d=C(t,e?.in);if(!lt(d))throw new RangeError("Invalid time value");let s=n.match(At).map((t=>{const n=t[0];return"p"===n||"P"===n?(0,it[n])(t,r.formatLong):t})).join("").match(ut).map((t=>{if("''"===t)return{isToken:!1,value:"'"};const n=t[0];if("'"===n)return{isToken:!1,value:ht(t)};if(tt[n])return{isToken:!0,value:t};if(n.match(pt))throw new RangeError("Format string contains an unescaped latin alphabet character `"+n+"`");return{isToken:!1,value:t}}));r.localize.preprocessor&&(s=r.localize.preprocessor(d,s));const c={firstWeekContainsDate:a,weekStartsOn:i,locale:r};return s.map((o=>{if(!o.isToken)return o.value;const a=o.value;return(!e?.useAdditionalWeekYearTokens&&function(t){return st.test(t)}(a)||!e?.useAdditionalDayOfYearTokens&&function(t){return dt.test(t)}(a))&&function(t,n,e){const o=function(t,n,e){const o="Y"===t[0]?"years":"days of the month";return`Use \`${t.toLowerCase()}\` instead of \`${t}\` (in \`${n}\`) for formatting ${o} to the input \`${e}\`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md`}(t,n,e);if(console.warn(o),ct.includes(t))throw new RangeError(o)}(a,n,String(t)),(0,tt[a[0]])(d,a,r.localize,c)})).join("")}function ht(t){const n=t.match(ft);return n?n[1].replace(mt,"'"):t}var bt=function(){var t=document.getElementById("projects-list"),n=document.getElementById("add-project-btn"),e=document.getElementById("current-project-title"),o=document.getElementById("add-todo-btn"),r=document.getElementById("todos-list"),a=document.getElementById("notification-area"),i=document.getElementById("project-modal"),d=document.getElementById("project-form"),s=document.getElementById("project-id"),c=document.getElementById("project-name-input"),l=document.getElementById("close-project-modal"),u=document.getElementById("todo-modal"),A=document.getElementById("todo-form"),f=document.getElementById("todo-id"),m=document.getElementById("todo-title-input"),p=document.getElementById("todo-description-input"),g=document.getElementById("todo-dueDate-input"),h=document.getElementById("todo-priority-input"),b=document.getElementById("todo-tags-input"),E=document.getElementById("close-todo-modal");function S(t){for(;t.firstChild;)t.removeChild(t.firstChild)}function D(t){e.textContent=t||"No project selected"}return{renderProjects:function(n,e){if(S(t),!n||0===n.length){var o=document.createElement("li");return o.textContent="No projects yet.",o.classList.add("no-items"),void t.appendChild(o)}n.forEach((function(n){var o=document.createElement("li");o.textContent=n.name,o.dataset.projectId=n.id,n.id===e&&o.classList.add("active"),t.appendChild(o)}))},renderTodos:function(t){if(S(r),!t||!t.todos||0===t.todos.length){e.textContent=t?t.name:"Select a project";var n=document.createElement("li");return n.textContent="No tasks in this project yet. Add one!",n.classList.add("no-items"),r.appendChild(n),void(o.style.display=t?"block":"none")}D(t.name),o.style.display="block",t.todos.forEach((function(t){var n=document.createElement("li");n.dataset.todoId=t.id,n.classList.add("priority-".concat(t.priority)),t.completed&&n.classList.add("todo-completed");var e=document.createElement("input");e.type="checkbox",e.checked=t.completed,e.classList.add("todo-checkbox"),e.dataset.todoId=t.id;var o=document.createElement("div");o.classList.add("todo-info");var a=document.createElement("span");a.classList.add("todo-title"),a.textContent=t.title;var i=document.createElement("span");if(i.classList.add("todo-due-date"),i.textContent="Due: ".concat(function(t){if(!t||t instanceof Date&&isNaN(t.valueOf()))return"No date set";var n=t instanceof Date?t:function(t,n){const e=()=>v(n?.in,NaN),o=n?.additionalDigits??2,r=function(t){const n={},e=t.split(B.dateTimeDelimiter);let o;if(e.length>2)return n;if(/:/.test(e[0])?o=e[0]:(n.date=e[0],o=e[1],B.timeZoneDelimiter.test(n.date)&&(n.date=t.split(B.timeZoneDelimiter)[0],o=t.substr(n.date.length,t.length))),o){const t=B.timezone.exec(o);t?(n.time=o.replace(t[1],""),n.timezone=t[1]):n.time=o}return n}(t);let a;if(r.date){const t=function(t,n){const e=new RegExp("^(?:(\\d{4}|[+-]\\d{"+(4+n)+"})|(\\d{2}|[+-]\\d{"+(2+n)+"})$)"),o=t.match(e);if(!o)return{year:NaN,restDateString:""};const r=o[1]?parseInt(o[1]):null,a=o[2]?parseInt(o[2]):null;return{year:null===a?r:100*a,restDateString:t.slice((o[1]||o[2]).length)}}(r.date,o);a=function(t,n){if(null===n)return new Date(NaN);const e=t.match(w);if(!e)return new Date(NaN);const o=!!e[4],r=j(e[1]),a=j(e[2])-1,i=j(e[3]),d=j(e[4]),s=j(e[5])-1;if(o)return function(t,n,e){return n>=1&&n<=53&&e>=0&&e<=6}(0,d,s)?function(t,n,e){const o=new Date(0);o.setUTCFullYear(t,0,4);const r=7*(n-1)+e+1-(o.getUTCDay()||7);return o.setUTCDate(o.getUTCDate()+r),o}(n,d,s):new Date(NaN);{const t=new Date(0);return function(t,n,e){return n>=0&&n<=11&&e>=1&&e<=(P[n]||(M(t)?29:28))}(n,a,i)&&function(t,n){return n>=1&&n<=(M(t)?366:365)}(n,r)?(t.setUTCFullYear(n,a,Math.max(r,i)),t):new Date(NaN)}}(t.restDateString,t.year)}if(!a||isNaN(+a))return e();const i=+a;let d,s=0;if(r.time&&(s=function(t){const n=t.match(x);if(!n)return NaN;const e=T(n[1]),o=T(n[2]),r=T(n[3]);return function(t,n,e){return 24===t?0===n&&0===e:e>=0&&e<60&&n>=0&&n<60&&t>=0&&t<25}(e,o,r)?e*y+6e4*o+1e3*r:NaN}(r.time),isNaN(s)))return e();if(!r.timezone){const t=new Date(i+s),e=C(0,n?.in);return e.setFullYear(t.getUTCFullYear(),t.getUTCMonth(),t.getUTCDate()),e.setHours(t.getUTCHours(),t.getUTCMinutes(),t.getUTCSeconds(),t.getUTCMilliseconds()),e}return d=function(t){if("Z"===t)return 0;const n=t.match(k);if(!n)return 0;const e="+"===n[1]?-1:1,o=parseInt(n[2]),r=n[3]&&parseInt(n[3])||0;return function(t,n){return n>=0&&n<=59}(0,r)?e*(o*y+6e4*r):NaN}(r.timezone),isNaN(d)?e():C(i+s+d,n?.in)}(String(t));return isNaN(n.valueOf())?"No date set":gt(n,"MMM dd, yyyy")}(t.dueDate)),o.appendChild(e),o.appendChild(a),o.appendChild(i),t.tags&&t.tags.length>0){var d=document.createElement("div");d.classList.add("todo-tags-display"),t.tags.forEach((function(t){var n=document.createElement("span");n.classList.add("tag-label"),n.textContent=t,d.appendChild(n)})),o.appendChild(d)}var s=document.createElement("div");s.classList.add("todo-actions");var c=document.createElement("button");c.textContent="Edit",c.classList.add("edit-todo-btn"),c.dataset.todoId=t.id;var l=document.createElement("button");l.textContent="Delete",l.classList.add("delete-todo-btn"),l.dataset.todoId=t.id,s.appendChild(c),s.appendChild(l),n.appendChild(o),n.appendChild(s),r.appendChild(n)}))},updateProjectTitle:D,openProjectModal:function(){d.reset(),i.style.display="block",c.focus()},closeProjectModal:function(){i.style.display="none"},openTodoModal:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,n=arguments.length>1?arguments[1]:void 0;A.reset(),f.value="",t&&(f.value=t.id,m.value=t.title,p.value=t.description,g.value=t.dueDate?gt(new Date(t.dueDate),"yyyy-MM-dd"):"",h.value=t.priority,b.value=t.tags?t.getTagsString():""),A.dataset.currentProjectId=n,u.style.display="block",m.focus()},closeTodoModal:function(){u.style.display="none"},getProjectFormData:function(){var t;(t=d).querySelectorAll(".form-input, .form-select").forEach((function(t){t.classList.remove("is-invalid")})),t.querySelectorAll(".error-message").forEach((function(t){t.textContent=""}));var n=!0,e=c.value.trim(),o=s.value;return e||(function(t){t.classList.add("is-invalid");var n=t.parentElement.querySelector(".help-message");n&&n.remove();var e=t.parentElement.querySelector(".error-message");e&&(e.textContent="Project name is required.")}(c),n=!1),n?{id:o,name:e}:null},getTodoFormData:function(){var t=m.value.trim(),n=p.value.trim(),e=g.value,o=h.value,r=b.value.trim(),a=f.value,i=A.dataset.currentProjectId;return t?{id:a,title:t,description:n,dueDate:e,priority:o,tagsString:r,currentProjectId:i}:(bt.showNotification("Task name is required.","warning"),null)},clearElement:S,showNotification:function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"info";if(!a)return console.warn("Notification area not found. Message:",t),void alert(t);var e=document.createElement("div");e.classList.add("notification",n),e.textContent=t,a.appendChild(e),e.addEventListener("animationend",(function(t){"fadeOutNotification"===t.animationName&&e.remove()}))},initializeUI:function(){D("Loading projects..."),S(r);var t=document.createElement("li");t.textContent="Select or add a project to see your tasks.",r.appendChild(t),o.style.display="none"},elements:{projectModal:i,todoModal:u,projectsListUL:t,todosListUL:r,addProjectBtn:n,addTodoBtn:o,projectForm:d,todoForm:A,closeProjectModalBtn:l,closeTodoModalBtn:E}}}();const yt=bt;var Et=e(72),vt=e.n(Et),Ct=e(825),Bt=e.n(Ct),wt=e(659),xt=e.n(wt),kt=e(56),jt=e.n(kt),Tt=e(540),Pt=e.n(Tt),Mt=e(113),St=e.n(Mt),Dt=e(208),Nt={};Nt.styleTagTransform=St(),Nt.setAttributes=jt(),Nt.insert=xt().bind(null,"head"),Nt.domAPI=Bt(),Nt.insertStyleElement=Pt(),vt()(Dt.A,Nt),Dt.A&&Dt.A.locals&&Dt.A.locals,document.addEventListener("DOMContentLoaded",(function(){yt.initializeUI(),n();var t=h.getCurrentProject();function n(){var t=h.getAllProjects(),n=h.getCurrentProject();yt.renderProjects(t,n?n.id:null)}function e(){var t=h.getCurrentProject();if(t){var n=h.findProjectById(t.id);yt.renderTodos(n)}else yt.renderTodos(null),yt.updateProjectTitle("Select a project")}if(t?yt.renderTodos(t):(yt.updateProjectTitle("No projects found. Please add one."),yt.renderTodos(null)),yt.elements.addProjectBtn.addEventListener("click",(function(){yt.openProjectModal()})),yt.elements.closeProjectModalBtn.addEventListener("click",(function(){yt.closeProjectModal()})),yt.elements.projectForm.addEventListener("submit",(function(t){t.preventDefault();var o=yt.getProjectFormData();if(o){var r=h.addProject(o.name);r?(h.setCurrentProject(r.id),n(),e(),yt.showNotification("Project added.","success"),yt.closeProjectModal()):yt.showNotification("Unable to create project. The project name already exists.","error")}})),yt.elements.projectsListUL.addEventListener("click",(function(t){if("LI"===t.target.tagName&&t.target.dataset.projectId){var o=t.target.dataset.projectId;h.setCurrentProject(o),n(),e()}})),yt.elements.addTodoBtn.addEventListener("click",(function(){var t=h.getCurrentProject();t?yt.openTodoModal(null,t.id):yt.showNotification("Please select a project before adding a task.","warning")})),yt.elements.closeTodoModalBtn.addEventListener("click",(function(){yt.closeTodoModal()})),yt.elements.todoForm.addEventListener("submit",(function(t){t.preventDefault();var n=yt.getTodoFormData();n&&(n.id?(h.updateTodoInProject(n.currentProjectId,n.id,n),yt.showNotification("Task updated.","success")):(h.addTodoToProject(n.currentProjectId,n),yt.showNotification("Task added.","success")),e(),yt.closeTodoModal())})),yt.elements.todosListUL.addEventListener("click",(function(t){var n,o=t.target,r=null===(n=o.closest("li"))||void 0===n?void 0:n.dataset.todoId,a=h.getCurrentProject();if(r&&a){var i=a.id;if(o.classList.contains("delete-todo-btn"))confirm("You will permanently delete this task.")&&(h.removeTodoFromProject(i,r),e());else if(o.classList.contains("edit-todo-btn")){var d,s=null===(d=h.findProjectById(i))||void 0===d?void 0:d.getTodoById(r);s&&yt.openTodoModal(s,i)}else o.classList.contains("todo-checkbox")&&(h.toggleTodoComplete(i,r),e())}})),window.addEventListener("click",(function(t){t.target===yt.elements.projectModal&&yt.closeProjectModal(),t.target===yt.elements.todoModal&&yt.closeTodoModal()})),h.getCurrentProject())e();else if(h.getAllProjects().length>0){var o=h.getAllProjects()[0];h.setCurrentProject(o.id),n(),e()}else yt.updateProjectTitle("Add a project"),yt.renderTodos(null)}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,