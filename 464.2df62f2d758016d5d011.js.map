{"version":3,"file":"464.2df62f2d758016d5d011.js","mappings":"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","sources":["webpack://todo-list/./node_modules/date-fns/startOfISOWeek.js","webpack://todo-list/./node_modules/date-fns/differenceInCalendarDays.js","webpack://todo-list/./node_modules/date-fns/getDayOfYear.js","webpack://todo-list/./node_modules/date-fns/_lib/normalizeDates.js","webpack://todo-list/./node_modules/date-fns/startOfYear.js","webpack://todo-list/./node_modules/date-fns/_lib/addLeadingZeros.js","webpack://todo-list/./node_modules/date-fns/_lib/format/lightFormatters.js","webpack://todo-list/./node_modules/date-fns/_lib/format/formatters.js","webpack://todo-list/./node_modules/date-fns/format.js","webpack://todo-list/./node_modules/date-fns/_lib/getTimezoneOffsetInMilliseconds.js","webpack://todo-list/./node_modules/date-fns/locale/en-US/_lib/formatDistance.js","webpack://todo-list/./node_modules/date-fns/locale/_lib/buildFormatLongFn.js","webpack://todo-list/./node_modules/date-fns/locale/en-US/_lib/formatLong.js","webpack://todo-list/./node_modules/date-fns/locale/en-US/_lib/formatRelative.js","webpack://todo-list/./node_modules/date-fns/locale/_lib/buildLocalizeFn.js","webpack://todo-list/./node_modules/date-fns/locale/_lib/buildMatchFn.js","webpack://todo-list/./node_modules/date-fns/locale/_lib/buildMatchPatternFn.js","webpack://todo-list/./node_modules/date-fns/locale/en-US.js","webpack://todo-list/./node_modules/date-fns/locale/en-US/_lib/localize.js","webpack://todo-list/./node_modules/date-fns/locale/en-US/_lib/match.js","webpack://todo-list/./node_modules/date-fns/_lib/protectedTokens.js","webpack://todo-list/./node_modules/date-fns/constructFrom.js","webpack://todo-list/./node_modules/date-fns/startOfWeek.js","webpack://todo-list/./node_modules/date-fns/toDate.js","webpack://todo-list/./node_modules/date-fns/startOfWeekYear.js","webpack://todo-list/./node_modules/date-fns/getWeek.js","webpack://todo-list/./node_modules/date-fns/startOfDay.js","webpack://todo-list/./node_modules/date-fns/getWeekYear.js","webpack://todo-list/./node_modules/date-fns/constants.js","webpack://todo-list/./node_modules/date-fns/_lib/defaultOptions.js","webpack://todo-list/./node_modules/date-fns/isEqual.js","webpack://todo-list/./node_modules/date-fns/_lib/format/longFormatters.js","webpack://todo-list/./node_modules/date-fns/isDate.js","webpack://todo-list/./node_modules/date-fns/isValid.js","webpack://todo-list/./node_modules/date-fns/startOfISOWeekYear.js","webpack://todo-list/./node_modules/date-fns/getISOWeek.js","webpack://todo-list/./node_modules/date-fns/getDefaultOptions.js","webpack://todo-list/./node_modules/date-fns/parse/_lib/Setter.js","webpack://todo-list/./node_modules/date-fns/transpose.js","webpack://todo-list/./node_modules/date-fns/parse/_lib/Parser.js","webpack://todo-list/./node_modules/date-fns/parse/_lib/constants.js","webpack://todo-list/./node_modules/date-fns/parse/_lib/utils.js","webpack://todo-list/./node_modules/date-fns/parse/_lib/parsers/DateParser.js","webpack://todo-list/./node_modules/date-fns/addDays.js","webpack://todo-list/./node_modules/date-fns/setDay.js","webpack://todo-list/./node_modules/date-fns/setISODay.js","webpack://todo-list/./node_modules/date-fns/getISODay.js","webpack://todo-list/./node_modules/date-fns/parse/_lib/parsers.js","webpack://todo-list/./node_modules/date-fns/parse/_lib/parsers/EraParser.js","webpack://todo-list/./node_modules/date-fns/parse/_lib/parsers/YearParser.js","webpack://todo-list/./node_modules/date-fns/parse/_lib/parsers/LocalWeekYearParser.js","webpack://todo-list/./node_modules/date-fns/parse/_lib/parsers/ISOWeekYearParser.js","webpack://todo-list/./node_modules/date-fns/parse/_lib/parsers/ExtendedYearParser.js","webpack://todo-list/./node_modules/date-fns/parse/_lib/parsers/QuarterParser.js","webpack://todo-list/./node_modules/date-fns/parse/_lib/parsers/StandAloneQuarterParser.js","webpack://todo-list/./node_modules/date-fns/parse/_lib/parsers/MonthParser.js","webpack://todo-list/./node_modules/date-fns/parse/_lib/parsers/StandAloneMonthParser.js","webpack://todo-list/./node_modules/date-fns/parse/_lib/parsers/LocalWeekParser.js","webpack://todo-list/./node_modules/date-fns/setWeek.js","webpack://todo-list/./node_modules/date-fns/parse/_lib/parsers/ISOWeekParser.js","webpack://todo-list/./node_modules/date-fns/setISOWeek.js","webpack://todo-list/./node_modules/date-fns/parse/_lib/parsers/DayOfYearParser.js","webpack://todo-list/./node_modules/date-fns/parse/_lib/parsers/DayParser.js","webpack://todo-list/./node_modules/date-fns/parse/_lib/parsers/LocalDayParser.js","webpack://todo-list/./node_modules/date-fns/parse/_lib/parsers/StandAloneLocalDayParser.js","webpack://todo-list/./node_modules/date-fns/parse/_lib/parsers/ISODayParser.js","webpack://todo-list/./node_modules/date-fns/parse/_lib/parsers/AMPMParser.js","webpack://todo-list/./node_modules/date-fns/parse/_lib/parsers/AMPMMidnightParser.js","webpack://todo-list/./node_modules/date-fns/parse/_lib/parsers/DayPeriodParser.js","webpack://todo-list/./node_modules/date-fns/parse/_lib/parsers/Hour1to12Parser.js","webpack://todo-list/./node_modules/date-fns/parse/_lib/parsers/Hour0to23Parser.js","webpack://todo-list/./node_modules/date-fns/parse/_lib/parsers/Hour0To11Parser.js","webpack://todo-list/./node_modules/date-fns/parse/_lib/parsers/Hour1To24Parser.js","webpack://todo-list/./node_modules/date-fns/parse/_lib/parsers/MinuteParser.js","webpack://todo-list/./node_modules/date-fns/parse/_lib/parsers/SecondParser.js","webpack://todo-list/./node_modules/date-fns/parse/_lib/parsers/FractionOfSecondParser.js","webpack://todo-list/./node_modules/date-fns/parse/_lib/parsers/ISOTimezoneWithZParser.js","webpack://todo-list/./node_modules/date-fns/parse/_lib/parsers/ISOTimezoneParser.js","webpack://todo-list/./node_modules/date-fns/parse/_lib/parsers/TimestampSecondsParser.js","webpack://todo-list/./node_modules/date-fns/parse/_lib/parsers/TimestampMillisecondsParser.js","webpack://todo-list/./node_modules/date-fns/parse.js","webpack://todo-list/./node_modules/date-fns/getISOWeekYear.js"],"sourcesContent":["import { startOfWeek } from \"./startOfWeek.js\";\n\n/**\n * The {@link startOfISOWeek} function options.\n */\n\n/**\n * @name startOfISOWeek\n * @category ISO Week Helpers\n * @summary Return the start of an ISO week for the given date.\n *\n * @description\n * Return the start of an ISO week for the given date.\n * The result will be in the local timezone.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The start of an ISO week\n *\n * @example\n * // The start of an ISO week for 2 September 2014 11:55:00:\n * const result = startOfISOWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Mon Sep 01 2014 00:00:00\n */\nexport function startOfISOWeek(date, options) {\n  return startOfWeek(date, { ...options, weekStartsOn: 1 });\n}\n\n// Fallback for modularized imports:\nexport default startOfISOWeek;\n","import { getTimezoneOffsetInMilliseconds } from \"./_lib/getTimezoneOffsetInMilliseconds.js\";\nimport { normalizeDates } from \"./_lib/normalizeDates.js\";\nimport { millisecondsInDay } from \"./constants.js\";\nimport { startOfDay } from \"./startOfDay.js\";\n\n/**\n * The {@link differenceInCalendarDays} function options.\n */\n\n/**\n * @name differenceInCalendarDays\n * @category Day Helpers\n * @summary Get the number of calendar days between the given dates.\n *\n * @description\n * Get the number of calendar days between the given dates. This means that the times are removed\n * from the dates and then the difference in days is calculated.\n *\n * @param laterDate - The later date\n * @param earlierDate - The earlier date\n * @param options - The options object\n *\n * @returns The number of calendar days\n *\n * @example\n * // How many calendar days are between\n * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?\n * const result = differenceInCalendarDays(\n *   new Date(2012, 6, 2, 0, 0),\n *   new Date(2011, 6, 2, 23, 0)\n * )\n * //=> 366\n * // How many calendar days are between\n * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?\n * const result = differenceInCalendarDays(\n *   new Date(2011, 6, 3, 0, 1),\n *   new Date(2011, 6, 2, 23, 59)\n * )\n * //=> 1\n */\nexport function differenceInCalendarDays(laterDate, earlierDate, options) {\n  const [laterDate_, earlierDate_] = normalizeDates(\n    options?.in,\n    laterDate,\n    earlierDate,\n  );\n\n  const laterStartOfDay = startOfDay(laterDate_);\n  const earlierStartOfDay = startOfDay(earlierDate_);\n\n  const laterTimestamp =\n    +laterStartOfDay - getTimezoneOffsetInMilliseconds(laterStartOfDay);\n  const earlierTimestamp =\n    +earlierStartOfDay - getTimezoneOffsetInMilliseconds(earlierStartOfDay);\n\n  // Round the number of days to the nearest integer because the number of\n  // milliseconds in a day is not constant (e.g. it's different in the week of\n  // the daylight saving time clock shift).\n  return Math.round((laterTimestamp - earlierTimestamp) / millisecondsInDay);\n}\n\n// Fallback for modularized imports:\nexport default differenceInCalendarDays;\n","import { differenceInCalendarDays } from \"./differenceInCalendarDays.js\";\nimport { startOfYear } from \"./startOfYear.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link getDayOfYear} function options.\n */\n\n/**\n * @name getDayOfYear\n * @category Day Helpers\n * @summary Get the day of the year of the given date.\n *\n * @description\n * Get the day of the year of the given date.\n *\n * @param date - The given date\n * @param options - The options\n *\n * @returns The day of year\n *\n * @example\n * // Which day of the year is 2 July 2014?\n * const result = getDayOfYear(new Date(2014, 6, 2))\n * //=> 183\n */\nexport function getDayOfYear(date, options) {\n  const _date = toDate(date, options?.in);\n  const diff = differenceInCalendarDays(_date, startOfYear(_date));\n  const dayOfYear = diff + 1;\n  return dayOfYear;\n}\n\n// Fallback for modularized imports:\nexport default getDayOfYear;\n","import { constructFrom } from \"../constructFrom.js\";\n\nexport function normalizeDates(context, ...dates) {\n  const normalize = constructFrom.bind(\n    null,\n    context || dates.find((date) => typeof date === \"object\"),\n  );\n  return dates.map(normalize);\n}\n","import { toDate } from \"./toDate.js\";\n\n/**\n * The {@link startOfYear} function options.\n */\n\n/**\n * @name startOfYear\n * @category Year Helpers\n * @summary Return the start of a year for the given date.\n *\n * @description\n * Return the start of a year for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - The options\n *\n * @returns The start of a year\n *\n * @example\n * // The start of a year for 2 September 2014 11:55:00:\n * const result = startOfYear(new Date(2014, 8, 2, 11, 55, 00))\n * //=> Wed Jan 01 2014 00:00:00\n */\nexport function startOfYear(date, options) {\n  const date_ = toDate(date, options?.in);\n  date_.setFullYear(date_.getFullYear(), 0, 1);\n  date_.setHours(0, 0, 0, 0);\n  return date_;\n}\n\n// Fallback for modularized imports:\nexport default startOfYear;\n","export function addLeadingZeros(number, targetLength) {\n  const sign = number < 0 ? \"-\" : \"\";\n  const output = Math.abs(number).toString().padStart(targetLength, \"0\");\n  return sign + output;\n}\n","import { addLeadingZeros } from \"../addLeadingZeros.js\";\n\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* |                                |\n * |  d  | Day of month                   |  D  |                                |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  m  | Minute                         |  M  | Month                          |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  y  | Year (abs)                     |  Y  |                                |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n */\n\nexport const lightFormatters = {\n  // Year\n  y(date, token) {\n    // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_tokens\n    // | Year     |     y | yy |   yyy |  yyyy | yyyyy |\n    // |----------|-------|----|-------|-------|-------|\n    // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |\n    // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |\n    // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |\n    // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |\n    // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |\n\n    const signedYear = date.getFullYear();\n    // Returns 1 for 1 BC (which is year 0 in JavaScript)\n    const year = signedYear > 0 ? signedYear : 1 - signedYear;\n    return addLeadingZeros(token === \"yy\" ? year % 100 : year, token.length);\n  },\n\n  // Month\n  M(date, token) {\n    const month = date.getMonth();\n    return token === \"M\" ? String(month + 1) : addLeadingZeros(month + 1, 2);\n  },\n\n  // Day of the month\n  d(date, token) {\n    return addLeadingZeros(date.getDate(), token.length);\n  },\n\n  // AM or PM\n  a(date, token) {\n    const dayPeriodEnumValue = date.getHours() / 12 >= 1 ? \"pm\" : \"am\";\n\n    switch (token) {\n      case \"a\":\n      case \"aa\":\n        return dayPeriodEnumValue.toUpperCase();\n      case \"aaa\":\n        return dayPeriodEnumValue;\n      case \"aaaaa\":\n        return dayPeriodEnumValue[0];\n      case \"aaaa\":\n      default:\n        return dayPeriodEnumValue === \"am\" ? \"a.m.\" : \"p.m.\";\n    }\n  },\n\n  // Hour [1-12]\n  h(date, token) {\n    return addLeadingZeros(date.getHours() % 12 || 12, token.length);\n  },\n\n  // Hour [0-23]\n  H(date, token) {\n    return addLeadingZeros(date.getHours(), token.length);\n  },\n\n  // Minute\n  m(date, token) {\n    return addLeadingZeros(date.getMinutes(), token.length);\n  },\n\n  // Second\n  s(date, token) {\n    return addLeadingZeros(date.getSeconds(), token.length);\n  },\n\n  // Fraction of second\n  S(date, token) {\n    const numberOfDigits = token.length;\n    const milliseconds = date.getMilliseconds();\n    const fractionalSeconds = Math.trunc(\n      milliseconds * Math.pow(10, numberOfDigits - 3),\n    );\n    return addLeadingZeros(fractionalSeconds, token.length);\n  },\n};\n","import { getDayOfYear } from \"../../getDayOfYear.js\";\nimport { getISOWeek } from \"../../getISOWeek.js\";\nimport { getISOWeekYear } from \"../../getISOWeekYear.js\";\nimport { getWeek } from \"../../getWeek.js\";\nimport { getWeekYear } from \"../../getWeekYear.js\";\n\nimport { addLeadingZeros } from \"../addLeadingZeros.js\";\nimport { lightFormatters } from \"./lightFormatters.js\";\n\nconst dayPeriodEnum = {\n  am: \"am\",\n  pm: \"pm\",\n  midnight: \"midnight\",\n  noon: \"noon\",\n  morning: \"morning\",\n  afternoon: \"afternoon\",\n  evening: \"evening\",\n  night: \"night\",\n};\n\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* | Milliseconds in day            |\n * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |\n * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |\n * |  d  | Day of month                   |  D  | Day of year                    |\n * |  e  | Local day of week              |  E  | Day of week                    |\n * |  f  |                                |  F* | Day of week in month           |\n * |  g* | Modified Julian day            |  G  | Era                            |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  i! | ISO day of week                |  I! | ISO week of year               |\n * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |\n * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |\n * |  l* | (deprecated)                   |  L  | Stand-alone month              |\n * |  m  | Minute                         |  M  | Month                          |\n * |  n  |                                |  N  |                                |\n * |  o! | Ordinal number modifier        |  O  | Timezone (GMT)                 |\n * |  p! | Long localized time            |  P! | Long localized date            |\n * |  q  | Stand-alone quarter            |  Q  | Quarter                        |\n * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |\n * |  u  | Extended year                  |  U* | Cyclic year                    |\n * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |\n * |  w  | Local week of year             |  W* | Week of month                  |\n * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |\n * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |\n * |  z  | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n *\n * Letters marked by ! are non-standard, but implemented by date-fns:\n * - `o` modifies the previous token to turn it into an ordinal (see `format` docs)\n * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,\n *   i.e. 7 for Sunday, 1 for Monday, etc.\n * - `I` is ISO week of year, as opposed to `w` which is local week of year.\n * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.\n *   `R` is supposed to be used in conjunction with `I` and `i`\n *   for universal ISO week-numbering date, whereas\n *   `Y` is supposed to be used in conjunction with `w` and `e`\n *   for week-numbering date specific to the locale.\n * - `P` is long localized date format\n * - `p` is long localized time format\n */\n\nexport const formatters = {\n  // Era\n  G: function (date, token, localize) {\n    const era = date.getFullYear() > 0 ? 1 : 0;\n    switch (token) {\n      // AD, BC\n      case \"G\":\n      case \"GG\":\n      case \"GGG\":\n        return localize.era(era, { width: \"abbreviated\" });\n      // A, B\n      case \"GGGGG\":\n        return localize.era(era, { width: \"narrow\" });\n      // Anno Domini, Before Christ\n      case \"GGGG\":\n      default:\n        return localize.era(era, { width: \"wide\" });\n    }\n  },\n\n  // Year\n  y: function (date, token, localize) {\n    // Ordinal number\n    if (token === \"yo\") {\n      const signedYear = date.getFullYear();\n      // Returns 1 for 1 BC (which is year 0 in JavaScript)\n      const year = signedYear > 0 ? signedYear : 1 - signedYear;\n      return localize.ordinalNumber(year, { unit: \"year\" });\n    }\n\n    return lightFormatters.y(date, token);\n  },\n\n  // Local week-numbering year\n  Y: function (date, token, localize, options) {\n    const signedWeekYear = getWeekYear(date, options);\n    // Returns 1 for 1 BC (which is year 0 in JavaScript)\n    const weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear;\n\n    // Two digit year\n    if (token === \"YY\") {\n      const twoDigitYear = weekYear % 100;\n      return addLeadingZeros(twoDigitYear, 2);\n    }\n\n    // Ordinal number\n    if (token === \"Yo\") {\n      return localize.ordinalNumber(weekYear, { unit: \"year\" });\n    }\n\n    // Padding\n    return addLeadingZeros(weekYear, token.length);\n  },\n\n  // ISO week-numbering year\n  R: function (date, token) {\n    const isoWeekYear = getISOWeekYear(date);\n\n    // Padding\n    return addLeadingZeros(isoWeekYear, token.length);\n  },\n\n  // Extended year. This is a single number designating the year of this calendar system.\n  // The main difference between `y` and `u` localizers are B.C. years:\n  // | Year | `y` | `u` |\n  // |------|-----|-----|\n  // | AC 1 |   1 |   1 |\n  // | BC 1 |   1 |   0 |\n  // | BC 2 |   2 |  -1 |\n  // Also `yy` always returns the last two digits of a year,\n  // while `uu` pads single digit years to 2 characters and returns other years unchanged.\n  u: function (date, token) {\n    const year = date.getFullYear();\n    return addLeadingZeros(year, token.length);\n  },\n\n  // Quarter\n  Q: function (date, token, localize) {\n    const quarter = Math.ceil((date.getMonth() + 1) / 3);\n    switch (token) {\n      // 1, 2, 3, 4\n      case \"Q\":\n        return String(quarter);\n      // 01, 02, 03, 04\n      case \"QQ\":\n        return addLeadingZeros(quarter, 2);\n      // 1st, 2nd, 3rd, 4th\n      case \"Qo\":\n        return localize.ordinalNumber(quarter, { unit: \"quarter\" });\n      // Q1, Q2, Q3, Q4\n      case \"QQQ\":\n        return localize.quarter(quarter, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n      case \"QQQQQ\":\n        return localize.quarter(quarter, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // 1st quarter, 2nd quarter, ...\n      case \"QQQQ\":\n      default:\n        return localize.quarter(quarter, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // Stand-alone quarter\n  q: function (date, token, localize) {\n    const quarter = Math.ceil((date.getMonth() + 1) / 3);\n    switch (token) {\n      // 1, 2, 3, 4\n      case \"q\":\n        return String(quarter);\n      // 01, 02, 03, 04\n      case \"qq\":\n        return addLeadingZeros(quarter, 2);\n      // 1st, 2nd, 3rd, 4th\n      case \"qo\":\n        return localize.ordinalNumber(quarter, { unit: \"quarter\" });\n      // Q1, Q2, Q3, Q4\n      case \"qqq\":\n        return localize.quarter(quarter, {\n          width: \"abbreviated\",\n          context: \"standalone\",\n        });\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n      case \"qqqqq\":\n        return localize.quarter(quarter, {\n          width: \"narrow\",\n          context: \"standalone\",\n        });\n      // 1st quarter, 2nd quarter, ...\n      case \"qqqq\":\n      default:\n        return localize.quarter(quarter, {\n          width: \"wide\",\n          context: \"standalone\",\n        });\n    }\n  },\n\n  // Month\n  M: function (date, token, localize) {\n    const month = date.getMonth();\n    switch (token) {\n      case \"M\":\n      case \"MM\":\n        return lightFormatters.M(date, token);\n      // 1st, 2nd, ..., 12th\n      case \"Mo\":\n        return localize.ordinalNumber(month + 1, { unit: \"month\" });\n      // Jan, Feb, ..., Dec\n      case \"MMM\":\n        return localize.month(month, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      // J, F, ..., D\n      case \"MMMMM\":\n        return localize.month(month, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // January, February, ..., December\n      case \"MMMM\":\n      default:\n        return localize.month(month, { width: \"wide\", context: \"formatting\" });\n    }\n  },\n\n  // Stand-alone month\n  L: function (date, token, localize) {\n    const month = date.getMonth();\n    switch (token) {\n      // 1, 2, ..., 12\n      case \"L\":\n        return String(month + 1);\n      // 01, 02, ..., 12\n      case \"LL\":\n        return addLeadingZeros(month + 1, 2);\n      // 1st, 2nd, ..., 12th\n      case \"Lo\":\n        return localize.ordinalNumber(month + 1, { unit: \"month\" });\n      // Jan, Feb, ..., Dec\n      case \"LLL\":\n        return localize.month(month, {\n          width: \"abbreviated\",\n          context: \"standalone\",\n        });\n      // J, F, ..., D\n      case \"LLLLL\":\n        return localize.month(month, {\n          width: \"narrow\",\n          context: \"standalone\",\n        });\n      // January, February, ..., December\n      case \"LLLL\":\n      default:\n        return localize.month(month, { width: \"wide\", context: \"standalone\" });\n    }\n  },\n\n  // Local week of year\n  w: function (date, token, localize, options) {\n    const week = getWeek(date, options);\n\n    if (token === \"wo\") {\n      return localize.ordinalNumber(week, { unit: \"week\" });\n    }\n\n    return addLeadingZeros(week, token.length);\n  },\n\n  // ISO week of year\n  I: function (date, token, localize) {\n    const isoWeek = getISOWeek(date);\n\n    if (token === \"Io\") {\n      return localize.ordinalNumber(isoWeek, { unit: \"week\" });\n    }\n\n    return addLeadingZeros(isoWeek, token.length);\n  },\n\n  // Day of the month\n  d: function (date, token, localize) {\n    if (token === \"do\") {\n      return localize.ordinalNumber(date.getDate(), { unit: \"date\" });\n    }\n\n    return lightFormatters.d(date, token);\n  },\n\n  // Day of year\n  D: function (date, token, localize) {\n    const dayOfYear = getDayOfYear(date);\n\n    if (token === \"Do\") {\n      return localize.ordinalNumber(dayOfYear, { unit: \"dayOfYear\" });\n    }\n\n    return addLeadingZeros(dayOfYear, token.length);\n  },\n\n  // Day of week\n  E: function (date, token, localize) {\n    const dayOfWeek = date.getDay();\n    switch (token) {\n      // Tue\n      case \"E\":\n      case \"EE\":\n      case \"EEE\":\n        return localize.day(dayOfWeek, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      // T\n      case \"EEEEE\":\n        return localize.day(dayOfWeek, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // Tu\n      case \"EEEEEE\":\n        return localize.day(dayOfWeek, {\n          width: \"short\",\n          context: \"formatting\",\n        });\n      // Tuesday\n      case \"EEEE\":\n      default:\n        return localize.day(dayOfWeek, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // Local day of week\n  e: function (date, token, localize, options) {\n    const dayOfWeek = date.getDay();\n    const localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;\n    switch (token) {\n      // Numerical value (Nth day of week with current locale or weekStartsOn)\n      case \"e\":\n        return String(localDayOfWeek);\n      // Padded numerical value\n      case \"ee\":\n        return addLeadingZeros(localDayOfWeek, 2);\n      // 1st, 2nd, ..., 7th\n      case \"eo\":\n        return localize.ordinalNumber(localDayOfWeek, { unit: \"day\" });\n      case \"eee\":\n        return localize.day(dayOfWeek, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      // T\n      case \"eeeee\":\n        return localize.day(dayOfWeek, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // Tu\n      case \"eeeeee\":\n        return localize.day(dayOfWeek, {\n          width: \"short\",\n          context: \"formatting\",\n        });\n      // Tuesday\n      case \"eeee\":\n      default:\n        return localize.day(dayOfWeek, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // Stand-alone local day of week\n  c: function (date, token, localize, options) {\n    const dayOfWeek = date.getDay();\n    const localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;\n    switch (token) {\n      // Numerical value (same as in `e`)\n      case \"c\":\n        return String(localDayOfWeek);\n      // Padded numerical value\n      case \"cc\":\n        return addLeadingZeros(localDayOfWeek, token.length);\n      // 1st, 2nd, ..., 7th\n      case \"co\":\n        return localize.ordinalNumber(localDayOfWeek, { unit: \"day\" });\n      case \"ccc\":\n        return localize.day(dayOfWeek, {\n          width: \"abbreviated\",\n          context: \"standalone\",\n        });\n      // T\n      case \"ccccc\":\n        return localize.day(dayOfWeek, {\n          width: \"narrow\",\n          context: \"standalone\",\n        });\n      // Tu\n      case \"cccccc\":\n        return localize.day(dayOfWeek, {\n          width: \"short\",\n          context: \"standalone\",\n        });\n      // Tuesday\n      case \"cccc\":\n      default:\n        return localize.day(dayOfWeek, {\n          width: \"wide\",\n          context: \"standalone\",\n        });\n    }\n  },\n\n  // ISO day of week\n  i: function (date, token, localize) {\n    const dayOfWeek = date.getDay();\n    const isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;\n    switch (token) {\n      // 2\n      case \"i\":\n        return String(isoDayOfWeek);\n      // 02\n      case \"ii\":\n        return addLeadingZeros(isoDayOfWeek, token.length);\n      // 2nd\n      case \"io\":\n        return localize.ordinalNumber(isoDayOfWeek, { unit: \"day\" });\n      // Tue\n      case \"iii\":\n        return localize.day(dayOfWeek, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      // T\n      case \"iiiii\":\n        return localize.day(dayOfWeek, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // Tu\n      case \"iiiiii\":\n        return localize.day(dayOfWeek, {\n          width: \"short\",\n          context: \"formatting\",\n        });\n      // Tuesday\n      case \"iiii\":\n      default:\n        return localize.day(dayOfWeek, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // AM or PM\n  a: function (date, token, localize) {\n    const hours = date.getHours();\n    const dayPeriodEnumValue = hours / 12 >= 1 ? \"pm\" : \"am\";\n\n    switch (token) {\n      case \"a\":\n      case \"aa\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      case \"aaa\":\n        return localize\n          .dayPeriod(dayPeriodEnumValue, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          })\n          .toLowerCase();\n      case \"aaaaa\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      case \"aaaa\":\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // AM, PM, midnight, noon\n  b: function (date, token, localize) {\n    const hours = date.getHours();\n    let dayPeriodEnumValue;\n    if (hours === 12) {\n      dayPeriodEnumValue = dayPeriodEnum.noon;\n    } else if (hours === 0) {\n      dayPeriodEnumValue = dayPeriodEnum.midnight;\n    } else {\n      dayPeriodEnumValue = hours / 12 >= 1 ? \"pm\" : \"am\";\n    }\n\n    switch (token) {\n      case \"b\":\n      case \"bb\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      case \"bbb\":\n        return localize\n          .dayPeriod(dayPeriodEnumValue, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          })\n          .toLowerCase();\n      case \"bbbbb\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      case \"bbbb\":\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // in the morning, in the afternoon, in the evening, at night\n  B: function (date, token, localize) {\n    const hours = date.getHours();\n    let dayPeriodEnumValue;\n    if (hours >= 17) {\n      dayPeriodEnumValue = dayPeriodEnum.evening;\n    } else if (hours >= 12) {\n      dayPeriodEnumValue = dayPeriodEnum.afternoon;\n    } else if (hours >= 4) {\n      dayPeriodEnumValue = dayPeriodEnum.morning;\n    } else {\n      dayPeriodEnumValue = dayPeriodEnum.night;\n    }\n\n    switch (token) {\n      case \"B\":\n      case \"BB\":\n      case \"BBB\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      case \"BBBBB\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      case \"BBBB\":\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // Hour [1-12]\n  h: function (date, token, localize) {\n    if (token === \"ho\") {\n      let hours = date.getHours() % 12;\n      if (hours === 0) hours = 12;\n      return localize.ordinalNumber(hours, { unit: \"hour\" });\n    }\n\n    return lightFormatters.h(date, token);\n  },\n\n  // Hour [0-23]\n  H: function (date, token, localize) {\n    if (token === \"Ho\") {\n      return localize.ordinalNumber(date.getHours(), { unit: \"hour\" });\n    }\n\n    return lightFormatters.H(date, token);\n  },\n\n  // Hour [0-11]\n  K: function (date, token, localize) {\n    const hours = date.getHours() % 12;\n\n    if (token === \"Ko\") {\n      return localize.ordinalNumber(hours, { unit: \"hour\" });\n    }\n\n    return addLeadingZeros(hours, token.length);\n  },\n\n  // Hour [1-24]\n  k: function (date, token, localize) {\n    let hours = date.getHours();\n    if (hours === 0) hours = 24;\n\n    if (token === \"ko\") {\n      return localize.ordinalNumber(hours, { unit: \"hour\" });\n    }\n\n    return addLeadingZeros(hours, token.length);\n  },\n\n  // Minute\n  m: function (date, token, localize) {\n    if (token === \"mo\") {\n      return localize.ordinalNumber(date.getMinutes(), { unit: \"minute\" });\n    }\n\n    return lightFormatters.m(date, token);\n  },\n\n  // Second\n  s: function (date, token, localize) {\n    if (token === \"so\") {\n      return localize.ordinalNumber(date.getSeconds(), { unit: \"second\" });\n    }\n\n    return lightFormatters.s(date, token);\n  },\n\n  // Fraction of second\n  S: function (date, token) {\n    return lightFormatters.S(date, token);\n  },\n\n  // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)\n  X: function (date, token, _localize) {\n    const timezoneOffset = date.getTimezoneOffset();\n\n    if (timezoneOffset === 0) {\n      return \"Z\";\n    }\n\n    switch (token) {\n      // Hours and optional minutes\n      case \"X\":\n        return formatTimezoneWithOptionalMinutes(timezoneOffset);\n\n      // Hours, minutes and optional seconds without `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `XX`\n      case \"XXXX\":\n      case \"XX\": // Hours and minutes without `:` delimiter\n        return formatTimezone(timezoneOffset);\n\n      // Hours, minutes and optional seconds with `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `XXX`\n      case \"XXXXX\":\n      case \"XXX\": // Hours and minutes with `:` delimiter\n      default:\n        return formatTimezone(timezoneOffset, \":\");\n    }\n  },\n\n  // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)\n  x: function (date, token, _localize) {\n    const timezoneOffset = date.getTimezoneOffset();\n\n    switch (token) {\n      // Hours and optional minutes\n      case \"x\":\n        return formatTimezoneWithOptionalMinutes(timezoneOffset);\n\n      // Hours, minutes and optional seconds without `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `xx`\n      case \"xxxx\":\n      case \"xx\": // Hours and minutes without `:` delimiter\n        return formatTimezone(timezoneOffset);\n\n      // Hours, minutes and optional seconds with `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `xxx`\n      case \"xxxxx\":\n      case \"xxx\": // Hours and minutes with `:` delimiter\n      default:\n        return formatTimezone(timezoneOffset, \":\");\n    }\n  },\n\n  // Timezone (GMT)\n  O: function (date, token, _localize) {\n    const timezoneOffset = date.getTimezoneOffset();\n\n    switch (token) {\n      // Short\n      case \"O\":\n      case \"OO\":\n      case \"OOO\":\n        return \"GMT\" + formatTimezoneShort(timezoneOffset, \":\");\n      // Long\n      case \"OOOO\":\n      default:\n        return \"GMT\" + formatTimezone(timezoneOffset, \":\");\n    }\n  },\n\n  // Timezone (specific non-location)\n  z: function (date, token, _localize) {\n    const timezoneOffset = date.getTimezoneOffset();\n\n    switch (token) {\n      // Short\n      case \"z\":\n      case \"zz\":\n      case \"zzz\":\n        return \"GMT\" + formatTimezoneShort(timezoneOffset, \":\");\n      // Long\n      case \"zzzz\":\n      default:\n        return \"GMT\" + formatTimezone(timezoneOffset, \":\");\n    }\n  },\n\n  // Seconds timestamp\n  t: function (date, token, _localize) {\n    const timestamp = Math.trunc(+date / 1000);\n    return addLeadingZeros(timestamp, token.length);\n  },\n\n  // Milliseconds timestamp\n  T: function (date, token, _localize) {\n    return addLeadingZeros(+date, token.length);\n  },\n};\n\nfunction formatTimezoneShort(offset, delimiter = \"\") {\n  const sign = offset > 0 ? \"-\" : \"+\";\n  const absOffset = Math.abs(offset);\n  const hours = Math.trunc(absOffset / 60);\n  const minutes = absOffset % 60;\n  if (minutes === 0) {\n    return sign + String(hours);\n  }\n  return sign + String(hours) + delimiter + addLeadingZeros(minutes, 2);\n}\n\nfunction formatTimezoneWithOptionalMinutes(offset, delimiter) {\n  if (offset % 60 === 0) {\n    const sign = offset > 0 ? \"-\" : \"+\";\n    return sign + addLeadingZeros(Math.abs(offset) / 60, 2);\n  }\n  return formatTimezone(offset, delimiter);\n}\n\nfunction formatTimezone(offset, delimiter = \"\") {\n  const sign = offset > 0 ? \"-\" : \"+\";\n  const absOffset = Math.abs(offset);\n  const hours = addLeadingZeros(Math.trunc(absOffset / 60), 2);\n  const minutes = addLeadingZeros(absOffset % 60, 2);\n  return sign + hours + delimiter + minutes;\n}\n","import { defaultLocale } from \"./_lib/defaultLocale.js\";\nimport { getDefaultOptions } from \"./_lib/defaultOptions.js\";\nimport { formatters } from \"./_lib/format/formatters.js\";\nimport { longFormatters } from \"./_lib/format/longFormatters.js\";\nimport {\n  isProtectedDayOfYearToken,\n  isProtectedWeekYearToken,\n  warnOrThrowProtectedError,\n} from \"./_lib/protectedTokens.js\";\nimport { isValid } from \"./isValid.js\";\nimport { toDate } from \"./toDate.js\";\n\n// Rexports of internal for libraries to use.\n// See: https://github.com/date-fns/date-fns/issues/3638#issuecomment-1877082874\nexport { formatters, longFormatters };\n\n// This RegExp consists of three parts separated by `|`:\n// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token\n//   (one of the certain letters followed by `o`)\n// - (\\w)\\1* matches any sequences of the same letter\n// - '' matches two quote characters in a row\n// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),\n//   except a single quote symbol, which ends the sequence.\n//   Two quote characters do not end the sequence.\n//   If there is no matching single quote\n//   then the sequence will continue until the end of the string.\n// - . matches any single character unmatched by previous parts of the RegExps\nconst formattingTokensRegExp =\n  /[yYQqMLwIdDecihHKkms]o|(\\w)\\1*|''|'(''|[^'])+('|$)|./g;\n\n// This RegExp catches symbols escaped by quotes, and also\n// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`\nconst longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;\n\nconst escapedStringRegExp = /^'([^]*?)'?$/;\nconst doubleQuoteRegExp = /''/g;\nconst unescapedLatinCharacterRegExp = /[a-zA-Z]/;\n\nexport { format as formatDate };\n\n/**\n * The {@link format} function options.\n */\n\n/**\n * @name format\n * @alias formatDate\n * @category Common Helpers\n * @summary Format the date.\n *\n * @description\n * Return the formatted date string in the given format. The result may vary by locale.\n *\n * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.\n * > See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * The characters wrapped between two single quotes characters (') are escaped.\n * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.\n * (see the last example)\n *\n * Format of the string is based on Unicode Technical Standard #35:\n * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * with a few additions (see note 7 below the table).\n *\n * Accepted patterns:\n * | Unit                            | Pattern | Result examples                   | Notes |\n * |---------------------------------|---------|-----------------------------------|-------|\n * | Era                             | G..GGG  | AD, BC                            |       |\n * |                                 | GGGG    | Anno Domini, Before Christ        | 2     |\n * |                                 | GGGGG   | A, B                              |       |\n * | Calendar year                   | y       | 44, 1, 1900, 2017                 | 5     |\n * |                                 | yo      | 44th, 1st, 0th, 17th              | 5,7   |\n * |                                 | yy      | 44, 01, 00, 17                    | 5     |\n * |                                 | yyy     | 044, 001, 1900, 2017              | 5     |\n * |                                 | yyyy    | 0044, 0001, 1900, 2017            | 5     |\n * |                                 | yyyyy   | ...                               | 3,5   |\n * | Local week-numbering year       | Y       | 44, 1, 1900, 2017                 | 5     |\n * |                                 | Yo      | 44th, 1st, 1900th, 2017th         | 5,7   |\n * |                                 | YY      | 44, 01, 00, 17                    | 5,8   |\n * |                                 | YYY     | 044, 001, 1900, 2017              | 5     |\n * |                                 | YYYY    | 0044, 0001, 1900, 2017            | 5,8   |\n * |                                 | YYYYY   | ...                               | 3,5   |\n * | ISO week-numbering year         | R       | -43, 0, 1, 1900, 2017             | 5,7   |\n * |                                 | RR      | -43, 00, 01, 1900, 2017           | 5,7   |\n * |                                 | RRR     | -043, 000, 001, 1900, 2017        | 5,7   |\n * |                                 | RRRR    | -0043, 0000, 0001, 1900, 2017     | 5,7   |\n * |                                 | RRRRR   | ...                               | 3,5,7 |\n * | Extended year                   | u       | -43, 0, 1, 1900, 2017             | 5     |\n * |                                 | uu      | -43, 01, 1900, 2017               | 5     |\n * |                                 | uuu     | -043, 001, 1900, 2017             | 5     |\n * |                                 | uuuu    | -0043, 0001, 1900, 2017           | 5     |\n * |                                 | uuuuu   | ...                               | 3,5   |\n * | Quarter (formatting)            | Q       | 1, 2, 3, 4                        |       |\n * |                                 | Qo      | 1st, 2nd, 3rd, 4th                | 7     |\n * |                                 | QQ      | 01, 02, 03, 04                    |       |\n * |                                 | QQQ     | Q1, Q2, Q3, Q4                    |       |\n * |                                 | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 | QQQQQ   | 1, 2, 3, 4                        | 4     |\n * | Quarter (stand-alone)           | q       | 1, 2, 3, 4                        |       |\n * |                                 | qo      | 1st, 2nd, 3rd, 4th                | 7     |\n * |                                 | qq      | 01, 02, 03, 04                    |       |\n * |                                 | qqq     | Q1, Q2, Q3, Q4                    |       |\n * |                                 | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 | qqqqq   | 1, 2, 3, 4                        | 4     |\n * | Month (formatting)              | M       | 1, 2, ..., 12                     |       |\n * |                                 | Mo      | 1st, 2nd, ..., 12th               | 7     |\n * |                                 | MM      | 01, 02, ..., 12                   |       |\n * |                                 | MMM     | Jan, Feb, ..., Dec                |       |\n * |                                 | MMMM    | January, February, ..., December  | 2     |\n * |                                 | MMMMM   | J, F, ..., D                      |       |\n * | Month (stand-alone)             | L       | 1, 2, ..., 12                     |       |\n * |                                 | Lo      | 1st, 2nd, ..., 12th               | 7     |\n * |                                 | LL      | 01, 02, ..., 12                   |       |\n * |                                 | LLL     | Jan, Feb, ..., Dec                |       |\n * |                                 | LLLL    | January, February, ..., December  | 2     |\n * |                                 | LLLLL   | J, F, ..., D                      |       |\n * | Local week of year              | w       | 1, 2, ..., 53                     |       |\n * |                                 | wo      | 1st, 2nd, ..., 53th               | 7     |\n * |                                 | ww      | 01, 02, ..., 53                   |       |\n * | ISO week of year                | I       | 1, 2, ..., 53                     | 7     |\n * |                                 | Io      | 1st, 2nd, ..., 53th               | 7     |\n * |                                 | II      | 01, 02, ..., 53                   | 7     |\n * | Day of month                    | d       | 1, 2, ..., 31                     |       |\n * |                                 | do      | 1st, 2nd, ..., 31st               | 7     |\n * |                                 | dd      | 01, 02, ..., 31                   |       |\n * | Day of year                     | D       | 1, 2, ..., 365, 366               | 9     |\n * |                                 | Do      | 1st, 2nd, ..., 365th, 366th       | 7     |\n * |                                 | DD      | 01, 02, ..., 365, 366             | 9     |\n * |                                 | DDD     | 001, 002, ..., 365, 366           |       |\n * |                                 | DDDD    | ...                               | 3     |\n * | Day of week (formatting)        | E..EEE  | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | EEEEE   | M, T, W, T, F, S, S               |       |\n * |                                 | EEEEEE  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | ISO day of week (formatting)    | i       | 1, 2, 3, ..., 7                   | 7     |\n * |                                 | io      | 1st, 2nd, ..., 7th                | 7     |\n * |                                 | ii      | 01, 02, ..., 07                   | 7     |\n * |                                 | iii     | Mon, Tue, Wed, ..., Sun           | 7     |\n * |                                 | iiii    | Monday, Tuesday, ..., Sunday      | 2,7   |\n * |                                 | iiiii   | M, T, W, T, F, S, S               | 7     |\n * |                                 | iiiiii  | Mo, Tu, We, Th, Fr, Sa, Su        | 7     |\n * | Local day of week (formatting)  | e       | 2, 3, 4, ..., 1                   |       |\n * |                                 | eo      | 2nd, 3rd, ..., 1st                | 7     |\n * |                                 | ee      | 02, 03, ..., 01                   |       |\n * |                                 | eee     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | eeee    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | eeeee   | M, T, W, T, F, S, S               |       |\n * |                                 | eeeeee  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | Local day of week (stand-alone) | c       | 2, 3, 4, ..., 1                   |       |\n * |                                 | co      | 2nd, 3rd, ..., 1st                | 7     |\n * |                                 | cc      | 02, 03, ..., 01                   |       |\n * |                                 | ccc     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | cccc    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | ccccc   | M, T, W, T, F, S, S               |       |\n * |                                 | cccccc  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | AM, PM                          | a..aa   | AM, PM                            |       |\n * |                                 | aaa     | am, pm                            |       |\n * |                                 | aaaa    | a.m., p.m.                        | 2     |\n * |                                 | aaaaa   | a, p                              |       |\n * | AM, PM, noon, midnight          | b..bb   | AM, PM, noon, midnight            |       |\n * |                                 | bbb     | am, pm, noon, midnight            |       |\n * |                                 | bbbb    | a.m., p.m., noon, midnight        | 2     |\n * |                                 | bbbbb   | a, p, n, mi                       |       |\n * | Flexible day period             | B..BBB  | at night, in the morning, ...     |       |\n * |                                 | BBBB    | at night, in the morning, ...     | 2     |\n * |                                 | BBBBB   | at night, in the morning, ...     |       |\n * | Hour [1-12]                     | h       | 1, 2, ..., 11, 12                 |       |\n * |                                 | ho      | 1st, 2nd, ..., 11th, 12th         | 7     |\n * |                                 | hh      | 01, 02, ..., 11, 12               |       |\n * | Hour [0-23]                     | H       | 0, 1, 2, ..., 23                  |       |\n * |                                 | Ho      | 0th, 1st, 2nd, ..., 23rd          | 7     |\n * |                                 | HH      | 00, 01, 02, ..., 23               |       |\n * | Hour [0-11]                     | K       | 1, 2, ..., 11, 0                  |       |\n * |                                 | Ko      | 1st, 2nd, ..., 11th, 0th          | 7     |\n * |                                 | KK      | 01, 02, ..., 11, 00               |       |\n * | Hour [1-24]                     | k       | 24, 1, 2, ..., 23                 |       |\n * |                                 | ko      | 24th, 1st, 2nd, ..., 23rd         | 7     |\n * |                                 | kk      | 24, 01, 02, ..., 23               |       |\n * | Minute                          | m       | 0, 1, ..., 59                     |       |\n * |                                 | mo      | 0th, 1st, ..., 59th               | 7     |\n * |                                 | mm      | 00, 01, ..., 59                   |       |\n * | Second                          | s       | 0, 1, ..., 59                     |       |\n * |                                 | so      | 0th, 1st, ..., 59th               | 7     |\n * |                                 | ss      | 00, 01, ..., 59                   |       |\n * | Fraction of second              | S       | 0, 1, ..., 9                      |       |\n * |                                 | SS      | 00, 01, ..., 99                   |       |\n * |                                 | SSS     | 000, 001, ..., 999                |       |\n * |                                 | SSSS    | ...                               | 3     |\n * | Timezone (ISO-8601 w/ Z)        | X       | -08, +0530, Z                     |       |\n * |                                 | XX      | -0800, +0530, Z                   |       |\n * |                                 | XXX     | -08:00, +05:30, Z                 |       |\n * |                                 | XXXX    | -0800, +0530, Z, +123456          | 2     |\n * |                                 | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |\n * | Timezone (ISO-8601 w/o Z)       | x       | -08, +0530, +00                   |       |\n * |                                 | xx      | -0800, +0530, +0000               |       |\n * |                                 | xxx     | -08:00, +05:30, +00:00            | 2     |\n * |                                 | xxxx    | -0800, +0530, +0000, +123456      |       |\n * |                                 | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |\n * | Timezone (GMT)                  | O...OOO | GMT-8, GMT+5:30, GMT+0            |       |\n * |                                 | OOOO    | GMT-08:00, GMT+05:30, GMT+00:00   | 2     |\n * | Timezone (specific non-locat.)  | z...zzz | GMT-8, GMT+5:30, GMT+0            | 6     |\n * |                                 | zzzz    | GMT-08:00, GMT+05:30, GMT+00:00   | 2,6   |\n * | Seconds timestamp               | t       | 512969520                         | 7     |\n * |                                 | tt      | ...                               | 3,7   |\n * | Milliseconds timestamp          | T       | 512969520900                      | 7     |\n * |                                 | TT      | ...                               | 3,7   |\n * | Long localized date             | P       | 04/29/1453                        | 7     |\n * |                                 | PP      | Apr 29, 1453                      | 7     |\n * |                                 | PPP     | April 29th, 1453                  | 7     |\n * |                                 | PPPP    | Friday, April 29th, 1453          | 2,7   |\n * | Long localized time             | p       | 12:00 AM                          | 7     |\n * |                                 | pp      | 12:00:00 AM                       | 7     |\n * |                                 | ppp     | 12:00:00 AM GMT+2                 | 7     |\n * |                                 | pppp    | 12:00:00 AM GMT+02:00             | 2,7   |\n * | Combination of date and time    | Pp      | 04/29/1453, 12:00 AM              | 7     |\n * |                                 | PPpp    | Apr 29, 1453, 12:00:00 AM         | 7     |\n * |                                 | PPPppp  | April 29th, 1453 at ...           | 7     |\n * |                                 | PPPPpppp| Friday, April 29th, 1453 at ...   | 2,7   |\n * Notes:\n * 1. \"Formatting\" units (e.g. formatting quarter) in the default en-US locale\n *    are the same as \"stand-alone\" units, but are different in some languages.\n *    \"Formatting\" units are declined according to the rules of the language\n *    in the context of a date. \"Stand-alone\" units are always nominative singular:\n *\n *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`\n *\n *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`\n *\n * 2. Any sequence of the identical letters is a pattern, unless it is escaped by\n *    the single quote characters (see below).\n *    If the sequence is longer than listed in table (e.g. `EEEEEEEEEEE`)\n *    the output will be the same as default pattern for this unit, usually\n *    the longest one (in case of ISO weekdays, `EEEE`). Default patterns for units\n *    are marked with \"2\" in the last column of the table.\n *\n *    `format(new Date(2017, 10, 6), 'MMM') //=> 'Nov'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMM') //=> 'November'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMM') //=> 'N'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMMM') //=> 'November'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMMMM') //=> 'November'`\n *\n * 3. Some patterns could be unlimited length (such as `yyyyyyyy`).\n *    The output will be padded with zeros to match the length of the pattern.\n *\n *    `format(new Date(2017, 10, 6), 'yyyyyyyy') //=> '00002017'`\n *\n * 4. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.\n *    These tokens represent the shortest form of the quarter.\n *\n * 5. The main difference between `y` and `u` patterns are B.C. years:\n *\n *    | Year | `y` | `u` |\n *    |------|-----|-----|\n *    | AC 1 |   1 |   1 |\n *    | BC 1 |   1 |   0 |\n *    | BC 2 |   2 |  -1 |\n *\n *    Also `yy` always returns the last two digits of a year,\n *    while `uu` pads single digit years to 2 characters and returns other years unchanged:\n *\n *    | Year | `yy` | `uu` |\n *    |------|------|------|\n *    | 1    |   01 |   01 |\n *    | 14   |   14 |   14 |\n *    | 376  |   76 |  376 |\n *    | 1453 |   53 | 1453 |\n *\n *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),\n *    except local week-numbering years are dependent on `options.weekStartsOn`\n *    and `options.firstWeekContainsDate` (compare [getISOWeekYear](https://date-fns.org/docs/getISOWeekYear)\n *    and [getWeekYear](https://date-fns.org/docs/getWeekYear)).\n *\n * 6. Specific non-location timezones are currently unavailable in `date-fns`,\n *    so right now these tokens fall back to GMT timezones.\n *\n * 7. These patterns are not in the Unicode Technical Standard #35:\n *    - `i`: ISO day of week\n *    - `I`: ISO week of year\n *    - `R`: ISO week-numbering year\n *    - `t`: seconds timestamp\n *    - `T`: milliseconds timestamp\n *    - `o`: ordinal number modifier\n *    - `P`: long localized date\n *    - `p`: long localized time\n *\n * 8. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.\n *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * 9. `D` and `DD` tokens represent days of the year but they are often confused with days of the month.\n *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * @param date - The original date\n * @param format - The string of tokens\n * @param options - An object with options\n *\n * @returns The formatted date string\n *\n * @throws `date` must not be Invalid Date\n * @throws `options.locale` must contain `localize` property\n * @throws `options.locale` must contain `formatLong` property\n * @throws use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws format string contains an unescaped latin alphabet character\n *\n * @example\n * // Represent 11 February 2014 in middle-endian format:\n * const result = format(new Date(2014, 1, 11), 'MM/dd/yyyy')\n * //=> '02/11/2014'\n *\n * @example\n * // Represent 2 July 2014 in Esperanto:\n * import { eoLocale } from 'date-fns/locale/eo'\n * const result = format(new Date(2014, 6, 2), \"do 'de' MMMM yyyy\", {\n *   locale: eoLocale\n * })\n * //=> '2-a de julio 2014'\n *\n * @example\n * // Escape string by single quote characters:\n * const result = format(new Date(2014, 6, 2, 15), \"h 'o''clock'\")\n * //=> \"3 o'clock\"\n */\nexport function format(date, formatStr, options) {\n  const defaultOptions = getDefaultOptions();\n  const locale = options?.locale ?? defaultOptions.locale ?? defaultLocale;\n\n  const firstWeekContainsDate =\n    options?.firstWeekContainsDate ??\n    options?.locale?.options?.firstWeekContainsDate ??\n    defaultOptions.firstWeekContainsDate ??\n    defaultOptions.locale?.options?.firstWeekContainsDate ??\n    1;\n\n  const weekStartsOn =\n    options?.weekStartsOn ??\n    options?.locale?.options?.weekStartsOn ??\n    defaultOptions.weekStartsOn ??\n    defaultOptions.locale?.options?.weekStartsOn ??\n    0;\n\n  const originalDate = toDate(date, options?.in);\n\n  if (!isValid(originalDate)) {\n    throw new RangeError(\"Invalid time value\");\n  }\n\n  let parts = formatStr\n    .match(longFormattingTokensRegExp)\n    .map((substring) => {\n      const firstCharacter = substring[0];\n      if (firstCharacter === \"p\" || firstCharacter === \"P\") {\n        const longFormatter = longFormatters[firstCharacter];\n        return longFormatter(substring, locale.formatLong);\n      }\n      return substring;\n    })\n    .join(\"\")\n    .match(formattingTokensRegExp)\n    .map((substring) => {\n      // Replace two single quote characters with one single quote character\n      if (substring === \"''\") {\n        return { isToken: false, value: \"'\" };\n      }\n\n      const firstCharacter = substring[0];\n      if (firstCharacter === \"'\") {\n        return { isToken: false, value: cleanEscapedString(substring) };\n      }\n\n      if (formatters[firstCharacter]) {\n        return { isToken: true, value: substring };\n      }\n\n      if (firstCharacter.match(unescapedLatinCharacterRegExp)) {\n        throw new RangeError(\n          \"Format string contains an unescaped latin alphabet character `\" +\n            firstCharacter +\n            \"`\",\n        );\n      }\n\n      return { isToken: false, value: substring };\n    });\n\n  // invoke localize preprocessor (only for french locales at the moment)\n  if (locale.localize.preprocessor) {\n    parts = locale.localize.preprocessor(originalDate, parts);\n  }\n\n  const formatterOptions = {\n    firstWeekContainsDate,\n    weekStartsOn,\n    locale,\n  };\n\n  return parts\n    .map((part) => {\n      if (!part.isToken) return part.value;\n\n      const token = part.value;\n\n      if (\n        (!options?.useAdditionalWeekYearTokens &&\n          isProtectedWeekYearToken(token)) ||\n        (!options?.useAdditionalDayOfYearTokens &&\n          isProtectedDayOfYearToken(token))\n      ) {\n        warnOrThrowProtectedError(token, formatStr, String(date));\n      }\n\n      const formatter = formatters[token[0]];\n      return formatter(originalDate, token, locale.localize, formatterOptions);\n    })\n    .join(\"\");\n}\n\nfunction cleanEscapedString(input) {\n  const matched = input.match(escapedStringRegExp);\n\n  if (!matched) {\n    return input;\n  }\n\n  return matched[1].replace(doubleQuoteRegExp, \"'\");\n}\n\n// Fallback for modularized imports:\nexport default format;\n","import { toDate } from \"../toDate.js\";\n\n/**\n * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.\n * They usually appear for dates that denote time before the timezones were introduced\n * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891\n * and GMT+01:00:00 after that date)\n *\n * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,\n * which would lead to incorrect calculations.\n *\n * This function returns the timezone offset in milliseconds that takes seconds in account.\n */\nexport function getTimezoneOffsetInMilliseconds(date) {\n  const _date = toDate(date);\n  const utcDate = new Date(\n    Date.UTC(\n      _date.getFullYear(),\n      _date.getMonth(),\n      _date.getDate(),\n      _date.getHours(),\n      _date.getMinutes(),\n      _date.getSeconds(),\n      _date.getMilliseconds(),\n    ),\n  );\n  utcDate.setUTCFullYear(_date.getFullYear());\n  return +date - +utcDate;\n}\n","const formatDistanceLocale = {\n  lessThanXSeconds: {\n    one: \"less than a second\",\n    other: \"less than {{count}} seconds\",\n  },\n\n  xSeconds: {\n    one: \"1 second\",\n    other: \"{{count}} seconds\",\n  },\n\n  halfAMinute: \"half a minute\",\n\n  lessThanXMinutes: {\n    one: \"less than a minute\",\n    other: \"less than {{count}} minutes\",\n  },\n\n  xMinutes: {\n    one: \"1 minute\",\n    other: \"{{count}} minutes\",\n  },\n\n  aboutXHours: {\n    one: \"about 1 hour\",\n    other: \"about {{count}} hours\",\n  },\n\n  xHours: {\n    one: \"1 hour\",\n    other: \"{{count}} hours\",\n  },\n\n  xDays: {\n    one: \"1 day\",\n    other: \"{{count}} days\",\n  },\n\n  aboutXWeeks: {\n    one: \"about 1 week\",\n    other: \"about {{count}} weeks\",\n  },\n\n  xWeeks: {\n    one: \"1 week\",\n    other: \"{{count}} weeks\",\n  },\n\n  aboutXMonths: {\n    one: \"about 1 month\",\n    other: \"about {{count}} months\",\n  },\n\n  xMonths: {\n    one: \"1 month\",\n    other: \"{{count}} months\",\n  },\n\n  aboutXYears: {\n    one: \"about 1 year\",\n    other: \"about {{count}} years\",\n  },\n\n  xYears: {\n    one: \"1 year\",\n    other: \"{{count}} years\",\n  },\n\n  overXYears: {\n    one: \"over 1 year\",\n    other: \"over {{count}} years\",\n  },\n\n  almostXYears: {\n    one: \"almost 1 year\",\n    other: \"almost {{count}} years\",\n  },\n};\n\nexport const formatDistance = (token, count, options) => {\n  let result;\n\n  const tokenValue = formatDistanceLocale[token];\n  if (typeof tokenValue === \"string\") {\n    result = tokenValue;\n  } else if (count === 1) {\n    result = tokenValue.one;\n  } else {\n    result = tokenValue.other.replace(\"{{count}}\", count.toString());\n  }\n\n  if (options?.addSuffix) {\n    if (options.comparison && options.comparison > 0) {\n      return \"in \" + result;\n    } else {\n      return result + \" ago\";\n    }\n  }\n\n  return result;\n};\n","export function buildFormatLongFn(args) {\n  return (options = {}) => {\n    // TODO: Remove String()\n    const width = options.width ? String(options.width) : args.defaultWidth;\n    const format = args.formats[width] || args.formats[args.defaultWidth];\n    return format;\n  };\n}\n","import { buildFormatLongFn } from \"../../_lib/buildFormatLongFn.js\";\n\nconst dateFormats = {\n  full: \"EEEE, MMMM do, y\",\n  long: \"MMMM do, y\",\n  medium: \"MMM d, y\",\n  short: \"MM/dd/yyyy\",\n};\n\nconst timeFormats = {\n  full: \"h:mm:ss a zzzz\",\n  long: \"h:mm:ss a z\",\n  medium: \"h:mm:ss a\",\n  short: \"h:mm a\",\n};\n\nconst dateTimeFormats = {\n  full: \"{{date}} 'at' {{time}}\",\n  long: \"{{date}} 'at' {{time}}\",\n  medium: \"{{date}}, {{time}}\",\n  short: \"{{date}}, {{time}}\",\n};\n\nexport const formatLong = {\n  date: buildFormatLongFn({\n    formats: dateFormats,\n    defaultWidth: \"full\",\n  }),\n\n  time: buildFormatLongFn({\n    formats: timeFormats,\n    defaultWidth: \"full\",\n  }),\n\n  dateTime: buildFormatLongFn({\n    formats: dateTimeFormats,\n    defaultWidth: \"full\",\n  }),\n};\n","const formatRelativeLocale = {\n  lastWeek: \"'last' eeee 'at' p\",\n  yesterday: \"'yesterday at' p\",\n  today: \"'today at' p\",\n  tomorrow: \"'tomorrow at' p\",\n  nextWeek: \"eeee 'at' p\",\n  other: \"P\",\n};\n\nexport const formatRelative = (token, _date, _baseDate, _options) =>\n  formatRelativeLocale[token];\n","/**\n * The localize function argument callback which allows to convert raw value to\n * the actual type.\n *\n * @param value - The value to convert\n *\n * @returns The converted value\n */\n\n/**\n * The map of localized values for each width.\n */\n\n/**\n * The index type of the locale unit value. It types conversion of units of\n * values that don't start at 0 (i.e. quarters).\n */\n\n/**\n * Converts the unit value to the tuple of values.\n */\n\n/**\n * The tuple of localized era values. The first element represents BC,\n * the second element represents AD.\n */\n\n/**\n * The tuple of localized quarter values. The first element represents Q1.\n */\n\n/**\n * The tuple of localized day values. The first element represents Sunday.\n */\n\n/**\n * The tuple of localized month values. The first element represents January.\n */\n\nexport function buildLocalizeFn(args) {\n  return (value, options) => {\n    const context = options?.context ? String(options.context) : \"standalone\";\n\n    let valuesArray;\n    if (context === \"formatting\" && args.formattingValues) {\n      const defaultWidth = args.defaultFormattingWidth || args.defaultWidth;\n      const width = options?.width ? String(options.width) : defaultWidth;\n\n      valuesArray =\n        args.formattingValues[width] || args.formattingValues[defaultWidth];\n    } else {\n      const defaultWidth = args.defaultWidth;\n      const width = options?.width ? String(options.width) : args.defaultWidth;\n\n      valuesArray = args.values[width] || args.values[defaultWidth];\n    }\n    const index = args.argumentCallback ? args.argumentCallback(value) : value;\n\n    // @ts-expect-error - For some reason TypeScript just don't want to match it, no matter how hard we try. I challenge you to try to remove it!\n    return valuesArray[index];\n  };\n}\n","export function buildMatchFn(args) {\n  return (string, options = {}) => {\n    const width = options.width;\n\n    const matchPattern =\n      (width && args.matchPatterns[width]) ||\n      args.matchPatterns[args.defaultMatchWidth];\n    const matchResult = string.match(matchPattern);\n\n    if (!matchResult) {\n      return null;\n    }\n    const matchedString = matchResult[0];\n\n    const parsePatterns =\n      (width && args.parsePatterns[width]) ||\n      args.parsePatterns[args.defaultParseWidth];\n\n    const key = Array.isArray(parsePatterns)\n      ? findIndex(parsePatterns, (pattern) => pattern.test(matchedString))\n      : // [TODO] -- I challenge you to fix the type\n        findKey(parsePatterns, (pattern) => pattern.test(matchedString));\n\n    let value;\n\n    value = args.valueCallback ? args.valueCallback(key) : key;\n    value = options.valueCallback\n      ? // [TODO] -- I challenge you to fix the type\n        options.valueCallback(value)\n      : value;\n\n    const rest = string.slice(matchedString.length);\n\n    return { value, rest };\n  };\n}\n\nfunction findKey(object, predicate) {\n  for (const key in object) {\n    if (\n      Object.prototype.hasOwnProperty.call(object, key) &&\n      predicate(object[key])\n    ) {\n      return key;\n    }\n  }\n  return undefined;\n}\n\nfunction findIndex(array, predicate) {\n  for (let key = 0; key < array.length; key++) {\n    if (predicate(array[key])) {\n      return key;\n    }\n  }\n  return undefined;\n}\n","export function buildMatchPatternFn(args) {\n  return (string, options = {}) => {\n    const matchResult = string.match(args.matchPattern);\n    if (!matchResult) return null;\n    const matchedString = matchResult[0];\n\n    const parseResult = string.match(args.parsePattern);\n    if (!parseResult) return null;\n    let value = args.valueCallback\n      ? args.valueCallback(parseResult[0])\n      : parseResult[0];\n\n    // [TODO] I challenge you to fix the type\n    value = options.valueCallback ? options.valueCallback(value) : value;\n\n    const rest = string.slice(matchedString.length);\n\n    return { value, rest };\n  };\n}\n","import { formatDistance } from \"./en-US/_lib/formatDistance.js\";\nimport { formatLong } from \"./en-US/_lib/formatLong.js\";\nimport { formatRelative } from \"./en-US/_lib/formatRelative.js\";\nimport { localize } from \"./en-US/_lib/localize.js\";\nimport { match } from \"./en-US/_lib/match.js\";\n\n/**\n * @category Locales\n * @summary English locale (United States).\n * @language English\n * @iso-639-2 eng\n * @author Sasha Koss [@kossnocorp](https://github.com/kossnocorp)\n * @author Lesha Koss [@leshakoss](https://github.com/leshakoss)\n */\nexport const enUS = {\n  code: \"en-US\",\n  formatDistance: formatDistance,\n  formatLong: formatLong,\n  formatRelative: formatRelative,\n  localize: localize,\n  match: match,\n  options: {\n    weekStartsOn: 0 /* Sunday */,\n    firstWeekContainsDate: 1,\n  },\n};\n\n// Fallback for modularized imports:\nexport default enUS;\n","import { buildLocalizeFn } from \"../../_lib/buildLocalizeFn.js\";\n\nconst eraValues = {\n  narrow: [\"B\", \"A\"],\n  abbreviated: [\"BC\", \"AD\"],\n  wide: [\"Before Christ\", \"Anno Domini\"],\n};\n\nconst quarterValues = {\n  narrow: [\"1\", \"2\", \"3\", \"4\"],\n  abbreviated: [\"Q1\", \"Q2\", \"Q3\", \"Q4\"],\n  wide: [\"1st quarter\", \"2nd quarter\", \"3rd quarter\", \"4th quarter\"],\n};\n\n// Note: in English, the names of days of the week and months are capitalized.\n// If you are making a new locale based on this one, check if the same is true for the language you're working on.\n// Generally, formatted dates should look like they are in the middle of a sentence,\n// e.g. in Spanish language the weekdays and months should be in the lowercase.\nconst monthValues = {\n  narrow: [\"J\", \"F\", \"M\", \"A\", \"M\", \"J\", \"J\", \"A\", \"S\", \"O\", \"N\", \"D\"],\n  abbreviated: [\n    \"Jan\",\n    \"Feb\",\n    \"Mar\",\n    \"Apr\",\n    \"May\",\n    \"Jun\",\n    \"Jul\",\n    \"Aug\",\n    \"Sep\",\n    \"Oct\",\n    \"Nov\",\n    \"Dec\",\n  ],\n\n  wide: [\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",\n    \"October\",\n    \"November\",\n    \"December\",\n  ],\n};\n\nconst dayValues = {\n  narrow: [\"S\", \"M\", \"T\", \"W\", \"T\", \"F\", \"S\"],\n  short: [\"Su\", \"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\", \"Sa\"],\n  abbreviated: [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"],\n  wide: [\n    \"Sunday\",\n    \"Monday\",\n    \"Tuesday\",\n    \"Wednesday\",\n    \"Thursday\",\n    \"Friday\",\n    \"Saturday\",\n  ],\n};\n\nconst dayPeriodValues = {\n  narrow: {\n    am: \"a\",\n    pm: \"p\",\n    midnight: \"mi\",\n    noon: \"n\",\n    morning: \"morning\",\n    afternoon: \"afternoon\",\n    evening: \"evening\",\n    night: \"night\",\n  },\n  abbreviated: {\n    am: \"AM\",\n    pm: \"PM\",\n    midnight: \"midnight\",\n    noon: \"noon\",\n    morning: \"morning\",\n    afternoon: \"afternoon\",\n    evening: \"evening\",\n    night: \"night\",\n  },\n  wide: {\n    am: \"a.m.\",\n    pm: \"p.m.\",\n    midnight: \"midnight\",\n    noon: \"noon\",\n    morning: \"morning\",\n    afternoon: \"afternoon\",\n    evening: \"evening\",\n    night: \"night\",\n  },\n};\n\nconst formattingDayPeriodValues = {\n  narrow: {\n    am: \"a\",\n    pm: \"p\",\n    midnight: \"mi\",\n    noon: \"n\",\n    morning: \"in the morning\",\n    afternoon: \"in the afternoon\",\n    evening: \"in the evening\",\n    night: \"at night\",\n  },\n  abbreviated: {\n    am: \"AM\",\n    pm: \"PM\",\n    midnight: \"midnight\",\n    noon: \"noon\",\n    morning: \"in the morning\",\n    afternoon: \"in the afternoon\",\n    evening: \"in the evening\",\n    night: \"at night\",\n  },\n  wide: {\n    am: \"a.m.\",\n    pm: \"p.m.\",\n    midnight: \"midnight\",\n    noon: \"noon\",\n    morning: \"in the morning\",\n    afternoon: \"in the afternoon\",\n    evening: \"in the evening\",\n    night: \"at night\",\n  },\n};\n\nconst ordinalNumber = (dirtyNumber, _options) => {\n  const number = Number(dirtyNumber);\n\n  // If ordinal numbers depend on context, for example,\n  // if they are different for different grammatical genders,\n  // use `options.unit`.\n  //\n  // `unit` can be 'year', 'quarter', 'month', 'week', 'date', 'dayOfYear',\n  // 'day', 'hour', 'minute', 'second'.\n\n  const rem100 = number % 100;\n  if (rem100 > 20 || rem100 < 10) {\n    switch (rem100 % 10) {\n      case 1:\n        return number + \"st\";\n      case 2:\n        return number + \"nd\";\n      case 3:\n        return number + \"rd\";\n    }\n  }\n  return number + \"th\";\n};\n\nexport const localize = {\n  ordinalNumber,\n\n  era: buildLocalizeFn({\n    values: eraValues,\n    defaultWidth: \"wide\",\n  }),\n\n  quarter: buildLocalizeFn({\n    values: quarterValues,\n    defaultWidth: \"wide\",\n    argumentCallback: (quarter) => quarter - 1,\n  }),\n\n  month: buildLocalizeFn({\n    values: monthValues,\n    defaultWidth: \"wide\",\n  }),\n\n  day: buildLocalizeFn({\n    values: dayValues,\n    defaultWidth: \"wide\",\n  }),\n\n  dayPeriod: buildLocalizeFn({\n    values: dayPeriodValues,\n    defaultWidth: \"wide\",\n    formattingValues: formattingDayPeriodValues,\n    defaultFormattingWidth: \"wide\",\n  }),\n};\n","import { buildMatchFn } from \"../../_lib/buildMatchFn.js\";\nimport { buildMatchPatternFn } from \"../../_lib/buildMatchPatternFn.js\";\n\nconst matchOrdinalNumberPattern = /^(\\d+)(th|st|nd|rd)?/i;\nconst parseOrdinalNumberPattern = /\\d+/i;\n\nconst matchEraPatterns = {\n  narrow: /^(b|a)/i,\n  abbreviated: /^(b\\.?\\s?c\\.?|b\\.?\\s?c\\.?\\s?e\\.?|a\\.?\\s?d\\.?|c\\.?\\s?e\\.?)/i,\n  wide: /^(before christ|before common era|anno domini|common era)/i,\n};\nconst parseEraPatterns = {\n  any: [/^b/i, /^(a|c)/i],\n};\n\nconst matchQuarterPatterns = {\n  narrow: /^[1234]/i,\n  abbreviated: /^q[1234]/i,\n  wide: /^[1234](th|st|nd|rd)? quarter/i,\n};\nconst parseQuarterPatterns = {\n  any: [/1/i, /2/i, /3/i, /4/i],\n};\n\nconst matchMonthPatterns = {\n  narrow: /^[jfmasond]/i,\n  abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,\n  wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i,\n};\nconst parseMonthPatterns = {\n  narrow: [\n    /^j/i,\n    /^f/i,\n    /^m/i,\n    /^a/i,\n    /^m/i,\n    /^j/i,\n    /^j/i,\n    /^a/i,\n    /^s/i,\n    /^o/i,\n    /^n/i,\n    /^d/i,\n  ],\n\n  any: [\n    /^ja/i,\n    /^f/i,\n    /^mar/i,\n    /^ap/i,\n    /^may/i,\n    /^jun/i,\n    /^jul/i,\n    /^au/i,\n    /^s/i,\n    /^o/i,\n    /^n/i,\n    /^d/i,\n  ],\n};\n\nconst matchDayPatterns = {\n  narrow: /^[smtwf]/i,\n  short: /^(su|mo|tu|we|th|fr|sa)/i,\n  abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,\n  wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i,\n};\nconst parseDayPatterns = {\n  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],\n  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i],\n};\n\nconst matchDayPeriodPatterns = {\n  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,\n  any: /^([ap]\\.?\\s?m\\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i,\n};\nconst parseDayPeriodPatterns = {\n  any: {\n    am: /^a/i,\n    pm: /^p/i,\n    midnight: /^mi/i,\n    noon: /^no/i,\n    morning: /morning/i,\n    afternoon: /afternoon/i,\n    evening: /evening/i,\n    night: /night/i,\n  },\n};\n\nexport const match = {\n  ordinalNumber: buildMatchPatternFn({\n    matchPattern: matchOrdinalNumberPattern,\n    parsePattern: parseOrdinalNumberPattern,\n    valueCallback: (value) => parseInt(value, 10),\n  }),\n\n  era: buildMatchFn({\n    matchPatterns: matchEraPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseEraPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  quarter: buildMatchFn({\n    matchPatterns: matchQuarterPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseQuarterPatterns,\n    defaultParseWidth: \"any\",\n    valueCallback: (index) => index + 1,\n  }),\n\n  month: buildMatchFn({\n    matchPatterns: matchMonthPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseMonthPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  day: buildMatchFn({\n    matchPatterns: matchDayPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseDayPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  dayPeriod: buildMatchFn({\n    matchPatterns: matchDayPeriodPatterns,\n    defaultMatchWidth: \"any\",\n    parsePatterns: parseDayPeriodPatterns,\n    defaultParseWidth: \"any\",\n  }),\n};\n","const dayOfYearTokenRE = /^D+$/;\nconst weekYearTokenRE = /^Y+$/;\n\nconst throwTokens = [\"D\", \"DD\", \"YY\", \"YYYY\"];\n\nexport function isProtectedDayOfYearToken(token) {\n  return dayOfYearTokenRE.test(token);\n}\n\nexport function isProtectedWeekYearToken(token) {\n  return weekYearTokenRE.test(token);\n}\n\nexport function warnOrThrowProtectedError(token, format, input) {\n  const _message = message(token, format, input);\n  console.warn(_message);\n  if (throwTokens.includes(token)) throw new RangeError(_message);\n}\n\nfunction message(token, format, input) {\n  const subject = token[0] === \"Y\" ? \"years\" : \"days of the month\";\n  return `Use \\`${token.toLowerCase()}\\` instead of \\`${token}\\` (in \\`${format}\\`) for formatting ${subject} to the input \\`${input}\\`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md`;\n}\n","import { constructFromSymbol } from \"./constants.js\";\n\n/**\n * @name constructFrom\n * @category Generic Helpers\n * @summary Constructs a date using the reference date and the value\n *\n * @description\n * The function constructs a new date using the constructor from the reference\n * date and the given value. It helps to build generic functions that accept\n * date extensions.\n *\n * It defaults to `Date` if the passed reference date is a number or a string.\n *\n * Starting from v3.7.0, it allows to construct a date using `[Symbol.for(\"constructDateFrom\")]`\n * enabling to transfer extra properties from the reference date to the new date.\n * It's useful for extensions like [`TZDate`](https://github.com/date-fns/tz)\n * that accept a time zone as a constructor argument.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The reference date to take constructor from\n * @param value - The value to create the date\n *\n * @returns Date initialized using the given date and value\n *\n * @example\n * import { constructFrom } from \"./constructFrom/date-fns\";\n *\n * // A function that clones a date preserving the original type\n * function cloneDate<DateType extends Date>(date: DateType): DateType {\n *   return constructFrom(\n *     date, // Use constructor from the given date\n *     date.getTime() // Use the date value to create a new date\n *   );\n * }\n */\nexport function constructFrom(date, value) {\n  if (typeof date === \"function\") return date(value);\n\n  if (date && typeof date === \"object\" && constructFromSymbol in date)\n    return date[constructFromSymbol](value);\n\n  if (date instanceof Date) return new date.constructor(value);\n\n  return new Date(value);\n}\n\n// Fallback for modularized imports:\nexport default constructFrom;\n","import { getDefaultOptions } from \"./_lib/defaultOptions.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link startOfWeek} function options.\n */\n\n/**\n * @name startOfWeek\n * @category Week Helpers\n * @summary Return the start of a week for the given date.\n *\n * @description\n * Return the start of a week for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The start of a week\n *\n * @example\n * // The start of a week for 2 September 2014 11:55:00:\n * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Sun Aug 31 2014 00:00:00\n *\n * @example\n * // If the week starts on Monday, the start of the week for 2 September 2014 11:55:00:\n * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0), { weekStartsOn: 1 })\n * //=> Mon Sep 01 2014 00:00:00\n */\nexport function startOfWeek(date, options) {\n  const defaultOptions = getDefaultOptions();\n  const weekStartsOn =\n    options?.weekStartsOn ??\n    options?.locale?.options?.weekStartsOn ??\n    defaultOptions.weekStartsOn ??\n    defaultOptions.locale?.options?.weekStartsOn ??\n    0;\n\n  const _date = toDate(date, options?.in);\n  const day = _date.getDay();\n  const diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;\n\n  _date.setDate(_date.getDate() - diff);\n  _date.setHours(0, 0, 0, 0);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default startOfWeek;\n","import { constructFrom } from \"./constructFrom.js\";\n\n/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * Starting from v3.7.0, it clones a date using `[Symbol.for(\"constructDateFrom\")]`\n * enabling to transfer extra properties from the reference date to the new date.\n * It's useful for extensions like [`TZDate`](https://github.com/date-fns/tz)\n * that accept a time zone as a constructor argument.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param argument - The value to convert\n *\n * @returns The parsed date in the local time zone\n *\n * @example\n * // Clone the date:\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * const result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */\nexport function toDate(argument, context) {\n  // [TODO] Get rid of `toDate` or `constructFrom`?\n  return constructFrom(context || argument, argument);\n}\n\n// Fallback for modularized imports:\nexport default toDate;\n","import { getDefaultOptions } from \"./_lib/defaultOptions.js\";\nimport { constructFrom } from \"./constructFrom.js\";\nimport { getWeekYear } from \"./getWeekYear.js\";\nimport { startOfWeek } from \"./startOfWeek.js\";\n\n/**\n * The {@link startOfWeekYear} function options.\n */\n\n/**\n * @name startOfWeekYear\n * @category Week-Numbering Year Helpers\n * @summary Return the start of a local week-numbering year for the given date.\n *\n * @description\n * Return the start of a local week-numbering year.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type.\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The start of a week-numbering year\n *\n * @example\n * // The start of an a week-numbering year for 2 July 2005 with default settings:\n * const result = startOfWeekYear(new Date(2005, 6, 2))\n * //=> Sun Dec 26 2004 00:00:00\n *\n * @example\n * // The start of a week-numbering year for 2 July 2005\n * // if Monday is the first day of week\n * // and 4 January is always in the first week of the year:\n * const result = startOfWeekYear(new Date(2005, 6, 2), {\n *   weekStartsOn: 1,\n *   firstWeekContainsDate: 4\n * })\n * //=> Mon Jan 03 2005 00:00:00\n */\nexport function startOfWeekYear(date, options) {\n  const defaultOptions = getDefaultOptions();\n  const firstWeekContainsDate =\n    options?.firstWeekContainsDate ??\n    options?.locale?.options?.firstWeekContainsDate ??\n    defaultOptions.firstWeekContainsDate ??\n    defaultOptions.locale?.options?.firstWeekContainsDate ??\n    1;\n\n  const year = getWeekYear(date, options);\n  const firstWeek = constructFrom(options?.in || date, 0);\n  firstWeek.setFullYear(year, 0, firstWeekContainsDate);\n  firstWeek.setHours(0, 0, 0, 0);\n  const _date = startOfWeek(firstWeek, options);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default startOfWeekYear;\n","import { millisecondsInWeek } from \"./constants.js\";\nimport { startOfWeek } from \"./startOfWeek.js\";\nimport { startOfWeekYear } from \"./startOfWeekYear.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link getWeek} function options.\n */\n\n/**\n * @name getWeek\n * @category Week Helpers\n * @summary Get the local week index of the given date.\n *\n * @description\n * Get the local week index of the given date.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system\n *\n * @param date - The given date\n * @param options - An object with options\n *\n * @returns The week\n *\n * @example\n * // Which week of the local week numbering year is 2 January 2005 with default options?\n * const result = getWeek(new Date(2005, 0, 2))\n * //=> 2\n *\n * @example\n * // Which week of the local week numbering year is 2 January 2005,\n * // if Monday is the first day of the week,\n * // and the first week of the year always contains 4 January?\n * const result = getWeek(new Date(2005, 0, 2), {\n *   weekStartsOn: 1,\n *   firstWeekContainsDate: 4\n * })\n * //=> 53\n */\nexport function getWeek(date, options) {\n  const _date = toDate(date, options?.in);\n  const diff = +startOfWeek(_date, options) - +startOfWeekYear(_date, options);\n\n  // Round the number of weeks to the nearest integer because the number of\n  // milliseconds in a week is not constant (e.g. it's different in the week of\n  // the daylight saving time clock shift).\n  return Math.round(diff / millisecondsInWeek) + 1;\n}\n\n// Fallback for modularized imports:\nexport default getWeek;\n","import { toDate } from \"./toDate.js\";\n\n/**\n * The {@link startOfDay} function options.\n */\n\n/**\n * @name startOfDay\n * @category Day Helpers\n * @summary Return the start of a day for the given date.\n *\n * @description\n * Return the start of a day for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - The options\n *\n * @returns The start of a day\n *\n * @example\n * // The start of a day for 2 September 2014 11:55:00:\n * const result = startOfDay(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 02 2014 00:00:00\n */\nexport function startOfDay(date, options) {\n  const _date = toDate(date, options?.in);\n  _date.setHours(0, 0, 0, 0);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default startOfDay;\n","import { getDefaultOptions } from \"./_lib/defaultOptions.js\";\nimport { constructFrom } from \"./constructFrom.js\";\nimport { startOfWeek } from \"./startOfWeek.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link getWeekYear} function options.\n */\n\n/**\n * @name getWeekYear\n * @category Week-Numbering Year Helpers\n * @summary Get the local week-numbering year of the given date.\n *\n * @description\n * Get the local week-numbering year of the given date.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system\n *\n * @param date - The given date\n * @param options - An object with options.\n *\n * @returns The local week-numbering year\n *\n * @example\n * // Which week numbering year is 26 December 2004 with the default settings?\n * const result = getWeekYear(new Date(2004, 11, 26))\n * //=> 2005\n *\n * @example\n * // Which week numbering year is 26 December 2004 if week starts on Saturday?\n * const result = getWeekYear(new Date(2004, 11, 26), { weekStartsOn: 6 })\n * //=> 2004\n *\n * @example\n * // Which week numbering year is 26 December 2004 if the first week contains 4 January?\n * const result = getWeekYear(new Date(2004, 11, 26), { firstWeekContainsDate: 4 })\n * //=> 2004\n */\nexport function getWeekYear(date, options) {\n  const _date = toDate(date, options?.in);\n  const year = _date.getFullYear();\n\n  const defaultOptions = getDefaultOptions();\n  const firstWeekContainsDate =\n    options?.firstWeekContainsDate ??\n    options?.locale?.options?.firstWeekContainsDate ??\n    defaultOptions.firstWeekContainsDate ??\n    defaultOptions.locale?.options?.firstWeekContainsDate ??\n    1;\n\n  const firstWeekOfNextYear = constructFrom(options?.in || date, 0);\n  firstWeekOfNextYear.setFullYear(year + 1, 0, firstWeekContainsDate);\n  firstWeekOfNextYear.setHours(0, 0, 0, 0);\n  const startOfNextYear = startOfWeek(firstWeekOfNextYear, options);\n\n  const firstWeekOfThisYear = constructFrom(options?.in || date, 0);\n  firstWeekOfThisYear.setFullYear(year, 0, firstWeekContainsDate);\n  firstWeekOfThisYear.setHours(0, 0, 0, 0);\n  const startOfThisYear = startOfWeek(firstWeekOfThisYear, options);\n\n  if (+_date >= +startOfNextYear) {\n    return year + 1;\n  } else if (+_date >= +startOfThisYear) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}\n\n// Fallback for modularized imports:\nexport default getWeekYear;\n","/**\n * @module constants\n * @summary Useful constants\n * @description\n * Collection of useful date constants.\n *\n * The constants could be imported from `date-fns/constants`:\n *\n * ```ts\n * import { maxTime, minTime } from \"./constants/date-fns/constants\";\n *\n * function isAllowedTime(time) {\n *   return time <= maxTime && time >= minTime;\n * }\n * ```\n */\n\n/**\n * @constant\n * @name daysInWeek\n * @summary Days in 1 week.\n */\nexport const daysInWeek = 7;\n\n/**\n * @constant\n * @name daysInYear\n * @summary Days in 1 year.\n *\n * @description\n * How many days in a year.\n *\n * One years equals 365.2425 days according to the formula:\n *\n * > Leap year occurs every 4 years, except for years that are divisible by 100 and not divisible by 400.\n * > 1 mean year = (365+1/4-1/100+1/400) days = 365.2425 days\n */\nexport const daysInYear = 365.2425;\n\n/**\n * @constant\n * @name maxTime\n * @summary Maximum allowed time.\n *\n * @example\n * import { maxTime } from \"./constants/date-fns/constants\";\n *\n * const isValid = 8640000000000001 <= maxTime;\n * //=> false\n *\n * new Date(8640000000000001);\n * //=> Invalid Date\n */\nexport const maxTime = Math.pow(10, 8) * 24 * 60 * 60 * 1000;\n\n/**\n * @constant\n * @name minTime\n * @summary Minimum allowed time.\n *\n * @example\n * import { minTime } from \"./constants/date-fns/constants\";\n *\n * const isValid = -8640000000000001 >= minTime;\n * //=> false\n *\n * new Date(-8640000000000001)\n * //=> Invalid Date\n */\nexport const minTime = -maxTime;\n\n/**\n * @constant\n * @name millisecondsInWeek\n * @summary Milliseconds in 1 week.\n */\nexport const millisecondsInWeek = 604800000;\n\n/**\n * @constant\n * @name millisecondsInDay\n * @summary Milliseconds in 1 day.\n */\nexport const millisecondsInDay = 86400000;\n\n/**\n * @constant\n * @name millisecondsInMinute\n * @summary Milliseconds in 1 minute\n */\nexport const millisecondsInMinute = 60000;\n\n/**\n * @constant\n * @name millisecondsInHour\n * @summary Milliseconds in 1 hour\n */\nexport const millisecondsInHour = 3600000;\n\n/**\n * @constant\n * @name millisecondsInSecond\n * @summary Milliseconds in 1 second\n */\nexport const millisecondsInSecond = 1000;\n\n/**\n * @constant\n * @name minutesInYear\n * @summary Minutes in 1 year.\n */\nexport const minutesInYear = 525600;\n\n/**\n * @constant\n * @name minutesInMonth\n * @summary Minutes in 1 month.\n */\nexport const minutesInMonth = 43200;\n\n/**\n * @constant\n * @name minutesInDay\n * @summary Minutes in 1 day.\n */\nexport const minutesInDay = 1440;\n\n/**\n * @constant\n * @name minutesInHour\n * @summary Minutes in 1 hour.\n */\nexport const minutesInHour = 60;\n\n/**\n * @constant\n * @name monthsInQuarter\n * @summary Months in 1 quarter.\n */\nexport const monthsInQuarter = 3;\n\n/**\n * @constant\n * @name monthsInYear\n * @summary Months in 1 year.\n */\nexport const monthsInYear = 12;\n\n/**\n * @constant\n * @name quartersInYear\n * @summary Quarters in 1 year\n */\nexport const quartersInYear = 4;\n\n/**\n * @constant\n * @name secondsInHour\n * @summary Seconds in 1 hour.\n */\nexport const secondsInHour = 3600;\n\n/**\n * @constant\n * @name secondsInMinute\n * @summary Seconds in 1 minute.\n */\nexport const secondsInMinute = 60;\n\n/**\n * @constant\n * @name secondsInDay\n * @summary Seconds in 1 day.\n */\nexport const secondsInDay = secondsInHour * 24;\n\n/**\n * @constant\n * @name secondsInWeek\n * @summary Seconds in 1 week.\n */\nexport const secondsInWeek = secondsInDay * 7;\n\n/**\n * @constant\n * @name secondsInYear\n * @summary Seconds in 1 year.\n */\nexport const secondsInYear = secondsInDay * daysInYear;\n\n/**\n * @constant\n * @name secondsInMonth\n * @summary Seconds in 1 month\n */\nexport const secondsInMonth = secondsInYear / 12;\n\n/**\n * @constant\n * @name secondsInQuarter\n * @summary Seconds in 1 quarter.\n */\nexport const secondsInQuarter = secondsInMonth * 3;\n\n/**\n * @constant\n * @name constructFromSymbol\n * @summary Symbol enabling Date extensions to inherit properties from the reference date.\n *\n * The symbol is used to enable the `constructFrom` function to construct a date\n * using a reference date and a value. It allows to transfer extra properties\n * from the reference date to the new date. It's useful for extensions like\n * [`TZDate`](https://github.com/date-fns/tz) that accept a time zone as\n * a constructor argument.\n */\nexport const constructFromSymbol = Symbol.for(\"constructDateFrom\");\n","let defaultOptions = {};\n\nexport function getDefaultOptions() {\n  return defaultOptions;\n}\n\nexport function setDefaultOptions(newOptions) {\n  defaultOptions = newOptions;\n}\n","import { toDate } from \"./toDate.js\";\n\n/**\n * @name isEqual\n * @category Common Helpers\n * @summary Are the given dates equal?\n *\n * @description\n * Are the given dates equal?\n *\n * @param dateLeft - The first date to compare\n * @param dateRight - The second date to compare\n *\n * @returns The dates are equal\n *\n * @example\n * // Are 2 July 2014 06:30:45.000 and 2 July 2014 06:30:45.500 equal?\n * const result = isEqual(\n *   new Date(2014, 6, 2, 6, 30, 45, 0),\n *   new Date(2014, 6, 2, 6, 30, 45, 500)\n * )\n * //=> false\n */\nexport function isEqual(leftDate, rightDate) {\n  return +toDate(leftDate) === +toDate(rightDate);\n}\n\n// Fallback for modularized imports:\nexport default isEqual;\n","const dateLongFormatter = (pattern, formatLong) => {\n  switch (pattern) {\n    case \"P\":\n      return formatLong.date({ width: \"short\" });\n    case \"PP\":\n      return formatLong.date({ width: \"medium\" });\n    case \"PPP\":\n      return formatLong.date({ width: \"long\" });\n    case \"PPPP\":\n    default:\n      return formatLong.date({ width: \"full\" });\n  }\n};\n\nconst timeLongFormatter = (pattern, formatLong) => {\n  switch (pattern) {\n    case \"p\":\n      return formatLong.time({ width: \"short\" });\n    case \"pp\":\n      return formatLong.time({ width: \"medium\" });\n    case \"ppp\":\n      return formatLong.time({ width: \"long\" });\n    case \"pppp\":\n    default:\n      return formatLong.time({ width: \"full\" });\n  }\n};\n\nconst dateTimeLongFormatter = (pattern, formatLong) => {\n  const matchResult = pattern.match(/(P+)(p+)?/) || [];\n  const datePattern = matchResult[1];\n  const timePattern = matchResult[2];\n\n  if (!timePattern) {\n    return dateLongFormatter(pattern, formatLong);\n  }\n\n  let dateTimeFormat;\n\n  switch (datePattern) {\n    case \"P\":\n      dateTimeFormat = formatLong.dateTime({ width: \"short\" });\n      break;\n    case \"PP\":\n      dateTimeFormat = formatLong.dateTime({ width: \"medium\" });\n      break;\n    case \"PPP\":\n      dateTimeFormat = formatLong.dateTime({ width: \"long\" });\n      break;\n    case \"PPPP\":\n    default:\n      dateTimeFormat = formatLong.dateTime({ width: \"full\" });\n      break;\n  }\n\n  return dateTimeFormat\n    .replace(\"{{date}}\", dateLongFormatter(datePattern, formatLong))\n    .replace(\"{{time}}\", timeLongFormatter(timePattern, formatLong));\n};\n\nexport const longFormatters = {\n  p: timeLongFormatter,\n  P: dateTimeLongFormatter,\n};\n","/**\n * @name isDate\n * @category Common Helpers\n * @summary Is the given value a date?\n *\n * @description\n * Returns true if the given value is an instance of Date. The function works for dates transferred across iframes.\n *\n * @param value - The value to check\n *\n * @returns True if the given value is a date\n *\n * @example\n * // For a valid date:\n * const result = isDate(new Date())\n * //=> true\n *\n * @example\n * // For an invalid date:\n * const result = isDate(new Date(NaN))\n * //=> true\n *\n * @example\n * // For some value:\n * const result = isDate('2014-02-31')\n * //=> false\n *\n * @example\n * // For an object:\n * const result = isDate({})\n * //=> false\n */\nexport function isDate(value) {\n  return (\n    value instanceof Date ||\n    (typeof value === \"object\" &&\n      Object.prototype.toString.call(value) === \"[object Date]\")\n  );\n}\n\n// Fallback for modularized imports:\nexport default isDate;\n","import { isDate } from \"./isDate.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * @name isValid\n * @category Common Helpers\n * @summary Is the given date valid?\n *\n * @description\n * Returns false if argument is Invalid Date and true otherwise.\n * Argument is converted to Date using `toDate`. See [toDate](https://date-fns.org/docs/toDate)\n * Invalid Date is a Date, whose time value is NaN.\n *\n * Time value of Date: http://es5.github.io/#x15.9.1.1\n *\n * @param date - The date to check\n *\n * @returns The date is valid\n *\n * @example\n * // For the valid date:\n * const result = isValid(new Date(2014, 1, 31))\n * //=> true\n *\n * @example\n * // For the value, convertible into a date:\n * const result = isValid(1393804800000)\n * //=> true\n *\n * @example\n * // For the invalid date:\n * const result = isValid(new Date(''))\n * //=> false\n */\nexport function isValid(date) {\n  return !((!isDate(date) && typeof date !== \"number\") || isNaN(+toDate(date)));\n}\n\n// Fallback for modularized imports:\nexport default isValid;\n","import { constructFrom } from \"./constructFrom.js\";\nimport { getISOWeekYear } from \"./getISOWeekYear.js\";\nimport { startOfISOWeek } from \"./startOfISOWeek.js\";\n\n/**\n * The {@link startOfISOWeekYear} function options.\n */\n\n/**\n * @name startOfISOWeekYear\n * @category ISO Week-Numbering Year Helpers\n * @summary Return the start of an ISO week-numbering year for the given date.\n *\n * @description\n * Return the start of an ISO week-numbering year,\n * which always starts 3 days before the year's first Thursday.\n * The result will be in the local timezone.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The start of an ISO week-numbering year\n *\n * @example\n * // The start of an ISO week-numbering year for 2 July 2005:\n * const result = startOfISOWeekYear(new Date(2005, 6, 2))\n * //=> Mon Jan 03 2005 00:00:00\n */\nexport function startOfISOWeekYear(date, options) {\n  const year = getISOWeekYear(date, options);\n  const fourthOfJanuary = constructFrom(options?.in || date, 0);\n  fourthOfJanuary.setFullYear(year, 0, 4);\n  fourthOfJanuary.setHours(0, 0, 0, 0);\n  return startOfISOWeek(fourthOfJanuary);\n}\n\n// Fallback for modularized imports:\nexport default startOfISOWeekYear;\n","import { millisecondsInWeek } from \"./constants.js\";\nimport { startOfISOWeek } from \"./startOfISOWeek.js\";\nimport { startOfISOWeekYear } from \"./startOfISOWeekYear.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link getISOWeek} function options.\n */\n\n/**\n * @name getISOWeek\n * @category ISO Week Helpers\n * @summary Get the ISO week of the given date.\n *\n * @description\n * Get the ISO week of the given date.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @param date - The given date\n * @param options - The options\n *\n * @returns The ISO week\n *\n * @example\n * // Which week of the ISO-week numbering year is 2 January 2005?\n * const result = getISOWeek(new Date(2005, 0, 2))\n * //=> 53\n */\nexport function getISOWeek(date, options) {\n  const _date = toDate(date, options?.in);\n  const diff = +startOfISOWeek(_date) - +startOfISOWeekYear(_date);\n\n  // Round the number of weeks to the nearest integer because the number of\n  // milliseconds in a week is not constant (e.g. it's different in the week of\n  // the daylight saving time clock shift).\n  return Math.round(diff / millisecondsInWeek) + 1;\n}\n\n// Fallback for modularized imports:\nexport default getISOWeek;\n","import { getDefaultOptions as getInternalDefaultOptions } from \"./_lib/defaultOptions.js\";\n\n/**\n * @name getDefaultOptions\n * @category Common Helpers\n * @summary Get default options.\n * @pure false\n *\n * @description\n * Returns an object that contains defaults for\n * `options.locale`, `options.weekStartsOn` and `options.firstWeekContainsDate`\n * arguments for all functions.\n *\n * You can change these with [setDefaultOptions](https://date-fns.org/docs/setDefaultOptions).\n *\n * @returns The default options\n *\n * @example\n * const result = getDefaultOptions()\n * //=> {}\n *\n * @example\n * setDefaultOptions({ weekStarsOn: 1, firstWeekContainsDate: 4 })\n * const result = getDefaultOptions()\n * //=> { weekStarsOn: 1, firstWeekContainsDate: 4 }\n */\nexport function getDefaultOptions() {\n  return Object.assign({}, getInternalDefaultOptions());\n}\n\n// Fallback for modularized imports:\nexport default getDefaultOptions;\n","import { constructFrom } from \"../../constructFrom.js\";\nimport { transpose } from \"../../transpose.js\";\n\nconst TIMEZONE_UNIT_PRIORITY = 10;\n\nexport class Setter {\n  subPriority = 0;\n\n  validate(_utcDate, _options) {\n    return true;\n  }\n}\n\nexport class ValueSetter extends Setter {\n  constructor(\n    value,\n\n    validateValue,\n\n    setValue,\n\n    priority,\n    subPriority,\n  ) {\n    super();\n    this.value = value;\n    this.validateValue = validateValue;\n    this.setValue = setValue;\n    this.priority = priority;\n    if (subPriority) {\n      this.subPriority = subPriority;\n    }\n  }\n\n  validate(date, options) {\n    return this.validateValue(date, this.value, options);\n  }\n\n  set(date, flags, options) {\n    return this.setValue(date, flags, this.value, options);\n  }\n}\n\nexport class DateTimezoneSetter extends Setter {\n  priority = TIMEZONE_UNIT_PRIORITY;\n  subPriority = -1;\n\n  constructor(context, reference) {\n    super();\n    this.context = context || ((date) => constructFrom(reference, date));\n  }\n\n  set(date, flags) {\n    if (flags.timestampIsSet) return date;\n    return constructFrom(date, transpose(date, this.context));\n  }\n}\n","import { constructFrom } from \"./constructFrom.js\";\n\n/**\n * @name transpose\n * @category Generic Helpers\n * @summary Transpose the date to the given constructor.\n *\n * @description\n * The function transposes the date to the given constructor. It helps you\n * to transpose the date in the system time zone to say `UTCDate` or any other\n * date extension.\n *\n * @typeParam InputDate - The input `Date` type derived from the passed argument.\n * @typeParam ResultDate - The result `Date` type derived from the passed constructor.\n *\n * @param date - The date to use values from\n * @param constructor - The date constructor to use\n *\n * @returns Date transposed to the given constructor\n *\n * @example\n * // Create July 10, 2022 00:00 in locale time zone\n * const date = new Date(2022, 6, 10)\n * //=> 'Sun Jul 10 2022 00:00:00 GMT+0800 (Singapore Standard Time)'\n *\n * @example\n * // Transpose the date to July 10, 2022 00:00 in UTC\n * transpose(date, UTCDate)\n * //=> 'Sun Jul 10 2022 00:00:00 GMT+0000 (Coordinated Universal Time)'\n */\nexport function transpose(date, constructor) {\n  const date_ = isConstructor(constructor)\n    ? new constructor(0)\n    : constructFrom(constructor, 0);\n  date_.setFullYear(date.getFullYear(), date.getMonth(), date.getDate());\n  date_.setHours(\n    date.getHours(),\n    date.getMinutes(),\n    date.getSeconds(),\n    date.getMilliseconds(),\n  );\n  return date_;\n}\n\nfunction isConstructor(constructor) {\n  return (\n    typeof constructor === \"function\" &&\n    constructor.prototype?.constructor === constructor\n  );\n}\n\n// Fallback for modularized imports:\nexport default transpose;\n","import { ValueSetter } from \"./Setter.js\";\n\nexport class Parser {\n  run(dateString, token, match, options) {\n    const result = this.parse(dateString, token, match, options);\n    if (!result) {\n      return null;\n    }\n\n    return {\n      setter: new ValueSetter(\n        result.value,\n        this.validate,\n        this.set,\n        this.priority,\n        this.subPriority,\n      ),\n      rest: result.rest,\n    };\n  }\n\n  validate(_utcDate, _value, _options) {\n    return true;\n  }\n}\n","export const numericPatterns = {\n  month: /^(1[0-2]|0?\\d)/, // 0 to 12\n  date: /^(3[0-1]|[0-2]?\\d)/, // 0 to 31\n  dayOfYear: /^(36[0-6]|3[0-5]\\d|[0-2]?\\d?\\d)/, // 0 to 366\n  week: /^(5[0-3]|[0-4]?\\d)/, // 0 to 53\n  hour23h: /^(2[0-3]|[0-1]?\\d)/, // 0 to 23\n  hour24h: /^(2[0-4]|[0-1]?\\d)/, // 0 to 24\n  hour11h: /^(1[0-1]|0?\\d)/, // 0 to 11\n  hour12h: /^(1[0-2]|0?\\d)/, // 0 to 12\n  minute: /^[0-5]?\\d/, // 0 to 59\n  second: /^[0-5]?\\d/, // 0 to 59\n\n  singleDigit: /^\\d/, // 0 to 9\n  twoDigits: /^\\d{1,2}/, // 0 to 99\n  threeDigits: /^\\d{1,3}/, // 0 to 999\n  fourDigits: /^\\d{1,4}/, // 0 to 9999\n\n  anyDigitsSigned: /^-?\\d+/,\n  singleDigitSigned: /^-?\\d/, // 0 to 9, -0 to -9\n  twoDigitsSigned: /^-?\\d{1,2}/, // 0 to 99, -0 to -99\n  threeDigitsSigned: /^-?\\d{1,3}/, // 0 to 999, -0 to -999\n  fourDigitsSigned: /^-?\\d{1,4}/, // 0 to 9999, -0 to -9999\n};\n\nexport const timezonePatterns = {\n  basicOptionalMinutes: /^([+-])(\\d{2})(\\d{2})?|Z/,\n  basic: /^([+-])(\\d{2})(\\d{2})|Z/,\n  basicOptionalSeconds: /^([+-])(\\d{2})(\\d{2})((\\d{2}))?|Z/,\n  extended: /^([+-])(\\d{2}):(\\d{2})|Z/,\n  extendedOptionalSeconds: /^([+-])(\\d{2}):(\\d{2})(:(\\d{2}))?|Z/,\n};\n","import {\n  millisecondsInHour,\n  millisecondsInMinute,\n  millisecondsInSecond,\n} from \"../../constants.js\";\n\nimport { numericPatterns } from \"./constants.js\";\n\nexport function mapValue(parseFnResult, mapFn) {\n  if (!parseFnResult) {\n    return parseFnResult;\n  }\n\n  return {\n    value: mapFn(parseFnResult.value),\n    rest: parseFnResult.rest,\n  };\n}\n\nexport function parseNumericPattern(pattern, dateString) {\n  const matchResult = dateString.match(pattern);\n\n  if (!matchResult) {\n    return null;\n  }\n\n  return {\n    value: parseInt(matchResult[0], 10),\n    rest: dateString.slice(matchResult[0].length),\n  };\n}\n\nexport function parseTimezonePattern(pattern, dateString) {\n  const matchResult = dateString.match(pattern);\n\n  if (!matchResult) {\n    return null;\n  }\n\n  // Input is 'Z'\n  if (matchResult[0] === \"Z\") {\n    return {\n      value: 0,\n      rest: dateString.slice(1),\n    };\n  }\n\n  const sign = matchResult[1] === \"+\" ? 1 : -1;\n  const hours = matchResult[2] ? parseInt(matchResult[2], 10) : 0;\n  const minutes = matchResult[3] ? parseInt(matchResult[3], 10) : 0;\n  const seconds = matchResult[5] ? parseInt(matchResult[5], 10) : 0;\n\n  return {\n    value:\n      sign *\n      (hours * millisecondsInHour +\n        minutes * millisecondsInMinute +\n        seconds * millisecondsInSecond),\n    rest: dateString.slice(matchResult[0].length),\n  };\n}\n\nexport function parseAnyDigitsSigned(dateString) {\n  return parseNumericPattern(numericPatterns.anyDigitsSigned, dateString);\n}\n\nexport function parseNDigits(n, dateString) {\n  switch (n) {\n    case 1:\n      return parseNumericPattern(numericPatterns.singleDigit, dateString);\n    case 2:\n      return parseNumericPattern(numericPatterns.twoDigits, dateString);\n    case 3:\n      return parseNumericPattern(numericPatterns.threeDigits, dateString);\n    case 4:\n      return parseNumericPattern(numericPatterns.fourDigits, dateString);\n    default:\n      return parseNumericPattern(new RegExp(\"^\\\\d{1,\" + n + \"}\"), dateString);\n  }\n}\n\nexport function parseNDigitsSigned(n, dateString) {\n  switch (n) {\n    case 1:\n      return parseNumericPattern(numericPatterns.singleDigitSigned, dateString);\n    case 2:\n      return parseNumericPattern(numericPatterns.twoDigitsSigned, dateString);\n    case 3:\n      return parseNumericPattern(numericPatterns.threeDigitsSigned, dateString);\n    case 4:\n      return parseNumericPattern(numericPatterns.fourDigitsSigned, dateString);\n    default:\n      return parseNumericPattern(new RegExp(\"^-?\\\\d{1,\" + n + \"}\"), dateString);\n  }\n}\n\nexport function dayPeriodEnumToHours(dayPeriod) {\n  switch (dayPeriod) {\n    case \"morning\":\n      return 4;\n    case \"evening\":\n      return 17;\n    case \"pm\":\n    case \"noon\":\n    case \"afternoon\":\n      return 12;\n    case \"am\":\n    case \"midnight\":\n    case \"night\":\n    default:\n      return 0;\n  }\n}\n\nexport function normalizeTwoDigitYear(twoDigitYear, currentYear) {\n  const isCommonEra = currentYear > 0;\n  // Absolute number of the current year:\n  // 1 -> 1 AC\n  // 0 -> 1 BC\n  // -1 -> 2 BC\n  const absCurrentYear = isCommonEra ? currentYear : 1 - currentYear;\n\n  let result;\n  if (absCurrentYear <= 50) {\n    result = twoDigitYear || 100;\n  } else {\n    const rangeEnd = absCurrentYear + 50;\n    const rangeEndCentury = Math.trunc(rangeEnd / 100) * 100;\n    const isPreviousCentury = twoDigitYear >= rangeEnd % 100;\n    result = twoDigitYear + rangeEndCentury - (isPreviousCentury ? 100 : 0);\n  }\n\n  return isCommonEra ? result : 1 - result;\n}\n\nexport function isLeapYearIndex(year) {\n  return year % 400 === 0 || (year % 4 === 0 && year % 100 !== 0);\n}\n","import { numericPatterns } from \"../constants.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport {\n  isLeapYearIndex,\n  parseNDigits,\n  parseNumericPattern,\n} from \"../utils.js\";\n\nconst DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\nconst DAYS_IN_MONTH_LEAP_YEAR = [\n  31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31,\n];\n\n// Day of the month\nexport class DateParser extends Parser {\n  priority = 90;\n  subPriority = 1;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"d\":\n        return parseNumericPattern(numericPatterns.date, dateString);\n      case \"do\":\n        return match.ordinalNumber(dateString, { unit: \"date\" });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(date, value) {\n    const year = date.getFullYear();\n    const isLeapYear = isLeapYearIndex(year);\n    const month = date.getMonth();\n    if (isLeapYear) {\n      return value >= 1 && value <= DAYS_IN_MONTH_LEAP_YEAR[month];\n    } else {\n      return value >= 1 && value <= DAYS_IN_MONTH[month];\n    }\n  }\n\n  set(date, _flags, value) {\n    date.setDate(value);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\n    \"Y\",\n    \"R\",\n    \"q\",\n    \"Q\",\n    \"w\",\n    \"I\",\n    \"D\",\n    \"i\",\n    \"e\",\n    \"c\",\n    \"t\",\n    \"T\",\n  ];\n}\n","import { constructFrom } from \"./constructFrom.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link addDays} function options.\n */\n\n/**\n * @name addDays\n * @category Day Helpers\n * @summary Add the specified number of days to the given date.\n *\n * @description\n * Add the specified number of days to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The date to be changed\n * @param amount - The amount of days to be added.\n * @param options - An object with options\n *\n * @returns The new date with the days added\n *\n * @example\n * // Add 10 days to 1 September 2014:\n * const result = addDays(new Date(2014, 8, 1), 10)\n * //=> Thu Sep 11 2014 00:00:00\n */\nexport function addDays(date, amount, options) {\n  const _date = toDate(date, options?.in);\n  if (isNaN(amount)) return constructFrom(options?.in || date, NaN);\n\n  // If 0 days, no-op to avoid changing times in the hour before end of DST\n  if (!amount) return _date;\n\n  _date.setDate(_date.getDate() + amount);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default addDays;\n","import { getDefaultOptions } from \"./_lib/defaultOptions.js\";\nimport { addDays } from \"./addDays.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link setDay} function options.\n */\n\n/**\n * @name setDay\n * @category Weekday Helpers\n * @summary Set the day of the week to the given date.\n *\n * @description\n * Set the day of the week to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The date to be changed\n * @param day - The day of the week of the new date\n * @param options - An object with options.\n *\n * @returns The new date with the day of the week set\n *\n * @example\n * // Set week day to Sunday, with the default weekStartsOn of Sunday:\n * const result = setDay(new Date(2014, 8, 1), 0)\n * //=> Sun Aug 31 2014 00:00:00\n *\n * @example\n * // Set week day to Sunday, with a weekStartsOn of Monday:\n * const result = setDay(new Date(2014, 8, 1), 0, { weekStartsOn: 1 })\n * //=> Sun Sep 07 2014 00:00:00\n */\nexport function setDay(date, day, options) {\n  const defaultOptions = getDefaultOptions();\n  const weekStartsOn =\n    options?.weekStartsOn ??\n    options?.locale?.options?.weekStartsOn ??\n    defaultOptions.weekStartsOn ??\n    defaultOptions.locale?.options?.weekStartsOn ??\n    0;\n\n  const date_ = toDate(date, options?.in);\n  const currentDay = date_.getDay();\n\n  const remainder = day % 7;\n  const dayIndex = (remainder + 7) % 7;\n\n  const delta = 7 - weekStartsOn;\n  const diff =\n    day < 0 || day > 6\n      ? day - ((currentDay + delta) % 7)\n      : ((dayIndex + delta) % 7) - ((currentDay + delta) % 7);\n  return addDays(date_, diff, options);\n}\n\n// Fallback for modularized imports:\nexport default setDay;\n","import { addDays } from \"./addDays.js\";\nimport { getISODay } from \"./getISODay.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link setISODay} function options.\n */\n\n/**\n * @name setISODay\n * @category Weekday Helpers\n * @summary Set the day of the ISO week to the given date.\n *\n * @description\n * Set the day of the ISO week to the given date.\n * ISO week starts with Monday.\n * 7 is the index of Sunday, 1 is the index of Monday, etc.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The date to be changed\n * @param day - The day of the ISO week of the new date\n * @param options - An object with options\n *\n * @returns The new date with the day of the ISO week set\n *\n * @example\n * // Set Sunday to 1 September 2014:\n * const result = setISODay(new Date(2014, 8, 1), 7)\n * //=> Sun Sep 07 2014 00:00:00\n */\nexport function setISODay(date, day, options) {\n  const date_ = toDate(date, options?.in);\n  const currentDay = getISODay(date_, options);\n  const diff = day - currentDay;\n  return addDays(date_, diff, options);\n}\n\n// Fallback for modularized imports:\nexport default setISODay;\n","import { toDate } from \"./toDate.js\";\n\n/**\n * The {@link getISODay} function options.\n */\n\n/**\n * @name getISODay\n * @category Weekday Helpers\n * @summary Get the day of the ISO week of the given date.\n *\n * @description\n * Get the day of the ISO week of the given date,\n * which is 7 for Sunday, 1 for Monday etc.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @param date - The given date\n * @param options - An object with options\n *\n * @returns The day of ISO week\n *\n * @example\n * // Which day of the ISO week is 26 February 2012?\n * const result = getISODay(new Date(2012, 1, 26))\n * //=> 7\n */\nexport function getISODay(date, options) {\n  const day = toDate(date, options?.in).getDay();\n  return day === 0 ? 7 : day;\n}\n\n// Fallback for modularized imports:\nexport default getISODay;\n","import { EraParser } from \"./parsers/EraParser.js\";\nimport { YearParser } from \"./parsers/YearParser.js\";\nimport { LocalWeekYearParser } from \"./parsers/LocalWeekYearParser.js\";\nimport { ISOWeekYearParser } from \"./parsers/ISOWeekYearParser.js\";\nimport { ExtendedYearParser } from \"./parsers/ExtendedYearParser.js\";\nimport { QuarterParser } from \"./parsers/QuarterParser.js\";\nimport { StandAloneQuarterParser } from \"./parsers/StandAloneQuarterParser.js\";\nimport { MonthParser } from \"./parsers/MonthParser.js\";\nimport { StandAloneMonthParser } from \"./parsers/StandAloneMonthParser.js\";\nimport { LocalWeekParser } from \"./parsers/LocalWeekParser.js\";\nimport { ISOWeekParser } from \"./parsers/ISOWeekParser.js\";\nimport { DateParser } from \"./parsers/DateParser.js\";\nimport { DayOfYearParser } from \"./parsers/DayOfYearParser.js\";\nimport { DayParser } from \"./parsers/DayParser.js\";\nimport { LocalDayParser } from \"./parsers/LocalDayParser.js\";\nimport { StandAloneLocalDayParser } from \"./parsers/StandAloneLocalDayParser.js\";\nimport { ISODayParser } from \"./parsers/ISODayParser.js\";\nimport { AMPMParser } from \"./parsers/AMPMParser.js\";\nimport { AMPMMidnightParser } from \"./parsers/AMPMMidnightParser.js\";\nimport { DayPeriodParser } from \"./parsers/DayPeriodParser.js\";\nimport { Hour1to12Parser } from \"./parsers/Hour1to12Parser.js\";\nimport { Hour0to23Parser } from \"./parsers/Hour0to23Parser.js\";\nimport { Hour0To11Parser } from \"./parsers/Hour0To11Parser.js\";\nimport { Hour1To24Parser } from \"./parsers/Hour1To24Parser.js\";\nimport { MinuteParser } from \"./parsers/MinuteParser.js\";\nimport { SecondParser } from \"./parsers/SecondParser.js\";\nimport { FractionOfSecondParser } from \"./parsers/FractionOfSecondParser.js\";\nimport { ISOTimezoneWithZParser } from \"./parsers/ISOTimezoneWithZParser.js\";\nimport { ISOTimezoneParser } from \"./parsers/ISOTimezoneParser.js\";\nimport { TimestampSecondsParser } from \"./parsers/TimestampSecondsParser.js\";\nimport { TimestampMillisecondsParser } from \"./parsers/TimestampMillisecondsParser.js\";\n\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* | Milliseconds in day            |\n * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |\n * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |\n * |  d  | Day of month                   |  D  | Day of year                    |\n * |  e  | Local day of week              |  E  | Day of week                    |\n * |  f  |                                |  F* | Day of week in month           |\n * |  g* | Modified Julian day            |  G  | Era                            |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  i! | ISO day of week                |  I! | ISO week of year               |\n * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |\n * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |\n * |  l* | (deprecated)                   |  L  | Stand-alone month              |\n * |  m  | Minute                         |  M  | Month                          |\n * |  n  |                                |  N  |                                |\n * |  o! | Ordinal number modifier        |  O* | Timezone (GMT)                 |\n * |  p  |                                |  P  |                                |\n * |  q  | Stand-alone quarter            |  Q  | Quarter                        |\n * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |\n * |  u  | Extended year                  |  U* | Cyclic year                    |\n * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |\n * |  w  | Local week of year             |  W* | Week of month                  |\n * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |\n * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |\n * |  z* | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n *\n * Letters marked by ! are non-standard, but implemented by date-fns:\n * - `o` modifies the previous token to turn it into an ordinal (see `parse` docs)\n * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,\n *   i.e. 7 for Sunday, 1 for Monday, etc.\n * - `I` is ISO week of year, as opposed to `w` which is local week of year.\n * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.\n *   `R` is supposed to be used in conjunction with `I` and `i`\n *   for universal ISO week-numbering date, whereas\n *   `Y` is supposed to be used in conjunction with `w` and `e`\n *   for week-numbering date specific to the locale.\n */\nexport const parsers = {\n  G: new EraParser(),\n  y: new YearParser(),\n  Y: new LocalWeekYearParser(),\n  R: new ISOWeekYearParser(),\n  u: new ExtendedYearParser(),\n  Q: new QuarterParser(),\n  q: new StandAloneQuarterParser(),\n  M: new MonthParser(),\n  L: new StandAloneMonthParser(),\n  w: new LocalWeekParser(),\n  I: new ISOWeekParser(),\n  d: new DateParser(),\n  D: new DayOfYearParser(),\n  E: new DayParser(),\n  e: new LocalDayParser(),\n  c: new StandAloneLocalDayParser(),\n  i: new ISODayParser(),\n  a: new AMPMParser(),\n  b: new AMPMMidnightParser(),\n  B: new DayPeriodParser(),\n  h: new Hour1to12Parser(),\n  H: new Hour0to23Parser(),\n  K: new Hour0To11Parser(),\n  k: new Hour1To24Parser(),\n  m: new MinuteParser(),\n  s: new SecondParser(),\n  S: new FractionOfSecondParser(),\n  X: new ISOTimezoneWithZParser(),\n  x: new ISOTimezoneParser(),\n  t: new TimestampSecondsParser(),\n  T: new TimestampMillisecondsParser(),\n};\n","import { Parser } from \"../Parser.js\";\n\nexport class EraParser extends Parser {\n  priority = 140;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      // AD, BC\n      case \"G\":\n      case \"GG\":\n      case \"GGG\":\n        return (\n          match.era(dateString, { width: \"abbreviated\" }) ||\n          match.era(dateString, { width: \"narrow\" })\n        );\n\n      // A, B\n      case \"GGGGG\":\n        return match.era(dateString, { width: \"narrow\" });\n      // Anno Domini, Before Christ\n      case \"GGGG\":\n      default:\n        return (\n          match.era(dateString, { width: \"wide\" }) ||\n          match.era(dateString, { width: \"abbreviated\" }) ||\n          match.era(dateString, { width: \"narrow\" })\n        );\n    }\n  }\n\n  set(date, flags, value) {\n    flags.era = value;\n    date.setFullYear(value, 0, 1);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\"R\", \"u\", \"t\", \"T\"];\n}\n","import { Parser } from \"../Parser.js\";\n\nimport { mapValue, normalizeTwoDigitYear, parseNDigits } from \"../utils.js\";\n\n// From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_Patterns\n// | Year     |     y | yy |   yyy |  yyyy | yyyyy |\n// |----------|-------|----|-------|-------|-------|\n// | AD 1     |     1 | 01 |   001 |  0001 | 00001 |\n// | AD 12    |    12 | 12 |   012 |  0012 | 00012 |\n// | AD 123   |   123 | 23 |   123 |  0123 | 00123 |\n// | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |\n// | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |\nexport class YearParser extends Parser {\n  priority = 130;\n  incompatibleTokens = [\"Y\", \"R\", \"u\", \"w\", \"I\", \"i\", \"e\", \"c\", \"t\", \"T\"];\n\n  parse(dateString, token, match) {\n    const valueCallback = (year) => ({\n      year,\n      isTwoDigitYear: token === \"yy\",\n    });\n\n    switch (token) {\n      case \"y\":\n        return mapValue(parseNDigits(4, dateString), valueCallback);\n      case \"yo\":\n        return mapValue(\n          match.ordinalNumber(dateString, {\n            unit: \"year\",\n          }),\n          valueCallback,\n        );\n      default:\n        return mapValue(parseNDigits(token.length, dateString), valueCallback);\n    }\n  }\n\n  validate(_date, value) {\n    return value.isTwoDigitYear || value.year > 0;\n  }\n\n  set(date, flags, value) {\n    const currentYear = date.getFullYear();\n\n    if (value.isTwoDigitYear) {\n      const normalizedTwoDigitYear = normalizeTwoDigitYear(\n        value.year,\n        currentYear,\n      );\n      date.setFullYear(normalizedTwoDigitYear, 0, 1);\n      date.setHours(0, 0, 0, 0);\n      return date;\n    }\n\n    const year =\n      !(\"era\" in flags) || flags.era === 1 ? value.year : 1 - value.year;\n    date.setFullYear(year, 0, 1);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n}\n","import { getWeekYear } from \"../../../getWeekYear.js\";\n\nimport { startOfWeek } from \"../../../startOfWeek.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { mapValue, normalizeTwoDigitYear, parseNDigits } from \"../utils.js\";\n\n// Local week-numbering year\nexport class LocalWeekYearParser extends Parser {\n  priority = 130;\n\n  parse(dateString, token, match) {\n    const valueCallback = (year) => ({\n      year,\n      isTwoDigitYear: token === \"YY\",\n    });\n\n    switch (token) {\n      case \"Y\":\n        return mapValue(parseNDigits(4, dateString), valueCallback);\n      case \"Yo\":\n        return mapValue(\n          match.ordinalNumber(dateString, {\n            unit: \"year\",\n          }),\n          valueCallback,\n        );\n      default:\n        return mapValue(parseNDigits(token.length, dateString), valueCallback);\n    }\n  }\n\n  validate(_date, value) {\n    return value.isTwoDigitYear || value.year > 0;\n  }\n\n  set(date, flags, value, options) {\n    const currentYear = getWeekYear(date, options);\n\n    if (value.isTwoDigitYear) {\n      const normalizedTwoDigitYear = normalizeTwoDigitYear(\n        value.year,\n        currentYear,\n      );\n      date.setFullYear(\n        normalizedTwoDigitYear,\n        0,\n        options.firstWeekContainsDate,\n      );\n      date.setHours(0, 0, 0, 0);\n      return startOfWeek(date, options);\n    }\n\n    const year =\n      !(\"era\" in flags) || flags.era === 1 ? value.year : 1 - value.year;\n    date.setFullYear(year, 0, options.firstWeekContainsDate);\n    date.setHours(0, 0, 0, 0);\n    return startOfWeek(date, options);\n  }\n\n  incompatibleTokens = [\n    \"y\",\n    \"R\",\n    \"u\",\n    \"Q\",\n    \"q\",\n    \"M\",\n    \"L\",\n    \"I\",\n    \"d\",\n    \"D\",\n    \"i\",\n    \"t\",\n    \"T\",\n  ];\n}\n","import { startOfISOWeek } from \"../../../startOfISOWeek.js\";\nimport { constructFrom } from \"../../../constructFrom.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { parseNDigitsSigned } from \"../utils.js\";\n\n// ISO week-numbering year\nexport class ISOWeekYearParser extends Parser {\n  priority = 130;\n\n  parse(dateString, token) {\n    if (token === \"R\") {\n      return parseNDigitsSigned(4, dateString);\n    }\n\n    return parseNDigitsSigned(token.length, dateString);\n  }\n\n  set(date, _flags, value) {\n    const firstWeekOfYear = constructFrom(date, 0);\n    firstWeekOfYear.setFullYear(value, 0, 4);\n    firstWeekOfYear.setHours(0, 0, 0, 0);\n    return startOfISOWeek(firstWeekOfYear);\n  }\n\n  incompatibleTokens = [\n    \"G\",\n    \"y\",\n    \"Y\",\n    \"u\",\n    \"Q\",\n    \"q\",\n    \"M\",\n    \"L\",\n    \"w\",\n    \"d\",\n    \"D\",\n    \"e\",\n    \"c\",\n    \"t\",\n    \"T\",\n  ];\n}\n","import { Parser } from \"../Parser.js\";\n\nimport { parseNDigitsSigned } from \"../utils.js\";\n\nexport class ExtendedYearParser extends Parser {\n  priority = 130;\n\n  parse(dateString, token) {\n    if (token === \"u\") {\n      return parseNDigitsSigned(4, dateString);\n    }\n\n    return parseNDigitsSigned(token.length, dateString);\n  }\n\n  set(date, _flags, value) {\n    date.setFullYear(value, 0, 1);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\"G\", \"y\", \"Y\", \"R\", \"w\", \"I\", \"i\", \"e\", \"c\", \"t\", \"T\"];\n}\n","import { Parser } from \"../Parser.js\";\n\nimport { parseNDigits } from \"../utils.js\";\n\nexport class QuarterParser extends Parser {\n  priority = 120;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      // 1, 2, 3, 4\n      case \"Q\":\n      case \"QQ\": // 01, 02, 03, 04\n        return parseNDigits(token.length, dateString);\n      // 1st, 2nd, 3rd, 4th\n      case \"Qo\":\n        return match.ordinalNumber(dateString, { unit: \"quarter\" });\n      // Q1, Q2, Q3, Q4\n      case \"QQQ\":\n        return (\n          match.quarter(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.quarter(dateString, {\n            width: \"narrow\",\n            context: \"formatting\",\n          })\n        );\n\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n      case \"QQQQQ\":\n        return match.quarter(dateString, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // 1st quarter, 2nd quarter, ...\n      case \"QQQQ\":\n      default:\n        return (\n          match.quarter(dateString, {\n            width: \"wide\",\n            context: \"formatting\",\n          }) ||\n          match.quarter(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.quarter(dateString, {\n            width: \"narrow\",\n            context: \"formatting\",\n          })\n        );\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 1 && value <= 4;\n  }\n\n  set(date, _flags, value) {\n    date.setMonth((value - 1) * 3, 1);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\n    \"Y\",\n    \"R\",\n    \"q\",\n    \"M\",\n    \"L\",\n    \"w\",\n    \"I\",\n    \"d\",\n    \"D\",\n    \"i\",\n    \"e\",\n    \"c\",\n    \"t\",\n    \"T\",\n  ];\n}\n","import { Parser } from \"../Parser.js\";\n\nimport { parseNDigits } from \"../utils.js\";\n\nexport class StandAloneQuarterParser extends Parser {\n  priority = 120;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      // 1, 2, 3, 4\n      case \"q\":\n      case \"qq\": // 01, 02, 03, 04\n        return parseNDigits(token.length, dateString);\n      // 1st, 2nd, 3rd, 4th\n      case \"qo\":\n        return match.ordinalNumber(dateString, { unit: \"quarter\" });\n      // Q1, Q2, Q3, Q4\n      case \"qqq\":\n        return (\n          match.quarter(dateString, {\n            width: \"abbreviated\",\n            context: \"standalone\",\n          }) ||\n          match.quarter(dateString, {\n            width: \"narrow\",\n            context: \"standalone\",\n          })\n        );\n\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n      case \"qqqqq\":\n        return match.quarter(dateString, {\n          width: \"narrow\",\n          context: \"standalone\",\n        });\n      // 1st quarter, 2nd quarter, ...\n      case \"qqqq\":\n      default:\n        return (\n          match.quarter(dateString, {\n            width: \"wide\",\n            context: \"standalone\",\n          }) ||\n          match.quarter(dateString, {\n            width: \"abbreviated\",\n            context: \"standalone\",\n          }) ||\n          match.quarter(dateString, {\n            width: \"narrow\",\n            context: \"standalone\",\n          })\n        );\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 1 && value <= 4;\n  }\n\n  set(date, _flags, value) {\n    date.setMonth((value - 1) * 3, 1);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\n    \"Y\",\n    \"R\",\n    \"Q\",\n    \"M\",\n    \"L\",\n    \"w\",\n    \"I\",\n    \"d\",\n    \"D\",\n    \"i\",\n    \"e\",\n    \"c\",\n    \"t\",\n    \"T\",\n  ];\n}\n","import { numericPatterns } from \"../constants.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { mapValue, parseNDigits, parseNumericPattern } from \"../utils.js\";\n\nexport class MonthParser extends Parser {\n  incompatibleTokens = [\n    \"Y\",\n    \"R\",\n    \"q\",\n    \"Q\",\n    \"L\",\n    \"w\",\n    \"I\",\n    \"D\",\n    \"i\",\n    \"e\",\n    \"c\",\n    \"t\",\n    \"T\",\n  ];\n\n  priority = 110;\n\n  parse(dateString, token, match) {\n    const valueCallback = (value) => value - 1;\n\n    switch (token) {\n      // 1, 2, ..., 12\n      case \"M\":\n        return mapValue(\n          parseNumericPattern(numericPatterns.month, dateString),\n          valueCallback,\n        );\n      // 01, 02, ..., 12\n      case \"MM\":\n        return mapValue(parseNDigits(2, dateString), valueCallback);\n      // 1st, 2nd, ..., 12th\n      case \"Mo\":\n        return mapValue(\n          match.ordinalNumber(dateString, {\n            unit: \"month\",\n          }),\n          valueCallback,\n        );\n      // Jan, Feb, ..., Dec\n      case \"MMM\":\n        return (\n          match.month(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.month(dateString, { width: \"narrow\", context: \"formatting\" })\n        );\n\n      // J, F, ..., D\n      case \"MMMMM\":\n        return match.month(dateString, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // January, February, ..., December\n      case \"MMMM\":\n      default:\n        return (\n          match.month(dateString, { width: \"wide\", context: \"formatting\" }) ||\n          match.month(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.month(dateString, { width: \"narrow\", context: \"formatting\" })\n        );\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 0 && value <= 11;\n  }\n\n  set(date, _flags, value) {\n    date.setMonth(value, 1);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n}\n","import { numericPatterns } from \"../constants.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { mapValue, parseNDigits, parseNumericPattern } from \"../utils.js\";\n\nexport class StandAloneMonthParser extends Parser {\n  priority = 110;\n\n  parse(dateString, token, match) {\n    const valueCallback = (value) => value - 1;\n\n    switch (token) {\n      // 1, 2, ..., 12\n      case \"L\":\n        return mapValue(\n          parseNumericPattern(numericPatterns.month, dateString),\n          valueCallback,\n        );\n      // 01, 02, ..., 12\n      case \"LL\":\n        return mapValue(parseNDigits(2, dateString), valueCallback);\n      // 1st, 2nd, ..., 12th\n      case \"Lo\":\n        return mapValue(\n          match.ordinalNumber(dateString, {\n            unit: \"month\",\n          }),\n          valueCallback,\n        );\n      // Jan, Feb, ..., Dec\n      case \"LLL\":\n        return (\n          match.month(dateString, {\n            width: \"abbreviated\",\n            context: \"standalone\",\n          }) ||\n          match.month(dateString, { width: \"narrow\", context: \"standalone\" })\n        );\n\n      // J, F, ..., D\n      case \"LLLLL\":\n        return match.month(dateString, {\n          width: \"narrow\",\n          context: \"standalone\",\n        });\n      // January, February, ..., December\n      case \"LLLL\":\n      default:\n        return (\n          match.month(dateString, { width: \"wide\", context: \"standalone\" }) ||\n          match.month(dateString, {\n            width: \"abbreviated\",\n            context: \"standalone\",\n          }) ||\n          match.month(dateString, { width: \"narrow\", context: \"standalone\" })\n        );\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 0 && value <= 11;\n  }\n\n  set(date, _flags, value) {\n    date.setMonth(value, 1);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\n    \"Y\",\n    \"R\",\n    \"q\",\n    \"Q\",\n    \"M\",\n    \"w\",\n    \"I\",\n    \"D\",\n    \"i\",\n    \"e\",\n    \"c\",\n    \"t\",\n    \"T\",\n  ];\n}\n","import { setWeek } from \"../../../setWeek.js\";\nimport { startOfWeek } from \"../../../startOfWeek.js\";\nimport { numericPatterns } from \"../constants.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { parseNDigits, parseNumericPattern } from \"../utils.js\";\n\n// Local week of year\nexport class LocalWeekParser extends Parser {\n  priority = 100;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"w\":\n        return parseNumericPattern(numericPatterns.week, dateString);\n      case \"wo\":\n        return match.ordinalNumber(dateString, { unit: \"week\" });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 1 && value <= 53;\n  }\n\n  set(date, _flags, value, options) {\n    return startOfWeek(setWeek(date, value, options), options);\n  }\n\n  incompatibleTokens = [\n    \"y\",\n    \"R\",\n    \"u\",\n    \"q\",\n    \"Q\",\n    \"M\",\n    \"L\",\n    \"I\",\n    \"d\",\n    \"D\",\n    \"i\",\n    \"t\",\n    \"T\",\n  ];\n}\n","import { getWeek } from \"./getWeek.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link setWeek} function options.\n */\n\n/**\n * @name setWeek\n * @category Week Helpers\n * @summary Set the local week to the given date.\n *\n * @description\n * Set the local week to the given date, saving the weekday number.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The date to be changed\n * @param week - The week of the new date\n * @param options - An object with options\n *\n * @returns The new date with the local week set\n *\n * @example\n * // Set the 1st week to 2 January 2005 with default options:\n * const result = setWeek(new Date(2005, 0, 2), 1)\n * //=> Sun Dec 26 2004 00:00:00\n *\n * @example\n * // Set the 1st week to 2 January 2005,\n * // if Monday is the first day of the week,\n * // and the first week of the year always contains 4 January:\n * const result = setWeek(new Date(2005, 0, 2), 1, {\n *   weekStartsOn: 1,\n *   firstWeekContainsDate: 4\n * })\n * //=> Sun Jan 4 2004 00:00:00\n */\nexport function setWeek(date, week, options) {\n  const date_ = toDate(date, options?.in);\n  const diff = getWeek(date_, options) - week;\n  date_.setDate(date_.getDate() - diff * 7);\n  return toDate(date_, options?.in);\n}\n\n// Fallback for modularized imports:\nexport default setWeek;\n","import { setISOWeek } from \"../../../setISOWeek.js\";\nimport { startOfISOWeek } from \"../../../startOfISOWeek.js\";\nimport { numericPatterns } from \"../constants.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { parseNDigits, parseNumericPattern } from \"../utils.js\";\n\n// ISO week of year\nexport class ISOWeekParser extends Parser {\n  priority = 100;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"I\":\n        return parseNumericPattern(numericPatterns.week, dateString);\n      case \"Io\":\n        return match.ordinalNumber(dateString, { unit: \"week\" });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 1 && value <= 53;\n  }\n\n  set(date, _flags, value) {\n    return startOfISOWeek(setISOWeek(date, value));\n  }\n\n  incompatibleTokens = [\n    \"y\",\n    \"Y\",\n    \"u\",\n    \"q\",\n    \"Q\",\n    \"M\",\n    \"L\",\n    \"w\",\n    \"d\",\n    \"D\",\n    \"e\",\n    \"c\",\n    \"t\",\n    \"T\",\n  ];\n}\n","import { getISOWeek } from \"./getISOWeek.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link setISOWeek} function options.\n */\n\n/**\n * @name setISOWeek\n * @category ISO Week Helpers\n * @summary Set the ISO week to the given date.\n *\n * @description\n * Set the ISO week to the given date, saving the weekday number.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The `Date` type of the context function.\n *\n * @param date - The date to be changed\n * @param week - The ISO week of the new date\n * @param options - An object with options\n *\n * @returns The new date with the ISO week set\n *\n * @example\n * // Set the 53rd ISO week to 7 August 2004:\n * const result = setISOWeek(new Date(2004, 7, 7), 53)\n * //=> Sat Jan 01 2005 00:00:00\n */\nexport function setISOWeek(date, week, options) {\n  const _date = toDate(date, options?.in);\n  const diff = getISOWeek(_date, options) - week;\n  _date.setDate(_date.getDate() - diff * 7);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default setISOWeek;\n","import { numericPatterns } from \"../constants.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport {\n  isLeapYearIndex,\n  parseNDigits,\n  parseNumericPattern,\n} from \"../utils.js\";\n\nexport class DayOfYearParser extends Parser {\n  priority = 90;\n\n  subpriority = 1;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"D\":\n      case \"DD\":\n        return parseNumericPattern(numericPatterns.dayOfYear, dateString);\n      case \"Do\":\n        return match.ordinalNumber(dateString, { unit: \"date\" });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(date, value) {\n    const year = date.getFullYear();\n    const isLeapYear = isLeapYearIndex(year);\n    if (isLeapYear) {\n      return value >= 1 && value <= 366;\n    } else {\n      return value >= 1 && value <= 365;\n    }\n  }\n\n  set(date, _flags, value) {\n    date.setMonth(0, value);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\n    \"Y\",\n    \"R\",\n    \"q\",\n    \"Q\",\n    \"M\",\n    \"L\",\n    \"w\",\n    \"I\",\n    \"d\",\n    \"E\",\n    \"i\",\n    \"e\",\n    \"c\",\n    \"t\",\n    \"T\",\n  ];\n}\n","import { setDay } from \"../../../setDay.js\";\nimport { Parser } from \"../Parser.js\";\n\n// Day of week\nexport class DayParser extends Parser {\n  priority = 90;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      // Tue\n      case \"E\":\n      case \"EE\":\n      case \"EEE\":\n        return (\n          match.day(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.day(dateString, { width: \"short\", context: \"formatting\" }) ||\n          match.day(dateString, { width: \"narrow\", context: \"formatting\" })\n        );\n\n      // T\n      case \"EEEEE\":\n        return match.day(dateString, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // Tu\n      case \"EEEEEE\":\n        return (\n          match.day(dateString, { width: \"short\", context: \"formatting\" }) ||\n          match.day(dateString, { width: \"narrow\", context: \"formatting\" })\n        );\n\n      // Tuesday\n      case \"EEEE\":\n      default:\n        return (\n          match.day(dateString, { width: \"wide\", context: \"formatting\" }) ||\n          match.day(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.day(dateString, { width: \"short\", context: \"formatting\" }) ||\n          match.day(dateString, { width: \"narrow\", context: \"formatting\" })\n        );\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 0 && value <= 6;\n  }\n\n  set(date, _flags, value, options) {\n    date = setDay(date, value, options);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\"D\", \"i\", \"e\", \"c\", \"t\", \"T\"];\n}\n","import { setDay } from \"../../../setDay.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { mapValue, parseNDigits } from \"../utils.js\";\n\n// Local day of week\nexport class LocalDayParser extends Parser {\n  priority = 90;\n  parse(dateString, token, match, options) {\n    const valueCallback = (value) => {\n      // We want here floor instead of trunc, so we get -7 for value 0 instead of 0\n      const wholeWeekDays = Math.floor((value - 1) / 7) * 7;\n      return ((value + options.weekStartsOn + 6) % 7) + wholeWeekDays;\n    };\n\n    switch (token) {\n      // 3\n      case \"e\":\n      case \"ee\": // 03\n        return mapValue(parseNDigits(token.length, dateString), valueCallback);\n      // 3rd\n      case \"eo\":\n        return mapValue(\n          match.ordinalNumber(dateString, {\n            unit: \"day\",\n          }),\n          valueCallback,\n        );\n      // Tue\n      case \"eee\":\n        return (\n          match.day(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.day(dateString, { width: \"short\", context: \"formatting\" }) ||\n          match.day(dateString, { width: \"narrow\", context: \"formatting\" })\n        );\n\n      // T\n      case \"eeeee\":\n        return match.day(dateString, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // Tu\n      case \"eeeeee\":\n        return (\n          match.day(dateString, { width: \"short\", context: \"formatting\" }) ||\n          match.day(dateString, { width: \"narrow\", context: \"formatting\" })\n        );\n\n      // Tuesday\n      case \"eeee\":\n      default:\n        return (\n          match.day(dateString, { width: \"wide\", context: \"formatting\" }) ||\n          match.day(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.day(dateString, { width: \"short\", context: \"formatting\" }) ||\n          match.day(dateString, { width: \"narrow\", context: \"formatting\" })\n        );\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 0 && value <= 6;\n  }\n\n  set(date, _flags, value, options) {\n    date = setDay(date, value, options);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\n    \"y\",\n    \"R\",\n    \"u\",\n    \"q\",\n    \"Q\",\n    \"M\",\n    \"L\",\n    \"I\",\n    \"d\",\n    \"D\",\n    \"E\",\n    \"i\",\n    \"c\",\n    \"t\",\n    \"T\",\n  ];\n}\n","import { setDay } from \"../../../setDay.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { mapValue, parseNDigits } from \"../utils.js\";\n\n// Stand-alone local day of week\nexport class StandAloneLocalDayParser extends Parser {\n  priority = 90;\n\n  parse(dateString, token, match, options) {\n    const valueCallback = (value) => {\n      // We want here floor instead of trunc, so we get -7 for value 0 instead of 0\n      const wholeWeekDays = Math.floor((value - 1) / 7) * 7;\n      return ((value + options.weekStartsOn + 6) % 7) + wholeWeekDays;\n    };\n\n    switch (token) {\n      // 3\n      case \"c\":\n      case \"cc\": // 03\n        return mapValue(parseNDigits(token.length, dateString), valueCallback);\n      // 3rd\n      case \"co\":\n        return mapValue(\n          match.ordinalNumber(dateString, {\n            unit: \"day\",\n          }),\n          valueCallback,\n        );\n      // Tue\n      case \"ccc\":\n        return (\n          match.day(dateString, {\n            width: \"abbreviated\",\n            context: \"standalone\",\n          }) ||\n          match.day(dateString, { width: \"short\", context: \"standalone\" }) ||\n          match.day(dateString, { width: \"narrow\", context: \"standalone\" })\n        );\n\n      // T\n      case \"ccccc\":\n        return match.day(dateString, {\n          width: \"narrow\",\n          context: \"standalone\",\n        });\n      // Tu\n      case \"cccccc\":\n        return (\n          match.day(dateString, { width: \"short\", context: \"standalone\" }) ||\n          match.day(dateString, { width: \"narrow\", context: \"standalone\" })\n        );\n\n      // Tuesday\n      case \"cccc\":\n      default:\n        return (\n          match.day(dateString, { width: \"wide\", context: \"standalone\" }) ||\n          match.day(dateString, {\n            width: \"abbreviated\",\n            context: \"standalone\",\n          }) ||\n          match.day(dateString, { width: \"short\", context: \"standalone\" }) ||\n          match.day(dateString, { width: \"narrow\", context: \"standalone\" })\n        );\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 0 && value <= 6;\n  }\n\n  set(date, _flags, value, options) {\n    date = setDay(date, value, options);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\n    \"y\",\n    \"R\",\n    \"u\",\n    \"q\",\n    \"Q\",\n    \"M\",\n    \"L\",\n    \"I\",\n    \"d\",\n    \"D\",\n    \"E\",\n    \"i\",\n    \"e\",\n    \"t\",\n    \"T\",\n  ];\n}\n","import { setISODay } from \"../../../setISODay.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { mapValue, parseNDigits } from \"../utils.js\";\n\n// ISO day of week\nexport class ISODayParser extends Parser {\n  priority = 90;\n\n  parse(dateString, token, match) {\n    const valueCallback = (value) => {\n      if (value === 0) {\n        return 7;\n      }\n      return value;\n    };\n\n    switch (token) {\n      // 2\n      case \"i\":\n      case \"ii\": // 02\n        return parseNDigits(token.length, dateString);\n      // 2nd\n      case \"io\":\n        return match.ordinalNumber(dateString, { unit: \"day\" });\n      // Tue\n      case \"iii\":\n        return mapValue(\n          match.day(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n            match.day(dateString, {\n              width: \"short\",\n              context: \"formatting\",\n            }) ||\n            match.day(dateString, {\n              width: \"narrow\",\n              context: \"formatting\",\n            }),\n          valueCallback,\n        );\n      // T\n      case \"iiiii\":\n        return mapValue(\n          match.day(dateString, {\n            width: \"narrow\",\n            context: \"formatting\",\n          }),\n          valueCallback,\n        );\n      // Tu\n      case \"iiiiii\":\n        return mapValue(\n          match.day(dateString, {\n            width: \"short\",\n            context: \"formatting\",\n          }) ||\n            match.day(dateString, {\n              width: \"narrow\",\n              context: \"formatting\",\n            }),\n          valueCallback,\n        );\n      // Tuesday\n      case \"iiii\":\n      default:\n        return mapValue(\n          match.day(dateString, {\n            width: \"wide\",\n            context: \"formatting\",\n          }) ||\n            match.day(dateString, {\n              width: \"abbreviated\",\n              context: \"formatting\",\n            }) ||\n            match.day(dateString, {\n              width: \"short\",\n              context: \"formatting\",\n            }) ||\n            match.day(dateString, {\n              width: \"narrow\",\n              context: \"formatting\",\n            }),\n          valueCallback,\n        );\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 1 && value <= 7;\n  }\n\n  set(date, _flags, value) {\n    date = setISODay(date, value);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\n    \"y\",\n    \"Y\",\n    \"u\",\n    \"q\",\n    \"Q\",\n    \"M\",\n    \"L\",\n    \"w\",\n    \"d\",\n    \"D\",\n    \"E\",\n    \"e\",\n    \"c\",\n    \"t\",\n    \"T\",\n  ];\n}\n","import { Parser } from \"../Parser.js\";\n\nimport { dayPeriodEnumToHours } from \"../utils.js\";\n\nexport class AMPMParser extends Parser {\n  priority = 80;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"a\":\n      case \"aa\":\n      case \"aaa\":\n        return (\n          match.dayPeriod(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.dayPeriod(dateString, {\n            width: \"narrow\",\n            context: \"formatting\",\n          })\n        );\n\n      case \"aaaaa\":\n        return match.dayPeriod(dateString, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      case \"aaaa\":\n      default:\n        return (\n          match.dayPeriod(dateString, {\n            width: \"wide\",\n            context: \"formatting\",\n          }) ||\n          match.dayPeriod(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.dayPeriod(dateString, {\n            width: \"narrow\",\n            context: \"formatting\",\n          })\n        );\n    }\n  }\n\n  set(date, _flags, value) {\n    date.setHours(dayPeriodEnumToHours(value), 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\"b\", \"B\", \"H\", \"k\", \"t\", \"T\"];\n}\n","import { Parser } from \"../Parser.js\";\n\nimport { dayPeriodEnumToHours } from \"../utils.js\";\n\nexport class AMPMMidnightParser extends Parser {\n  priority = 80;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"b\":\n      case \"bb\":\n      case \"bbb\":\n        return (\n          match.dayPeriod(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.dayPeriod(dateString, {\n            width: \"narrow\",\n            context: \"formatting\",\n          })\n        );\n\n      case \"bbbbb\":\n        return match.dayPeriod(dateString, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      case \"bbbb\":\n      default:\n        return (\n          match.dayPeriod(dateString, {\n            width: \"wide\",\n            context: \"formatting\",\n          }) ||\n          match.dayPeriod(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.dayPeriod(dateString, {\n            width: \"narrow\",\n            context: \"formatting\",\n          })\n        );\n    }\n  }\n\n  set(date, _flags, value) {\n    date.setHours(dayPeriodEnumToHours(value), 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\"a\", \"B\", \"H\", \"k\", \"t\", \"T\"];\n}\n","import { Parser } from \"../Parser.js\";\n\nimport { dayPeriodEnumToHours } from \"../utils.js\";\n\n// in the morning, in the afternoon, in the evening, at night\nexport class DayPeriodParser extends Parser {\n  priority = 80;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"B\":\n      case \"BB\":\n      case \"BBB\":\n        return (\n          match.dayPeriod(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.dayPeriod(dateString, {\n            width: \"narrow\",\n            context: \"formatting\",\n          })\n        );\n\n      case \"BBBBB\":\n        return match.dayPeriod(dateString, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      case \"BBBB\":\n      default:\n        return (\n          match.dayPeriod(dateString, {\n            width: \"wide\",\n            context: \"formatting\",\n          }) ||\n          match.dayPeriod(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.dayPeriod(dateString, {\n            width: \"narrow\",\n            context: \"formatting\",\n          })\n        );\n    }\n  }\n\n  set(date, _flags, value) {\n    date.setHours(dayPeriodEnumToHours(value), 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\"a\", \"b\", \"t\", \"T\"];\n}\n","import { numericPatterns } from \"../constants.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { parseNDigits, parseNumericPattern } from \"../utils.js\";\n\nexport class Hour1to12Parser extends Parser {\n  priority = 70;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"h\":\n        return parseNumericPattern(numericPatterns.hour12h, dateString);\n      case \"ho\":\n        return match.ordinalNumber(dateString, { unit: \"hour\" });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 1 && value <= 12;\n  }\n\n  set(date, _flags, value) {\n    const isPM = date.getHours() >= 12;\n    if (isPM && value < 12) {\n      date.setHours(value + 12, 0, 0, 0);\n    } else if (!isPM && value === 12) {\n      date.setHours(0, 0, 0, 0);\n    } else {\n      date.setHours(value, 0, 0, 0);\n    }\n    return date;\n  }\n\n  incompatibleTokens = [\"H\", \"K\", \"k\", \"t\", \"T\"];\n}\n","import { numericPatterns } from \"../constants.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { parseNDigits, parseNumericPattern } from \"../utils.js\";\n\nexport class Hour0to23Parser extends Parser {\n  priority = 70;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"H\":\n        return parseNumericPattern(numericPatterns.hour23h, dateString);\n      case \"Ho\":\n        return match.ordinalNumber(dateString, { unit: \"hour\" });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 0 && value <= 23;\n  }\n\n  set(date, _flags, value) {\n    date.setHours(value, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\"a\", \"b\", \"h\", \"K\", \"k\", \"t\", \"T\"];\n}\n","import { numericPatterns } from \"../constants.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { parseNDigits, parseNumericPattern } from \"../utils.js\";\n\nexport class Hour0To11Parser extends Parser {\n  priority = 70;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"K\":\n        return parseNumericPattern(numericPatterns.hour11h, dateString);\n      case \"Ko\":\n        return match.ordinalNumber(dateString, { unit: \"hour\" });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 0 && value <= 11;\n  }\n\n  set(date, _flags, value) {\n    const isPM = date.getHours() >= 12;\n    if (isPM && value < 12) {\n      date.setHours(value + 12, 0, 0, 0);\n    } else {\n      date.setHours(value, 0, 0, 0);\n    }\n    return date;\n  }\n\n  incompatibleTokens = [\"h\", \"H\", \"k\", \"t\", \"T\"];\n}\n","import { numericPatterns } from \"../constants.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { parseNDigits, parseNumericPattern } from \"../utils.js\";\n\nexport class Hour1To24Parser extends Parser {\n  priority = 70;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"k\":\n        return parseNumericPattern(numericPatterns.hour24h, dateString);\n      case \"ko\":\n        return match.ordinalNumber(dateString, { unit: \"hour\" });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 1 && value <= 24;\n  }\n\n  set(date, _flags, value) {\n    const hours = value <= 24 ? value % 24 : value;\n    date.setHours(hours, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\"a\", \"b\", \"h\", \"H\", \"K\", \"t\", \"T\"];\n}\n","import { numericPatterns } from \"../constants.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { parseNDigits, parseNumericPattern } from \"../utils.js\";\n\nexport class MinuteParser extends Parser {\n  priority = 60;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"m\":\n        return parseNumericPattern(numericPatterns.minute, dateString);\n      case \"mo\":\n        return match.ordinalNumber(dateString, { unit: \"minute\" });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 0 && value <= 59;\n  }\n\n  set(date, _flags, value) {\n    date.setMinutes(value, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\"t\", \"T\"];\n}\n","import { numericPatterns } from \"../constants.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { parseNDigits, parseNumericPattern } from \"../utils.js\";\n\nexport class SecondParser extends Parser {\n  priority = 50;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"s\":\n        return parseNumericPattern(numericPatterns.second, dateString);\n      case \"so\":\n        return match.ordinalNumber(dateString, { unit: \"second\" });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 0 && value <= 59;\n  }\n\n  set(date, _flags, value) {\n    date.setSeconds(value, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\"t\", \"T\"];\n}\n","import { Parser } from \"../Parser.js\";\n\nimport { mapValue, parseNDigits } from \"../utils.js\";\n\nexport class FractionOfSecondParser extends Parser {\n  priority = 30;\n\n  parse(dateString, token) {\n    const valueCallback = (value) =>\n      Math.trunc(value * Math.pow(10, -token.length + 3));\n    return mapValue(parseNDigits(token.length, dateString), valueCallback);\n  }\n\n  set(date, _flags, value) {\n    date.setMilliseconds(value);\n    return date;\n  }\n\n  incompatibleTokens = [\"t\", \"T\"];\n}\n","import { constructFrom } from \"../../../constructFrom.js\";\nimport { getTimezoneOffsetInMilliseconds } from \"../../../_lib/getTimezoneOffsetInMilliseconds.js\";\nimport { timezonePatterns } from \"../constants.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { parseTimezonePattern } from \"../utils.js\";\n\n// Timezone (ISO-8601. +00:00 is `'Z'`)\nexport class ISOTimezoneWithZParser extends Parser {\n  priority = 10;\n\n  parse(dateString, token) {\n    switch (token) {\n      case \"X\":\n        return parseTimezonePattern(\n          timezonePatterns.basicOptionalMinutes,\n          dateString,\n        );\n      case \"XX\":\n        return parseTimezonePattern(timezonePatterns.basic, dateString);\n      case \"XXXX\":\n        return parseTimezonePattern(\n          timezonePatterns.basicOptionalSeconds,\n          dateString,\n        );\n      case \"XXXXX\":\n        return parseTimezonePattern(\n          timezonePatterns.extendedOptionalSeconds,\n          dateString,\n        );\n      case \"XXX\":\n      default:\n        return parseTimezonePattern(timezonePatterns.extended, dateString);\n    }\n  }\n\n  set(date, flags, value) {\n    if (flags.timestampIsSet) return date;\n    return constructFrom(\n      date,\n      date.getTime() - getTimezoneOffsetInMilliseconds(date) - value,\n    );\n  }\n\n  incompatibleTokens = [\"t\", \"T\", \"x\"];\n}\n","import { constructFrom } from \"../../../constructFrom.js\";\nimport { getTimezoneOffsetInMilliseconds } from \"../../../_lib/getTimezoneOffsetInMilliseconds.js\";\nimport { timezonePatterns } from \"../constants.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { parseTimezonePattern } from \"../utils.js\";\n\n// Timezone (ISO-8601)\nexport class ISOTimezoneParser extends Parser {\n  priority = 10;\n\n  parse(dateString, token) {\n    switch (token) {\n      case \"x\":\n        return parseTimezonePattern(\n          timezonePatterns.basicOptionalMinutes,\n          dateString,\n        );\n      case \"xx\":\n        return parseTimezonePattern(timezonePatterns.basic, dateString);\n      case \"xxxx\":\n        return parseTimezonePattern(\n          timezonePatterns.basicOptionalSeconds,\n          dateString,\n        );\n      case \"xxxxx\":\n        return parseTimezonePattern(\n          timezonePatterns.extendedOptionalSeconds,\n          dateString,\n        );\n      case \"xxx\":\n      default:\n        return parseTimezonePattern(timezonePatterns.extended, dateString);\n    }\n  }\n\n  set(date, flags, value) {\n    if (flags.timestampIsSet) return date;\n    return constructFrom(\n      date,\n      date.getTime() - getTimezoneOffsetInMilliseconds(date) - value,\n    );\n  }\n\n  incompatibleTokens = [\"t\", \"T\", \"X\"];\n}\n","import { constructFrom } from \"../../../constructFrom.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { parseAnyDigitsSigned } from \"../utils.js\";\n\nexport class TimestampSecondsParser extends Parser {\n  priority = 40;\n\n  parse(dateString) {\n    return parseAnyDigitsSigned(dateString);\n  }\n\n  set(date, _flags, value) {\n    return [constructFrom(date, value * 1000), { timestampIsSet: true }];\n  }\n\n  incompatibleTokens = \"*\";\n}\n","import { constructFrom } from \"../../../constructFrom.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { parseAnyDigitsSigned } from \"../utils.js\";\n\nexport class TimestampMillisecondsParser extends Parser {\n  priority = 20;\n\n  parse(dateString) {\n    return parseAnyDigitsSigned(dateString);\n  }\n\n  set(date, _flags, value) {\n    return [constructFrom(date, value), { timestampIsSet: true }];\n  }\n\n  incompatibleTokens = \"*\";\n}\n","import { defaultLocale } from \"./_lib/defaultLocale.js\";\nimport { longFormatters } from \"./_lib/format/longFormatters.js\";\nimport {\n  isProtectedDayOfYearToken,\n  isProtectedWeekYearToken,\n  warnOrThrowProtectedError,\n} from \"./_lib/protectedTokens.js\";\nimport { constructFrom } from \"./constructFrom.js\";\nimport { getDefaultOptions } from \"./getDefaultOptions.js\";\nimport { toDate } from \"./toDate.js\";\n\nimport { DateTimezoneSetter } from \"./parse/_lib/Setter.js\";\nimport { parsers } from \"./parse/_lib/parsers.js\";\n\n// Rexports of internal for libraries to use.\n// See: https://github.com/date-fns/date-fns/issues/3638#issuecomment-1877082874\nexport { longFormatters, parsers };\n\n/**\n * The {@link parse} function options.\n */\n\n// This RegExp consists of three parts separated by `|`:\n// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token\n//   (one of the certain letters followed by `o`)\n// - (\\w)\\1* matches any sequences of the same letter\n// - '' matches two quote characters in a row\n// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),\n//   except a single quote symbol, which ends the sequence.\n//   Two quote characters do not end the sequence.\n//   If there is no matching single quote\n//   then the sequence will continue until the end of the string.\n// - . matches any single character unmatched by previous parts of the RegExps\nconst formattingTokensRegExp =\n  /[yYQqMLwIdDecihHKkms]o|(\\w)\\1*|''|'(''|[^'])+('|$)|./g;\n\n// This RegExp catches symbols escaped by quotes, and also\n// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`\nconst longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;\n\nconst escapedStringRegExp = /^'([^]*?)'?$/;\nconst doubleQuoteRegExp = /''/g;\n\nconst notWhitespaceRegExp = /\\S/;\nconst unescapedLatinCharacterRegExp = /[a-zA-Z]/;\n\n/**\n * @name parse\n * @category Common Helpers\n * @summary Parse the date.\n *\n * @description\n * Return the date parsed from string using the given format string.\n *\n * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.\n * > See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * The characters in the format string wrapped between two single quotes characters (') are escaped.\n * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.\n *\n * Format of the format string is based on Unicode Technical Standard #35:\n * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * with a few additions (see note 5 below the table).\n *\n * Not all tokens are compatible. Combinations that don't make sense or could lead to bugs are prohibited\n * and will throw `RangeError`. For example usage of 24-hour format token with AM/PM token will throw an exception:\n *\n * ```javascript\n * parse('23 AM', 'HH a', new Date())\n * //=> RangeError: The format string mustn't contain `HH` and `a` at the same time\n * ```\n *\n * See the compatibility table: https://docs.google.com/spreadsheets/d/e/2PACX-1vQOPU3xUhplll6dyoMmVUXHKl_8CRDs6_ueLmex3SoqwhuolkuN3O05l4rqx5h1dKX8eb46Ul-CCSrq/pubhtml?gid=0&single=true\n *\n * Accepted format string patterns:\n * | Unit                            |Prior| Pattern | Result examples                   | Notes |\n * |---------------------------------|-----|---------|-----------------------------------|-------|\n * | Era                             | 140 | G..GGG  | AD, BC                            |       |\n * |                                 |     | GGGG    | Anno Domini, Before Christ        | 2     |\n * |                                 |     | GGGGG   | A, B                              |       |\n * | Calendar year                   | 130 | y       | 44, 1, 1900, 2017, 9999           | 4     |\n * |                                 |     | yo      | 44th, 1st, 1900th, 9999999th      | 4,5   |\n * |                                 |     | yy      | 44, 01, 00, 17                    | 4     |\n * |                                 |     | yyy     | 044, 001, 123, 999                | 4     |\n * |                                 |     | yyyy    | 0044, 0001, 1900, 2017            | 4     |\n * |                                 |     | yyyyy   | ...                               | 2,4   |\n * | Local week-numbering year       | 130 | Y       | 44, 1, 1900, 2017, 9000           | 4     |\n * |                                 |     | Yo      | 44th, 1st, 1900th, 9999999th      | 4,5   |\n * |                                 |     | YY      | 44, 01, 00, 17                    | 4,6   |\n * |                                 |     | YYY     | 044, 001, 123, 999                | 4     |\n * |                                 |     | YYYY    | 0044, 0001, 1900, 2017            | 4,6   |\n * |                                 |     | YYYYY   | ...                               | 2,4   |\n * | ISO week-numbering year         | 130 | R       | -43, 1, 1900, 2017, 9999, -9999   | 4,5   |\n * |                                 |     | RR      | -43, 01, 00, 17                   | 4,5   |\n * |                                 |     | RRR     | -043, 001, 123, 999, -999         | 4,5   |\n * |                                 |     | RRRR    | -0043, 0001, 2017, 9999, -9999    | 4,5   |\n * |                                 |     | RRRRR   | ...                               | 2,4,5 |\n * | Extended year                   | 130 | u       | -43, 1, 1900, 2017, 9999, -999    | 4     |\n * |                                 |     | uu      | -43, 01, 99, -99                  | 4     |\n * |                                 |     | uuu     | -043, 001, 123, 999, -999         | 4     |\n * |                                 |     | uuuu    | -0043, 0001, 2017, 9999, -9999    | 4     |\n * |                                 |     | uuuuu   | ...                               | 2,4   |\n * | Quarter (formatting)            | 120 | Q       | 1, 2, 3, 4                        |       |\n * |                                 |     | Qo      | 1st, 2nd, 3rd, 4th                | 5     |\n * |                                 |     | QQ      | 01, 02, 03, 04                    |       |\n * |                                 |     | QQQ     | Q1, Q2, Q3, Q4                    |       |\n * |                                 |     | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 |     | QQQQQ   | 1, 2, 3, 4                        | 4     |\n * | Quarter (stand-alone)           | 120 | q       | 1, 2, 3, 4                        |       |\n * |                                 |     | qo      | 1st, 2nd, 3rd, 4th                | 5     |\n * |                                 |     | qq      | 01, 02, 03, 04                    |       |\n * |                                 |     | qqq     | Q1, Q2, Q3, Q4                    |       |\n * |                                 |     | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 |     | qqqqq   | 1, 2, 3, 4                        | 3     |\n * | Month (formatting)              | 110 | M       | 1, 2, ..., 12                     |       |\n * |                                 |     | Mo      | 1st, 2nd, ..., 12th               | 5     |\n * |                                 |     | MM      | 01, 02, ..., 12                   |       |\n * |                                 |     | MMM     | Jan, Feb, ..., Dec                |       |\n * |                                 |     | MMMM    | January, February, ..., December  | 2     |\n * |                                 |     | MMMMM   | J, F, ..., D                      |       |\n * | Month (stand-alone)             | 110 | L       | 1, 2, ..., 12                     |       |\n * |                                 |     | Lo      | 1st, 2nd, ..., 12th               | 5     |\n * |                                 |     | LL      | 01, 02, ..., 12                   |       |\n * |                                 |     | LLL     | Jan, Feb, ..., Dec                |       |\n * |                                 |     | LLLL    | January, February, ..., December  | 2     |\n * |                                 |     | LLLLL   | J, F, ..., D                      |       |\n * | Local week of year              | 100 | w       | 1, 2, ..., 53                     |       |\n * |                                 |     | wo      | 1st, 2nd, ..., 53th               | 5     |\n * |                                 |     | ww      | 01, 02, ..., 53                   |       |\n * | ISO week of year                | 100 | I       | 1, 2, ..., 53                     | 5     |\n * |                                 |     | Io      | 1st, 2nd, ..., 53th               | 5     |\n * |                                 |     | II      | 01, 02, ..., 53                   | 5     |\n * | Day of month                    |  90 | d       | 1, 2, ..., 31                     |       |\n * |                                 |     | do      | 1st, 2nd, ..., 31st               | 5     |\n * |                                 |     | dd      | 01, 02, ..., 31                   |       |\n * | Day of year                     |  90 | D       | 1, 2, ..., 365, 366               | 7     |\n * |                                 |     | Do      | 1st, 2nd, ..., 365th, 366th       | 5     |\n * |                                 |     | DD      | 01, 02, ..., 365, 366             | 7     |\n * |                                 |     | DDD     | 001, 002, ..., 365, 366           |       |\n * |                                 |     | DDDD    | ...                               | 2     |\n * | Day of week (formatting)        |  90 | E..EEE  | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 |     | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 |     | EEEEE   | M, T, W, T, F, S, S               |       |\n * |                                 |     | EEEEEE  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | ISO day of week (formatting)    |  90 | i       | 1, 2, 3, ..., 7                   | 5     |\n * |                                 |     | io      | 1st, 2nd, ..., 7th                | 5     |\n * |                                 |     | ii      | 01, 02, ..., 07                   | 5     |\n * |                                 |     | iii     | Mon, Tue, Wed, ..., Sun           | 5     |\n * |                                 |     | iiii    | Monday, Tuesday, ..., Sunday      | 2,5   |\n * |                                 |     | iiiii   | M, T, W, T, F, S, S               | 5     |\n * |                                 |     | iiiiii  | Mo, Tu, We, Th, Fr, Sa, Su        | 5     |\n * | Local day of week (formatting)  |  90 | e       | 2, 3, 4, ..., 1                   |       |\n * |                                 |     | eo      | 2nd, 3rd, ..., 1st                | 5     |\n * |                                 |     | ee      | 02, 03, ..., 01                   |       |\n * |                                 |     | eee     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 |     | eeee    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 |     | eeeee   | M, T, W, T, F, S, S               |       |\n * |                                 |     | eeeeee  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | Local day of week (stand-alone) |  90 | c       | 2, 3, 4, ..., 1                   |       |\n * |                                 |     | co      | 2nd, 3rd, ..., 1st                | 5     |\n * |                                 |     | cc      | 02, 03, ..., 01                   |       |\n * |                                 |     | ccc     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 |     | cccc    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 |     | ccccc   | M, T, W, T, F, S, S               |       |\n * |                                 |     | cccccc  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | AM, PM                          |  80 | a..aaa  | AM, PM                            |       |\n * |                                 |     | aaaa    | a.m., p.m.                        | 2     |\n * |                                 |     | aaaaa   | a, p                              |       |\n * | AM, PM, noon, midnight          |  80 | b..bbb  | AM, PM, noon, midnight            |       |\n * |                                 |     | bbbb    | a.m., p.m., noon, midnight        | 2     |\n * |                                 |     | bbbbb   | a, p, n, mi                       |       |\n * | Flexible day period             |  80 | B..BBB  | at night, in the morning, ...     |       |\n * |                                 |     | BBBB    | at night, in the morning, ...     | 2     |\n * |                                 |     | BBBBB   | at night, in the morning, ...     |       |\n * | Hour [1-12]                     |  70 | h       | 1, 2, ..., 11, 12                 |       |\n * |                                 |     | ho      | 1st, 2nd, ..., 11th, 12th         | 5     |\n * |                                 |     | hh      | 01, 02, ..., 11, 12               |       |\n * | Hour [0-23]                     |  70 | H       | 0, 1, 2, ..., 23                  |       |\n * |                                 |     | Ho      | 0th, 1st, 2nd, ..., 23rd          | 5     |\n * |                                 |     | HH      | 00, 01, 02, ..., 23               |       |\n * | Hour [0-11]                     |  70 | K       | 1, 2, ..., 11, 0                  |       |\n * |                                 |     | Ko      | 1st, 2nd, ..., 11th, 0th          | 5     |\n * |                                 |     | KK      | 01, 02, ..., 11, 00               |       |\n * | Hour [1-24]                     |  70 | k       | 24, 1, 2, ..., 23                 |       |\n * |                                 |     | ko      | 24th, 1st, 2nd, ..., 23rd         | 5     |\n * |                                 |     | kk      | 24, 01, 02, ..., 23               |       |\n * | Minute                          |  60 | m       | 0, 1, ..., 59                     |       |\n * |                                 |     | mo      | 0th, 1st, ..., 59th               | 5     |\n * |                                 |     | mm      | 00, 01, ..., 59                   |       |\n * | Second                          |  50 | s       | 0, 1, ..., 59                     |       |\n * |                                 |     | so      | 0th, 1st, ..., 59th               | 5     |\n * |                                 |     | ss      | 00, 01, ..., 59                   |       |\n * | Seconds timestamp               |  40 | t       | 512969520                         |       |\n * |                                 |     | tt      | ...                               | 2     |\n * | Fraction of second              |  30 | S       | 0, 1, ..., 9                      |       |\n * |                                 |     | SS      | 00, 01, ..., 99                   |       |\n * |                                 |     | SSS     | 000, 001, ..., 999                |       |\n * |                                 |     | SSSS    | ...                               | 2     |\n * | Milliseconds timestamp          |  20 | T       | 512969520900                      |       |\n * |                                 |     | TT      | ...                               | 2     |\n * | Timezone (ISO-8601 w/ Z)        |  10 | X       | -08, +0530, Z                     |       |\n * |                                 |     | XX      | -0800, +0530, Z                   |       |\n * |                                 |     | XXX     | -08:00, +05:30, Z                 |       |\n * |                                 |     | XXXX    | -0800, +0530, Z, +123456          | 2     |\n * |                                 |     | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |\n * | Timezone (ISO-8601 w/o Z)       |  10 | x       | -08, +0530, +00                   |       |\n * |                                 |     | xx      | -0800, +0530, +0000               |       |\n * |                                 |     | xxx     | -08:00, +05:30, +00:00            | 2     |\n * |                                 |     | xxxx    | -0800, +0530, +0000, +123456      |       |\n * |                                 |     | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |\n * | Long localized date             |  NA | P       | 05/29/1453                        | 5,8   |\n * |                                 |     | PP      | May 29, 1453                      |       |\n * |                                 |     | PPP     | May 29th, 1453                    |       |\n * |                                 |     | PPPP    | Sunday, May 29th, 1453            | 2,5,8 |\n * | Long localized time             |  NA | p       | 12:00 AM                          | 5,8   |\n * |                                 |     | pp      | 12:00:00 AM                       |       |\n * | Combination of date and time    |  NA | Pp      | 05/29/1453, 12:00 AM              |       |\n * |                                 |     | PPpp    | May 29, 1453, 12:00:00 AM         |       |\n * |                                 |     | PPPpp   | May 29th, 1453 at ...             |       |\n * |                                 |     | PPPPpp  | Sunday, May 29th, 1453 at ...     | 2,5,8 |\n * Notes:\n * 1. \"Formatting\" units (e.g. formatting quarter) in the default en-US locale\n *    are the same as \"stand-alone\" units, but are different in some languages.\n *    \"Formatting\" units are declined according to the rules of the language\n *    in the context of a date. \"Stand-alone\" units are always nominative singular.\n *    In `format` function, they will produce different result:\n *\n *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`\n *\n *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`\n *\n *    `parse` will try to match both formatting and stand-alone units interchangeably.\n *\n * 2. Any sequence of the identical letters is a pattern, unless it is escaped by\n *    the single quote characters (see below).\n *    If the sequence is longer than listed in table:\n *    - for numerical units (`yyyyyyyy`) `parse` will try to match a number\n *      as wide as the sequence\n *    - for text units (`MMMMMMMM`) `parse` will try to match the widest variation of the unit.\n *      These variations are marked with \"2\" in the last column of the table.\n *\n * 3. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.\n *    These tokens represent the shortest form of the quarter.\n *\n * 4. The main difference between `y` and `u` patterns are B.C. years:\n *\n *    | Year | `y` | `u` |\n *    |------|-----|-----|\n *    | AC 1 |   1 |   1 |\n *    | BC 1 |   1 |   0 |\n *    | BC 2 |   2 |  -1 |\n *\n *    Also `yy` will try to guess the century of two digit year by proximity with `referenceDate`:\n *\n *    `parse('50', 'yy', new Date(2018, 0, 1)) //=> Sat Jan 01 2050 00:00:00`\n *\n *    `parse('75', 'yy', new Date(2018, 0, 1)) //=> Wed Jan 01 1975 00:00:00`\n *\n *    while `uu` will just assign the year as is:\n *\n *    `parse('50', 'uu', new Date(2018, 0, 1)) //=> Sat Jan 01 0050 00:00:00`\n *\n *    `parse('75', 'uu', new Date(2018, 0, 1)) //=> Tue Jan 01 0075 00:00:00`\n *\n *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),\n *    except local week-numbering years are dependent on `options.weekStartsOn`\n *    and `options.firstWeekContainsDate` (compare [setISOWeekYear](https://date-fns.org/docs/setISOWeekYear)\n *    and [setWeekYear](https://date-fns.org/docs/setWeekYear)).\n *\n * 5. These patterns are not in the Unicode Technical Standard #35:\n *    - `i`: ISO day of week\n *    - `I`: ISO week of year\n *    - `R`: ISO week-numbering year\n *    - `o`: ordinal number modifier\n *    - `P`: long localized date\n *    - `p`: long localized time\n *\n * 6. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.\n *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * 7. `D` and `DD` tokens represent days of the year but they are often confused with days of the month.\n *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * 8. `P+` tokens do not have a defined priority since they are merely aliases to other tokens based\n *    on the given locale.\n *\n *    using `en-US` locale: `P` => `MM/dd/yyyy`\n *    using `en-US` locale: `p` => `hh:mm a`\n *    using `pt-BR` locale: `P` => `dd/MM/yyyy`\n *    using `pt-BR` locale: `p` => `HH:mm`\n *\n * Values will be assigned to the date in the descending order of its unit's priority.\n * Units of an equal priority overwrite each other in the order of appearance.\n *\n * If no values of higher priority are parsed (e.g. when parsing string 'January 1st' without a year),\n * the values will be taken from 3rd argument `referenceDate` which works as a context of parsing.\n *\n * `referenceDate` must be passed for correct work of the function.\n * If you're not sure which `referenceDate` to supply, create a new instance of Date:\n * `parse('02/11/2014', 'MM/dd/yyyy', new Date())`\n * In this case parsing will be done in the context of the current date.\n * If `referenceDate` is `Invalid Date` or a value not convertible to valid `Date`,\n * then `Invalid Date` will be returned.\n *\n * The result may vary by locale.\n *\n * If `formatString` matches with `dateString` but does not provides tokens, `referenceDate` will be returned.\n *\n * If parsing failed, `Invalid Date` will be returned.\n * Invalid Date is a Date, whose time value is NaN.\n * Time value of Date: http://es5.github.io/#x15.9.1.1\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param dateStr - The string to parse\n * @param formatStr - The string of tokens\n * @param referenceDate - defines values missing from the parsed dateString\n * @param options - An object with options.\n *   see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *   see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * @returns The parsed date\n *\n * @throws `options.locale` must contain `match` property\n * @throws use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws format string contains an unescaped latin alphabet character\n *\n * @example\n * // Parse 11 February 2014 from middle-endian format:\n * var result = parse('02/11/2014', 'MM/dd/yyyy', new Date())\n * //=> Tue Feb 11 2014 00:00:00\n *\n * @example\n * // Parse 28th of February in Esperanto locale in the context of 2010 year:\n * import eo from 'date-fns/locale/eo'\n * var result = parse('28-a de februaro', \"do 'de' MMMM\", new Date(2010, 0, 1), {\n *   locale: eo\n * })\n * //=> Sun Feb 28 2010 00:00:00\n */\nexport function parse(dateStr, formatStr, referenceDate, options) {\n  const invalidDate = () => constructFrom(options?.in || referenceDate, NaN);\n  const defaultOptions = getDefaultOptions();\n  const locale = options?.locale ?? defaultOptions.locale ?? defaultLocale;\n\n  const firstWeekContainsDate =\n    options?.firstWeekContainsDate ??\n    options?.locale?.options?.firstWeekContainsDate ??\n    defaultOptions.firstWeekContainsDate ??\n    defaultOptions.locale?.options?.firstWeekContainsDate ??\n    1;\n\n  const weekStartsOn =\n    options?.weekStartsOn ??\n    options?.locale?.options?.weekStartsOn ??\n    defaultOptions.weekStartsOn ??\n    defaultOptions.locale?.options?.weekStartsOn ??\n    0;\n\n  if (!formatStr)\n    return dateStr ? invalidDate() : toDate(referenceDate, options?.in);\n\n  const subFnOptions = {\n    firstWeekContainsDate,\n    weekStartsOn,\n    locale,\n  };\n\n  // If timezone isn't specified, it will try to use the context or\n  // the reference date and fallback to the system time zone.\n  const setters = [new DateTimezoneSetter(options?.in, referenceDate)];\n\n  const tokens = formatStr\n    .match(longFormattingTokensRegExp)\n    .map((substring) => {\n      const firstCharacter = substring[0];\n      if (firstCharacter in longFormatters) {\n        const longFormatter = longFormatters[firstCharacter];\n        return longFormatter(substring, locale.formatLong);\n      }\n      return substring;\n    })\n    .join(\"\")\n    .match(formattingTokensRegExp);\n\n  const usedTokens = [];\n\n  for (let token of tokens) {\n    if (\n      !options?.useAdditionalWeekYearTokens &&\n      isProtectedWeekYearToken(token)\n    ) {\n      warnOrThrowProtectedError(token, formatStr, dateStr);\n    }\n    if (\n      !options?.useAdditionalDayOfYearTokens &&\n      isProtectedDayOfYearToken(token)\n    ) {\n      warnOrThrowProtectedError(token, formatStr, dateStr);\n    }\n\n    const firstCharacter = token[0];\n    const parser = parsers[firstCharacter];\n    if (parser) {\n      const { incompatibleTokens } = parser;\n      if (Array.isArray(incompatibleTokens)) {\n        const incompatibleToken = usedTokens.find(\n          (usedToken) =>\n            incompatibleTokens.includes(usedToken.token) ||\n            usedToken.token === firstCharacter,\n        );\n        if (incompatibleToken) {\n          throw new RangeError(\n            `The format string mustn't contain \\`${incompatibleToken.fullToken}\\` and \\`${token}\\` at the same time`,\n          );\n        }\n      } else if (parser.incompatibleTokens === \"*\" && usedTokens.length > 0) {\n        throw new RangeError(\n          `The format string mustn't contain \\`${token}\\` and any other token at the same time`,\n        );\n      }\n\n      usedTokens.push({ token: firstCharacter, fullToken: token });\n\n      const parseResult = parser.run(\n        dateStr,\n        token,\n        locale.match,\n        subFnOptions,\n      );\n\n      if (!parseResult) {\n        return invalidDate();\n      }\n\n      setters.push(parseResult.setter);\n\n      dateStr = parseResult.rest;\n    } else {\n      if (firstCharacter.match(unescapedLatinCharacterRegExp)) {\n        throw new RangeError(\n          \"Format string contains an unescaped latin alphabet character `\" +\n            firstCharacter +\n            \"`\",\n        );\n      }\n\n      // Replace two single quote characters with one single quote character\n      if (token === \"''\") {\n        token = \"'\";\n      } else if (firstCharacter === \"'\") {\n        token = cleanEscapedString(token);\n      }\n\n      // Cut token from string, or, if string doesn't match the token, return Invalid Date\n      if (dateStr.indexOf(token) === 0) {\n        dateStr = dateStr.slice(token.length);\n      } else {\n        return invalidDate();\n      }\n    }\n  }\n\n  // Check if the remaining input contains something other than whitespace\n  if (dateStr.length > 0 && notWhitespaceRegExp.test(dateStr)) {\n    return invalidDate();\n  }\n\n  const uniquePrioritySetters = setters\n    .map((setter) => setter.priority)\n    .sort((a, b) => b - a)\n    .filter((priority, index, array) => array.indexOf(priority) === index)\n    .map((priority) =>\n      setters\n        .filter((setter) => setter.priority === priority)\n        .sort((a, b) => b.subPriority - a.subPriority),\n    )\n    .map((setterArray) => setterArray[0]);\n\n  let date = toDate(referenceDate, options?.in);\n\n  if (isNaN(+date)) return invalidDate();\n\n  const flags = {};\n  for (const setter of uniquePrioritySetters) {\n    if (!setter.validate(date, subFnOptions)) {\n      return invalidDate();\n    }\n\n    const result = setter.set(date, flags, subFnOptions);\n    // Result is tuple (date, flags)\n    if (Array.isArray(result)) {\n      date = result[0];\n      Object.assign(flags, result[1]);\n      // Result is date\n    } else {\n      date = result;\n    }\n  }\n\n  return date;\n}\n\nfunction cleanEscapedString(input) {\n  return input.match(escapedStringRegExp)[1].replace(doubleQuoteRegExp, \"'\");\n}\n\n// Fallback for modularized imports:\nexport default parse;\n","import { constructFrom } from \"./constructFrom.js\";\nimport { startOfISOWeek } from \"./startOfISOWeek.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link getISOWeekYear} function options.\n */\n\n/**\n * @name getISOWeekYear\n * @category ISO Week-Numbering Year Helpers\n * @summary Get the ISO week-numbering year of the given date.\n *\n * @description\n * Get the ISO week-numbering year of the given date,\n * which always starts 3 days before the year's first Thursday.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @param date - The given date\n *\n * @returns The ISO week-numbering year\n *\n * @example\n * // Which ISO-week numbering year is 2 January 2005?\n * const result = getISOWeekYear(new Date(2005, 0, 2))\n * //=> 2004\n */\nexport function getISOWeekYear(date, options) {\n  const _date = toDate(date, options?.in);\n  const year = _date.getFullYear();\n\n  const fourthOfJanuaryOfNextYear = constructFrom(_date, 0);\n  fourthOfJanuaryOfNextYear.setFullYear(year + 1, 0, 4);\n  fourthOfJanuaryOfNextYear.setHours(0, 0, 0, 0);\n  const startOfNextYear = startOfISOWeek(fourthOfJanuaryOfNextYear);\n\n  const fourthOfJanuaryOfThisYear = constructFrom(_date, 0);\n  fourthOfJanuaryOfThisYear.setFullYear(year, 0, 4);\n  fourthOfJanuaryOfThisYear.setHours(0, 0, 0, 0);\n  const startOfThisYear = startOfISOWeek(fourthOfJanuaryOfThisYear);\n\n  if (_date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1;\n  } else if (_date.getTime() >= startOfThisYear.getTime()) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}\n\n// Fallback for modularized imports:\nexport default getISOWeekYear;\n"],"names":["startOfISOWeek","date","options","weekStartsOn","getDayOfYear","_date","toDate","in","laterDate","earlierDate","laterDate_","earlierDate_","context","dates","normalize","constructFrom","bind","find","map","normalizeDates","laterStartOfDay","startOfDay","earlierStartOfDay","laterTimestamp","getTimezoneOffsetInMilliseconds","earlierTimestamp","Math","round","differenceInCalendarDays","date_","setFullYear","getFullYear","setHours","startOfYear","addLeadingZeros","number","targetLength","abs","toString","padStart","lightFormatters","y","token","signedYear","year","length","M","month","getMonth","String","d","getDate","a","dayPeriodEnumValue","getHours","toUpperCase","h","H","m","getMinutes","s","getSeconds","S","numberOfDigits","milliseconds","getMilliseconds","trunc","pow","formatters","G","localize","era","width","ordinalNumber","unit","Y","signedWeekYear","getWeekYear","weekYear","R","getISOWeekYear","u","Q","quarter","ceil","q","L","w","week","getWeek","I","isoWeek","getISOWeek","D","dayOfYear","E","dayOfWeek","getDay","day","e","localDayOfWeek","c","i","isoDayOfWeek","dayPeriod","toLowerCase","b","hours","B","K","k","X","_localize","timezoneOffset","getTimezoneOffset","formatTimezoneWithOptionalMinutes","formatTimezone","x","O","formatTimezoneShort","z","t","T","offset","delimiter","sign","absOffset","minutes","formattingTokensRegExp","longFormattingTokensRegExp","escapedStringRegExp","doubleQuoteRegExp","unescapedLatinCharacterRegExp","format","formatStr","defaultOptions","locale","firstWeekContainsDate","originalDate","isValid","RangeError","parts","match","substring","firstCharacter","longFormatter","longFormatters","formatLong","join","isToken","value","cleanEscapedString","preprocessor","formatterOptions","part","useAdditionalWeekYearTokens","useAdditionalDayOfYearTokens","formatter","input","matched","replace","utcDate","Date","UTC","setUTCFullYear","formatDistanceLocale","lessThanXSeconds","one","other","xSeconds","halfAMinute","lessThanXMinutes","xMinutes","aboutXHours","xHours","xDays","aboutXWeeks","xWeeks","aboutXMonths","xMonths","aboutXYears","xYears","overXYears","almostXYears","buildFormatLongFn","args","defaultWidth","formats","full","long","medium","short","time","dateTime","formatRelativeLocale","lastWeek","yesterday","today","tomorrow","nextWeek","buildLocalizeFn","valuesArray","formattingValues","defaultFormattingWidth","values","argumentCallback","buildMatchFn","string","matchPattern","matchPatterns","defaultMatchWidth","matchResult","matchedString","parsePatterns","defaultParseWidth","key","Array","isArray","array","test","findIndex","object","Object","prototype","hasOwnProperty","call","findKey","valueCallback","rest","slice","enUS","code","formatDistance","count","result","tokenValue","addSuffix","comparison","formatRelative","_baseDate","_options","dirtyNumber","Number","rem100","narrow","abbreviated","wide","am","pm","midnight","noon","morning","afternoon","evening","night","parsePattern","parseInt","parseResult","any","index","dayOfYearTokenRE","weekYearTokenRE","throwTokens","isProtectedDayOfYearToken","isProtectedWeekYearToken","warnOrThrowProtectedError","_message","subject","message","console","warn","includes","constructor","startOfWeek","diff","setDate","argument","firstWeek","startOfWeekYear","firstWeekOfNextYear","startOfNextYear","firstWeekOfThisYear","startOfThisYear","millisecondsInWeek","millisecondsInDay","millisecondsInMinute","millisecondsInHour","millisecondsInSecond","constructFromSymbol","Symbol","for","getDefaultOptions","isEqual","leftDate","rightDate","dateLongFormatter","pattern","timeLongFormatter","p","P","datePattern","timePattern","dateTimeFormat","isNaN","fourthOfJanuary","startOfISOWeekYear","Setter","subPriority","validate","_utcDate","ValueSetter","validateValue","setValue","priority","super","this","set","flags","DateTimezoneSetter","reference","timestampIsSet","isConstructor","transpose","Parser","run","dateString","parse","setter","_value","numericPatterns","timezonePatterns","mapValue","parseFnResult","mapFn","parseNumericPattern","parseTimezonePattern","seconds","parseAnyDigitsSigned","parseNDigits","n","RegExp","parseNDigitsSigned","dayPeriodEnumToHours","normalizeTwoDigitYear","twoDigitYear","currentYear","isCommonEra","absCurrentYear","rangeEnd","isLeapYearIndex","DAYS_IN_MONTH","DAYS_IN_MONTH_LEAP_YEAR","addDays","amount","NaN","setDay","currentDay","delta","setISODay","getISODay","parsers","incompatibleTokens","isTwoDigitYear","normalizedTwoDigitYear","_flags","firstWeekOfYear","setMonth","setWeek","setISOWeek","isLeapYear","subpriority","wholeWeekDays","floor","isPM","setMinutes","setSeconds","setMilliseconds","getTime","notWhitespaceRegExp","dateStr","referenceDate","invalidDate","assign","subFnOptions","setters","tokens","usedTokens","parser","incompatibleToken","usedToken","fullToken","push","indexOf","uniquePrioritySetters","sort","filter","setterArray","fourthOfJanuaryOfNextYear","fourthOfJanuaryOfThisYear"],"sourceRoot":""}